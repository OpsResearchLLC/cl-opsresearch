(in-package #:fann)
;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.7
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defctype #.(swig-lispify "fann_type" 'typename) :double)

(cl:export '#.(swig-lispify "fann_type" 'typename))

(cl:defconstant #.(swig-lispify "NULL" 'constant) 0)

(cl:export '#.(swig-lispify "NULL" 'constant))

(cffi:defcfun ("fann_create_standard" #.(swig-lispify "fann_create_standard" 'function)) :pointer
  (num_layers :unsigned-int)
  &rest)

(cl:export '#.(swig-lispify "fann_create_standard" 'function))

(cffi:defcfun ("fann_create_standard_array" #.(swig-lispify "fann_create_standard_array" 'function)) :pointer
  (num_layers :unsigned-int)
  (layers :pointer))

(cl:export '#.(swig-lispify "fann_create_standard_array" 'function))

(cffi:defcfun ("fann_create_sparse" #.(swig-lispify "fann_create_sparse" 'function)) :pointer
  (connection_rate :float)
  (num_layers :unsigned-int)
  &rest)

(cl:export '#.(swig-lispify "fann_create_sparse" 'function))

(cffi:defcfun ("fann_create_sparse_array" #.(swig-lispify "fann_create_sparse_array" 'function)) :pointer
  (connection_rate :float)
  (num_layers :unsigned-int)
  (layers :pointer))

(cl:export '#.(swig-lispify "fann_create_sparse_array" 'function))

(cffi:defcfun ("fann_create_shortcut" #.(swig-lispify "fann_create_shortcut" 'function)) :pointer
  (num_layers :unsigned-int)
  &rest)

(cl:export '#.(swig-lispify "fann_create_shortcut" 'function))

(cffi:defcfun ("fann_create_shortcut_array" #.(swig-lispify "fann_create_shortcut_array" 'function)) :pointer
  (num_layers :unsigned-int)
  (layers :pointer))

(cl:export '#.(swig-lispify "fann_create_shortcut_array" 'function))

(cffi:defcfun ("fann_destroy" #.(swig-lispify "fann_destroy" 'function)) :void
  (ann :pointer))

(cl:export '#.(swig-lispify "fann_destroy" 'function))

(cffi:defcfun ("fann_copy" #.(swig-lispify "fann_copy" 'function)) :pointer
  (ann :pointer))

(cl:export '#.(swig-lispify "fann_copy" 'function))

(cffi:defcfun ("fann_run" #.(swig-lispify "fann_run" 'function)) :pointer
  (ann :pointer)
  (input :pointer))

(cl:export '#.(swig-lispify "fann_run" 'function))

(cffi:defcfun ("fann_randomize_weights" #.(swig-lispify "fann_randomize_weights" 'function)) :void
  (ann :pointer)
  (min_weight :double)
  (max_weight :double))

(cl:export '#.(swig-lispify "fann_randomize_weights" 'function))

(cffi:defcfun ("fann_init_weights" #.(swig-lispify "fann_init_weights" 'function)) :void
  (ann :pointer)
  (train_data :pointer))

(cl:export '#.(swig-lispify "fann_init_weights" 'function))

(cffi:defcfun ("fann_print_connections" #.(swig-lispify "fann_print_connections" 'function)) :void
  (ann :pointer))

(cl:export '#.(swig-lispify "fann_print_connections" 'function))

(cffi:defcfun ("fann_print_parameters" #.(swig-lispify "fann_print_parameters" 'function)) :void
  (ann :pointer))

(cl:export '#.(swig-lispify "fann_print_parameters" 'function))

(cffi:defcfun ("fann_get_num_input" #.(swig-lispify "fann_get_num_input" 'function)) :unsigned-int
  (ann :pointer))

(cl:export '#.(swig-lispify "fann_get_num_input" 'function))

(cffi:defcfun ("fann_get_num_output" #.(swig-lispify "fann_get_num_output" 'function)) :unsigned-int
  (ann :pointer))

(cl:export '#.(swig-lispify "fann_get_num_output" 'function))

(cffi:defcfun ("fann_get_total_neurons" #.(swig-lispify "fann_get_total_neurons" 'function)) :unsigned-int
  (ann :pointer))

(cl:export '#.(swig-lispify "fann_get_total_neurons" 'function))

(cffi:defcfun ("fann_get_total_connections" #.(swig-lispify "fann_get_total_connections" 'function)) :unsigned-int
  (ann :pointer))

(cl:export '#.(swig-lispify "fann_get_total_connections" 'function))

(cffi:defcfun ("fann_get_network_type" #.(swig-lispify "fann_get_network_type" 'function)) :pointer
  (ann :pointer))

(cl:export '#.(swig-lispify "fann_get_network_type" 'function))

(cffi:defcfun ("fann_get_connection_rate" #.(swig-lispify "fann_get_connection_rate" 'function)) :float
  (ann :pointer))

(cl:export '#.(swig-lispify "fann_get_connection_rate" 'function))

(cffi:defcfun ("fann_get_num_layers" #.(swig-lispify "fann_get_num_layers" 'function)) :unsigned-int
  (ann :pointer))

(cl:export '#.(swig-lispify "fann_get_num_layers" 'function))

(cffi:defcfun ("fann_get_layer_array" #.(swig-lispify "fann_get_layer_array" 'function)) :void
  (ann :pointer)
  (layers :pointer))

(cl:export '#.(swig-lispify "fann_get_layer_array" 'function))

(cffi:defcfun ("fann_get_bias_array" #.(swig-lispify "fann_get_bias_array" 'function)) :void
  (ann :pointer)
  (bias :pointer))

(cl:export '#.(swig-lispify "fann_get_bias_array" 'function))

(cffi:defcfun ("fann_get_connection_array" #.(swig-lispify "fann_get_connection_array" 'function)) :void
  (ann :pointer)
  (connections :pointer))

(cl:export '#.(swig-lispify "fann_get_connection_array" 'function))

(cffi:defcfun ("fann_set_weight_array" #.(swig-lispify "fann_set_weight_array" 'function)) :void
  (ann :pointer)
  (connections :pointer)
  (num_connections :unsigned-int))

(cl:export '#.(swig-lispify "fann_set_weight_array" 'function))

(cffi:defcfun ("fann_set_weight" #.(swig-lispify "fann_set_weight" 'function)) :void
  (ann :pointer)
  (from_neuron :unsigned-int)
  (to_neuron :unsigned-int)
  (weight :double))

(cl:export '#.(swig-lispify "fann_set_weight" 'function))

(cffi:defcfun ("fann_set_user_data" #.(swig-lispify "fann_set_user_data" 'function)) :void
  (ann :pointer)
  (user_data :pointer))

(cl:export '#.(swig-lispify "fann_set_user_data" 'function))

(cffi:defcfun ("fann_get_user_data" #.(swig-lispify "fann_get_user_data" 'function)) :pointer
  (ann :pointer))

(cl:export '#.(swig-lispify "fann_get_user_data" 'function))


