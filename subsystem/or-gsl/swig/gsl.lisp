(in-package #:gsl)
;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.5
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(defanonenum 
	(GSL_SUCCESS #.0)
	(GSL_FAILURE #.-1)
	(GSL_CONTINUE #.-2)
	(GSL_EDOM #.1)
	(GSL_ERANGE #.2)
	(GSL_EFAULT #.3)
	(GSL_EINVAL #.4)
	(GSL_EFAILED #.5)
	(GSL_EFACTOR #.6)
	(GSL_ESANITY #.7)
	(GSL_ENOMEM #.8)
	(GSL_EBADFUNC #.9)
	(GSL_ERUNAWAY #.10)
	(GSL_EMAXITER #.11)
	(GSL_EZERODIV #.12)
	(GSL_EBADTOL #.13)
	(GSL_ETOL #.14)
	(GSL_EUNDRFLW #.15)
	(GSL_EOVRFLW #.16)
	(GSL_ELOSS #.17)
	(GSL_EROUND #.18)
	(GSL_EBADLEN #.19)
	(GSL_ENOTSQR #.20)
	(GSL_ESING #.21)
	(GSL_EDIVERGE #.22)
	(GSL_EUNSUP #.23)
	(GSL_EUNIMPL #.24)
	(GSL_ECACHE #.25)
	(GSL_ETABLE #.26)
	(GSL_ENOPROG #.27)
	(GSL_ENOPROGJ #.28)
	(GSL_ETOLF #.29)
	(GSL_ETOLX #.30)
	(GSL_ETOLG #.31)
	(GSL_EOF #.32))

(cl:export 'GSL_SUCCESS)

(cl:export 'GSL_FAILURE)

(cl:export 'GSL_CONTINUE)

(cl:export 'GSL_EDOM)

(cl:export 'GSL_ERANGE)

(cl:export 'GSL_EFAULT)

(cl:export 'GSL_EINVAL)

(cl:export 'GSL_EFAILED)

(cl:export 'GSL_EFACTOR)

(cl:export 'GSL_ESANITY)

(cl:export 'GSL_ENOMEM)

(cl:export 'GSL_EBADFUNC)

(cl:export 'GSL_ERUNAWAY)

(cl:export 'GSL_EMAXITER)

(cl:export 'GSL_EZERODIV)

(cl:export 'GSL_EBADTOL)

(cl:export 'GSL_ETOL)

(cl:export 'GSL_EUNDRFLW)

(cl:export 'GSL_EOVRFLW)

(cl:export 'GSL_ELOSS)

(cl:export 'GSL_EROUND)

(cl:export 'GSL_EBADLEN)

(cl:export 'GSL_ENOTSQR)

(cl:export 'GSL_ESING)

(cl:export 'GSL_EDIVERGE)

(cl:export 'GSL_EUNSUP)

(cl:export 'GSL_EUNIMPL)

(cl:export 'GSL_ECACHE)

(cl:export 'GSL_ETABLE)

(cl:export 'GSL_ENOPROG)

(cl:export 'GSL_ENOPROGJ)

(cl:export 'GSL_ETOLF)

(cl:export 'GSL_ETOLX)

(cl:export 'GSL_ETOLG)

(cl:export 'GSL_EOF)

(cffi:defcfun ("gsl_error" gsl_error) :void
  (reason :string)
  (file :string)
  (line :int)
  (gsl_errno :int))

(cl:export 'gsl_error)

(cffi:defcfun ("gsl_stream_printf" gsl_stream_printf) :void
  (label :string)
  (file :string)
  (line :int)
  (reason :string))

(cl:export 'gsl_stream_printf)

(cffi:defcfun ("gsl_strerror" gsl_strerror) :string
  (gsl_errno :int))

(cl:export 'gsl_strerror)

(cffi:defcfun ("gsl_set_error_handler" gsl_set_error_handler) :pointer
  (new_handler :pointer))

(cl:export 'gsl_set_error_handler)

(cffi:defcfun ("gsl_set_error_handler_off" gsl_set_error_handler_off) :pointer)

(cl:export 'gsl_set_error_handler_off)

(cffi:defcfun ("gsl_set_stream_handler" gsl_set_stream_handler) :pointer
  (new_handler :pointer))

(cl:export 'gsl_set_stream_handler)

(cffi:defcfun ("gsl_set_stream" gsl_set_stream) :pointer
  (new_stream :pointer))

(cl:export 'gsl_set_stream)

(cffi:defcvar ("gsl_check_range" gsl_check_range)
 :int)

(cl:export 'gsl_check_range)

(cl:defconstant GSL_RANGE_CHECK 1)

(cl:export 'GSL_RANGE_CHECK)

(cffi:defcvar ("gsl_version" gsl_version)
 :string)

(cl:export 'gsl_version)

(cffi:defcfun ("gsl_message" gsl_message) :void
  (message :string)
  (file :string)
  (line :int)
  (mask :unsigned-int))

(cl:export 'gsl_message)

(cffi:defcvar ("gsl_message_mask" gsl_message_mask)
 :unsigned-int)

(cl:export 'gsl_message_mask)

(defanonenum 
	(GSL_MESSAGE_MASK_A #.1)
	(GSL_MESSAGE_MASK_B #.2)
	(GSL_MESSAGE_MASK_C #.4)
	(GSL_MESSAGE_MASK_D #.8)
	(GSL_MESSAGE_MASK_E #.16)
	(GSL_MESSAGE_MASK_F #.32)
	(GSL_MESSAGE_MASK_G #.64)
	(GSL_MESSAGE_MASK_H #.128))

(cl:export 'GSL_MESSAGE_MASK_A)

(cl:export 'GSL_MESSAGE_MASK_B)

(cl:export 'GSL_MESSAGE_MASK_C)

(cl:export 'GSL_MESSAGE_MASK_D)

(cl:export 'GSL_MESSAGE_MASK_E)

(cl:export 'GSL_MESSAGE_MASK_F)

(cl:export 'GSL_MESSAGE_MASK_G)

(cl:export 'GSL_MESSAGE_MASK_H)

(cffi:defcfun ("gsl_ran_bernoulli" gsl_ran_bernoulli) :unsigned-int
  (r :pointer)
  (p :double))

(cl:export 'gsl_ran_bernoulli)

(cffi:defcfun ("gsl_ran_bernoulli_pdf" gsl_ran_bernoulli_pdf) :double
  (k :unsigned-int)
  (p :double))

(cl:export 'gsl_ran_bernoulli_pdf)

(cffi:defcfun ("gsl_ran_beta" gsl_ran_beta) :double
  (r :pointer)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_beta)

(cffi:defcfun ("gsl_ran_beta_pdf" gsl_ran_beta_pdf) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_beta_pdf)

(cffi:defcfun ("gsl_ran_binomial" gsl_ran_binomial) :unsigned-int
  (r :pointer)
  (p :double)
  (n :unsigned-int))

(cl:export 'gsl_ran_binomial)

(cffi:defcfun ("gsl_ran_binomial_knuth" gsl_ran_binomial_knuth) :unsigned-int
  (r :pointer)
  (p :double)
  (n :unsigned-int))

(cl:export 'gsl_ran_binomial_knuth)

(cffi:defcfun ("gsl_ran_binomial_tpe" gsl_ran_binomial_tpe) :unsigned-int
  (r :pointer)
  (p :double)
  (n :unsigned-int))

(cl:export 'gsl_ran_binomial_tpe)

(cffi:defcfun ("gsl_ran_binomial_pdf" gsl_ran_binomial_pdf) :double
  (k :unsigned-int)
  (p :double)
  (n :unsigned-int))

(cl:export 'gsl_ran_binomial_pdf)

(cffi:defcfun ("gsl_ran_exponential" gsl_ran_exponential) :double
  (r :pointer)
  (mu :double))

(cl:export 'gsl_ran_exponential)

(cffi:defcfun ("gsl_ran_exponential_pdf" gsl_ran_exponential_pdf) :double
  (x :double)
  (mu :double))

(cl:export 'gsl_ran_exponential_pdf)

(cffi:defcfun ("gsl_ran_exppow" gsl_ran_exppow) :double
  (r :pointer)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_exppow)

(cffi:defcfun ("gsl_ran_exppow_pdf" gsl_ran_exppow_pdf) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_exppow_pdf)

(cffi:defcfun ("gsl_ran_cauchy" gsl_ran_cauchy) :double
  (r :pointer)
  (a :double))

(cl:export 'gsl_ran_cauchy)

(cffi:defcfun ("gsl_ran_cauchy_pdf" gsl_ran_cauchy_pdf) :double
  (x :double)
  (a :double))

(cl:export 'gsl_ran_cauchy_pdf)

(cffi:defcfun ("gsl_ran_chisq" gsl_ran_chisq) :double
  (r :pointer)
  (nu :double))

(cl:export 'gsl_ran_chisq)

(cffi:defcfun ("gsl_ran_chisq_pdf" gsl_ran_chisq_pdf) :double
  (x :double)
  (nu :double))

(cl:export 'gsl_ran_chisq_pdf)

(cffi:defcfun ("gsl_ran_dirichlet" gsl_ran_dirichlet) :void
  (r :pointer)
  (K :pointer)
  (alpha :pointer)
  (theta :pointer))

(cl:export 'gsl_ran_dirichlet)

(cffi:defcfun ("gsl_ran_dirichlet_pdf" gsl_ran_dirichlet_pdf) :double
  (K :pointer)
  (alpha :pointer)
  (theta :pointer))

(cl:export 'gsl_ran_dirichlet_pdf)

(cffi:defcfun ("gsl_ran_dirichlet_lnpdf" gsl_ran_dirichlet_lnpdf) :double
  (K :pointer)
  (alpha :pointer)
  (theta :pointer))

(cl:export 'gsl_ran_dirichlet_lnpdf)

(cffi:defcfun ("gsl_ran_erlang" gsl_ran_erlang) :double
  (r :pointer)
  (a :double)
  (n :double))

(cl:export 'gsl_ran_erlang)

(cffi:defcfun ("gsl_ran_erlang_pdf" gsl_ran_erlang_pdf) :double
  (x :double)
  (a :double)
  (n :double))

(cl:export 'gsl_ran_erlang_pdf)

(cffi:defcfun ("gsl_ran_fdist" gsl_ran_fdist) :double
  (r :pointer)
  (nu1 :double)
  (nu2 :double))

(cl:export 'gsl_ran_fdist)

(cffi:defcfun ("gsl_ran_fdist_pdf" gsl_ran_fdist_pdf) :double
  (x :double)
  (nu1 :double)
  (nu2 :double))

(cl:export 'gsl_ran_fdist_pdf)

(cffi:defcfun ("gsl_ran_flat" gsl_ran_flat) :double
  (r :pointer)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_flat)

(cffi:defcfun ("gsl_ran_flat_pdf" gsl_ran_flat_pdf) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_flat_pdf)

(cffi:defcfun ("gsl_ran_gamma" gsl_ran_gamma) :double
  (r :pointer)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_gamma)

(cffi:defcfun ("gsl_ran_gamma_int" gsl_ran_gamma_int) :double
  (r :pointer)
  (a :unsigned-int))

(cl:export 'gsl_ran_gamma_int)

(cffi:defcfun ("gsl_ran_gamma_pdf" gsl_ran_gamma_pdf) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_gamma_pdf)

(cffi:defcfun ("gsl_ran_gamma_mt" gsl_ran_gamma_mt) :double
  (r :pointer)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_gamma_mt)

(cffi:defcfun ("gsl_ran_gamma_knuth" gsl_ran_gamma_knuth) :double
  (r :pointer)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_gamma_knuth)

(cffi:defcfun ("gsl_ran_gaussian" gsl_ran_gaussian) :double
  (r :pointer)
  (sigma :double))

(cl:export 'gsl_ran_gaussian)

(cffi:defcfun ("gsl_ran_gaussian_ratio_method" gsl_ran_gaussian_ratio_method) :double
  (r :pointer)
  (sigma :double))

(cl:export 'gsl_ran_gaussian_ratio_method)

(cffi:defcfun ("gsl_ran_gaussian_ziggurat" gsl_ran_gaussian_ziggurat) :double
  (r :pointer)
  (sigma :double))

(cl:export 'gsl_ran_gaussian_ziggurat)

(cffi:defcfun ("gsl_ran_gaussian_pdf" gsl_ran_gaussian_pdf) :double
  (x :double)
  (sigma :double))

(cl:export 'gsl_ran_gaussian_pdf)

(cffi:defcfun ("gsl_ran_ugaussian" gsl_ran_ugaussian) :double
  (r :pointer))

(cl:export 'gsl_ran_ugaussian)

(cffi:defcfun ("gsl_ran_ugaussian_ratio_method" gsl_ran_ugaussian_ratio_method) :double
  (r :pointer))

(cl:export 'gsl_ran_ugaussian_ratio_method)

(cffi:defcfun ("gsl_ran_ugaussian_pdf" gsl_ran_ugaussian_pdf) :double
  (x :double))

(cl:export 'gsl_ran_ugaussian_pdf)

(cffi:defcfun ("gsl_ran_gaussian_tail" gsl_ran_gaussian_tail) :double
  (r :pointer)
  (a :double)
  (sigma :double))

(cl:export 'gsl_ran_gaussian_tail)

(cffi:defcfun ("gsl_ran_gaussian_tail_pdf" gsl_ran_gaussian_tail_pdf) :double
  (x :double)
  (a :double)
  (sigma :double))

(cl:export 'gsl_ran_gaussian_tail_pdf)

(cffi:defcfun ("gsl_ran_ugaussian_tail" gsl_ran_ugaussian_tail) :double
  (r :pointer)
  (a :double))

(cl:export 'gsl_ran_ugaussian_tail)

(cffi:defcfun ("gsl_ran_ugaussian_tail_pdf" gsl_ran_ugaussian_tail_pdf) :double
  (x :double)
  (a :double))

(cl:export 'gsl_ran_ugaussian_tail_pdf)

(cffi:defcfun ("gsl_ran_bivariate_gaussian" gsl_ran_bivariate_gaussian) :void
  (r :pointer)
  (sigma_x :double)
  (sigma_y :double)
  (rho :double)
  (x :pointer)
  (y :pointer))

(cl:export 'gsl_ran_bivariate_gaussian)

(cffi:defcfun ("gsl_ran_bivariate_gaussian_pdf" gsl_ran_bivariate_gaussian_pdf) :double
  (x :double)
  (y :double)
  (sigma_x :double)
  (sigma_y :double)
  (rho :double))

(cl:export 'gsl_ran_bivariate_gaussian_pdf)

(cffi:defcfun ("gsl_ran_landau" gsl_ran_landau) :double
  (r :pointer))

(cl:export 'gsl_ran_landau)

(cffi:defcfun ("gsl_ran_landau_pdf" gsl_ran_landau_pdf) :double
  (x :double))

(cl:export 'gsl_ran_landau_pdf)

(cffi:defcfun ("gsl_ran_geometric" gsl_ran_geometric) :unsigned-int
  (r :pointer)
  (p :double))

(cl:export 'gsl_ran_geometric)

(cffi:defcfun ("gsl_ran_geometric_pdf" gsl_ran_geometric_pdf) :double
  (k :unsigned-int)
  (p :double))

(cl:export 'gsl_ran_geometric_pdf)

(cffi:defcfun ("gsl_ran_hypergeometric" gsl_ran_hypergeometric) :unsigned-int
  (r :pointer)
  (n1 :unsigned-int)
  (n2 :unsigned-int)
  (t_arg3 :unsigned-int))

(cl:export 'gsl_ran_hypergeometric)

(cffi:defcfun ("gsl_ran_hypergeometric_pdf" gsl_ran_hypergeometric_pdf) :double
  (k :unsigned-int)
  (n1 :unsigned-int)
  (n2 :unsigned-int)
  (t_arg3 :unsigned-int))

(cl:export 'gsl_ran_hypergeometric_pdf)

(cffi:defcfun ("gsl_ran_gumbel1" gsl_ran_gumbel1) :double
  (r :pointer)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_gumbel1)

(cffi:defcfun ("gsl_ran_gumbel1_pdf" gsl_ran_gumbel1_pdf) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_gumbel1_pdf)

(cffi:defcfun ("gsl_ran_gumbel2" gsl_ran_gumbel2) :double
  (r :pointer)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_gumbel2)

(cffi:defcfun ("gsl_ran_gumbel2_pdf" gsl_ran_gumbel2_pdf) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_gumbel2_pdf)

(cffi:defcfun ("gsl_ran_logistic" gsl_ran_logistic) :double
  (r :pointer)
  (a :double))

(cl:export 'gsl_ran_logistic)

(cffi:defcfun ("gsl_ran_logistic_pdf" gsl_ran_logistic_pdf) :double
  (x :double)
  (a :double))

(cl:export 'gsl_ran_logistic_pdf)

(cffi:defcfun ("gsl_ran_lognormal" gsl_ran_lognormal) :double
  (r :pointer)
  (zeta :double)
  (sigma :double))

(cl:export 'gsl_ran_lognormal)

(cffi:defcfun ("gsl_ran_lognormal_pdf" gsl_ran_lognormal_pdf) :double
  (x :double)
  (zeta :double)
  (sigma :double))

(cl:export 'gsl_ran_lognormal_pdf)

(cffi:defcfun ("gsl_ran_logarithmic" gsl_ran_logarithmic) :unsigned-int
  (r :pointer)
  (p :double))

(cl:export 'gsl_ran_logarithmic)

(cffi:defcfun ("gsl_ran_logarithmic_pdf" gsl_ran_logarithmic_pdf) :double
  (k :unsigned-int)
  (p :double))

(cl:export 'gsl_ran_logarithmic_pdf)

(cffi:defcfun ("gsl_ran_multinomial" gsl_ran_multinomial) :void
  (r :pointer)
  (K :pointer)
  (NN :unsigned-int)
  (p :pointer)
  (n :pointer))

(cl:export 'gsl_ran_multinomial)

(cffi:defcfun ("gsl_ran_multinomial_pdf" gsl_ran_multinomial_pdf) :double
  (K :pointer)
  (p :pointer)
  (n :pointer))

(cl:export 'gsl_ran_multinomial_pdf)

(cffi:defcfun ("gsl_ran_multinomial_lnpdf" gsl_ran_multinomial_lnpdf) :double
  (K :pointer)
  (p :pointer)
  (n :pointer))

(cl:export 'gsl_ran_multinomial_lnpdf)

(cffi:defcfun ("gsl_ran_negative_binomial" gsl_ran_negative_binomial) :unsigned-int
  (r :pointer)
  (p :double)
  (n :double))

(cl:export 'gsl_ran_negative_binomial)

(cffi:defcfun ("gsl_ran_negative_binomial_pdf" gsl_ran_negative_binomial_pdf) :double
  (k :unsigned-int)
  (p :double)
  (n :double))

(cl:export 'gsl_ran_negative_binomial_pdf)

(cffi:defcfun ("gsl_ran_pascal" gsl_ran_pascal) :unsigned-int
  (r :pointer)
  (p :double)
  (n :unsigned-int))

(cl:export 'gsl_ran_pascal)

(cffi:defcfun ("gsl_ran_pascal_pdf" gsl_ran_pascal_pdf) :double
  (k :unsigned-int)
  (p :double)
  (n :unsigned-int))

(cl:export 'gsl_ran_pascal_pdf)

(cffi:defcfun ("gsl_ran_pareto" gsl_ran_pareto) :double
  (r :pointer)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_pareto)

(cffi:defcfun ("gsl_ran_pareto_pdf" gsl_ran_pareto_pdf) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_pareto_pdf)

(cffi:defcfun ("gsl_ran_poisson" gsl_ran_poisson) :unsigned-int
  (r :pointer)
  (mu :double))

(cl:export 'gsl_ran_poisson)

(cffi:defcfun ("gsl_ran_poisson_array" gsl_ran_poisson_array) :void
  (r :pointer)
  (n :pointer)
  (array :pointer)
  (mu :double))

(cl:export 'gsl_ran_poisson_array)

(cffi:defcfun ("gsl_ran_poisson_pdf" gsl_ran_poisson_pdf) :double
  (k :unsigned-int)
  (mu :double))

(cl:export 'gsl_ran_poisson_pdf)

(cffi:defcfun ("gsl_ran_rayleigh" gsl_ran_rayleigh) :double
  (r :pointer)
  (sigma :double))

(cl:export 'gsl_ran_rayleigh)

(cffi:defcfun ("gsl_ran_rayleigh_pdf" gsl_ran_rayleigh_pdf) :double
  (x :double)
  (sigma :double))

(cl:export 'gsl_ran_rayleigh_pdf)

(cffi:defcfun ("gsl_ran_rayleigh_tail" gsl_ran_rayleigh_tail) :double
  (r :pointer)
  (a :double)
  (sigma :double))

(cl:export 'gsl_ran_rayleigh_tail)

(cffi:defcfun ("gsl_ran_rayleigh_tail_pdf" gsl_ran_rayleigh_tail_pdf) :double
  (x :double)
  (a :double)
  (sigma :double))

(cl:export 'gsl_ran_rayleigh_tail_pdf)

(cffi:defcfun ("gsl_ran_tdist" gsl_ran_tdist) :double
  (r :pointer)
  (nu :double))

(cl:export 'gsl_ran_tdist)

(cffi:defcfun ("gsl_ran_tdist_pdf" gsl_ran_tdist_pdf) :double
  (x :double)
  (nu :double))

(cl:export 'gsl_ran_tdist_pdf)

(cffi:defcfun ("gsl_ran_laplace" gsl_ran_laplace) :double
  (r :pointer)
  (a :double))

(cl:export 'gsl_ran_laplace)

(cffi:defcfun ("gsl_ran_laplace_pdf" gsl_ran_laplace_pdf) :double
  (x :double)
  (a :double))

(cl:export 'gsl_ran_laplace_pdf)

(cffi:defcfun ("gsl_ran_levy" gsl_ran_levy) :double
  (r :pointer)
  (c :double)
  (alpha :double))

(cl:export 'gsl_ran_levy)

(cffi:defcfun ("gsl_ran_levy_skew" gsl_ran_levy_skew) :double
  (r :pointer)
  (c :double)
  (alpha :double)
  (beta :double))

(cl:export 'gsl_ran_levy_skew)

(cffi:defcfun ("gsl_ran_weibull" gsl_ran_weibull) :double
  (r :pointer)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_weibull)

(cffi:defcfun ("gsl_ran_weibull_pdf" gsl_ran_weibull_pdf) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_ran_weibull_pdf)

(cffi:defcfun ("gsl_ran_dir_2d" gsl_ran_dir_2d) :void
  (r :pointer)
  (x :pointer)
  (y :pointer))

(cl:export 'gsl_ran_dir_2d)

(cffi:defcfun ("gsl_ran_dir_2d_trig_method" gsl_ran_dir_2d_trig_method) :void
  (r :pointer)
  (x :pointer)
  (y :pointer))

(cl:export 'gsl_ran_dir_2d_trig_method)

(cffi:defcfun ("gsl_ran_dir_3d" gsl_ran_dir_3d) :void
  (r :pointer)
  (x :pointer)
  (y :pointer)
  (z :pointer))

(cl:export 'gsl_ran_dir_3d)

(cffi:defcfun ("gsl_ran_dir_nd" gsl_ran_dir_nd) :void
  (r :pointer)
  (n :pointer)
  (x :pointer))

(cl:export 'gsl_ran_dir_nd)

(cffi:defcfun ("gsl_ran_shuffle" gsl_ran_shuffle) :void
  (r :pointer)
  (base :pointer)
  (nmembm :pointer)
  (size :pointer))

(cl:export 'gsl_ran_shuffle)

(cffi:defcfun ("gsl_ran_choose" gsl_ran_choose) :int
  (r :pointer)
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (n :pointer)
  (size :pointer))

(cl:export 'gsl_ran_choose)

(cffi:defcfun ("gsl_ran_sample" gsl_ran_sample) :void
  (r :pointer)
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (n :pointer)
  (size :pointer))

(cl:export 'gsl_ran_sample)

(cffi:defcstruct gsl_ran_discrete_t
	(K :pointer)
	(A :pointer)
	(F :pointer))

(cl:export 'gsl_ran_discrete_t)

(cl:export 'K)

(cl:export 'A)

(cl:export 'F)

(cffi:defcfun ("gsl_ran_discrete_preproc" gsl_ran_discrete_preproc) :pointer
  (K :pointer)
  (P :pointer))

(cl:export 'gsl_ran_discrete_preproc)

(cffi:defcfun ("gsl_ran_discrete_free" gsl_ran_discrete_free) :void
  (g :pointer))

(cl:export 'gsl_ran_discrete_free)

(cffi:defcfun ("gsl_ran_discrete" gsl_ran_discrete) :pointer
  (r :pointer)
  (g :pointer))

(cl:export 'gsl_ran_discrete)

(cffi:defcfun ("gsl_ran_discrete_pdf" gsl_ran_discrete_pdf) :double
  (k :pointer)
  (g :pointer))

(cl:export 'gsl_ran_discrete_pdf)

(cffi:defcstruct gsl_multiroot_function_struct
	(f :pointer)
	(n :pointer)
	(params :pointer))

(cl:export 'gsl_multiroot_function_struct)

(cl:export 'f)

(cl:export 'n)

(cl:export 'params)

(cffi:defcfun ("gsl_multiroot_fdjacobian" gsl_multiroot_fdjacobian) :int
  (FF :pointer)
  (x :pointer)
  (f :pointer)
  (epsrel :double)
  (jacobian :pointer))

(cl:export 'gsl_multiroot_fdjacobian)

(cffi:defcstruct gsl_multiroot_fsolver_type
	(name :string)
	(size :pointer)
	(alloc :pointer)
	(set :pointer)
	(iterate :pointer)
	(free :pointer))

(cl:export 'gsl_multiroot_fsolver_type)

(cl:export 'name)

(cl:export 'size)

(cl:export 'alloc)

(cl:export 'set)

(cl:export 'iterate)

(cl:export 'free)

(cffi:defcstruct gsl_multiroot_fsolver
	(type :pointer)
	(function :pointer)
	(x :pointer)
	(f :pointer)
	(dx :pointer)
	(state :pointer))

(cl:export 'gsl_multiroot_fsolver)

(cl:export 'type)

(cl:export 'function)

(cl:export 'x)

(cl:export 'f)

(cl:export 'dx)

(cl:export 'state)

(cffi:defcfun ("gsl_multiroot_fsolver_alloc" gsl_multiroot_fsolver_alloc) :pointer
  (t_arg0 :pointer)
  (n :pointer))

(cl:export 'gsl_multiroot_fsolver_alloc)

(cffi:defcfun ("gsl_multiroot_fsolver_free" gsl_multiroot_fsolver_free) :void
  (s :pointer))

(cl:export 'gsl_multiroot_fsolver_free)

(cffi:defcfun ("gsl_multiroot_fsolver_set" gsl_multiroot_fsolver_set) :int
  (s :pointer)
  (f :pointer)
  (x :pointer))

(cl:export 'gsl_multiroot_fsolver_set)

(cffi:defcfun ("gsl_multiroot_fsolver_iterate" gsl_multiroot_fsolver_iterate) :int
  (s :pointer))

(cl:export 'gsl_multiroot_fsolver_iterate)

(cffi:defcfun ("gsl_multiroot_fsolver_name" gsl_multiroot_fsolver_name) :string
  (s :pointer))

(cl:export 'gsl_multiroot_fsolver_name)

(cffi:defcfun ("gsl_multiroot_fsolver_root" gsl_multiroot_fsolver_root) :pointer
  (s :pointer))

(cl:export 'gsl_multiroot_fsolver_root)

(cffi:defcfun ("gsl_multiroot_fsolver_dx" gsl_multiroot_fsolver_dx) :pointer
  (s :pointer))

(cl:export 'gsl_multiroot_fsolver_dx)

(cffi:defcfun ("gsl_multiroot_fsolver_f" gsl_multiroot_fsolver_f) :pointer
  (s :pointer))

(cl:export 'gsl_multiroot_fsolver_f)

(cffi:defcstruct gsl_multiroot_function_fdf_struct
	(f :pointer)
	(df :pointer)
	(fdf :pointer)
	(n :pointer)
	(params :pointer))

(cl:export 'gsl_multiroot_function_fdf_struct)

(cl:export 'f)

(cl:export 'df)

(cl:export 'fdf)

(cl:export 'n)

(cl:export 'params)

(cffi:defcstruct gsl_multiroot_fdfsolver_type
	(name :string)
	(size :pointer)
	(alloc :pointer)
	(set :pointer)
	(iterate :pointer)
	(free :pointer))

(cl:export 'gsl_multiroot_fdfsolver_type)

(cl:export 'name)

(cl:export 'size)

(cl:export 'alloc)

(cl:export 'set)

(cl:export 'iterate)

(cl:export 'free)

(cffi:defcstruct gsl_multiroot_fdfsolver
	(type :pointer)
	(fdf :pointer)
	(x :pointer)
	(f :pointer)
	(J :pointer)
	(dx :pointer)
	(state :pointer))

(cl:export 'gsl_multiroot_fdfsolver)

(cl:export 'type)

(cl:export 'fdf)

(cl:export 'x)

(cl:export 'f)

(cl:export 'J)

(cl:export 'dx)

(cl:export 'state)

(cffi:defcfun ("gsl_multiroot_fdfsolver_alloc" gsl_multiroot_fdfsolver_alloc) :pointer
  (t_arg0 :pointer)
  (n :pointer))

(cl:export 'gsl_multiroot_fdfsolver_alloc)

(cffi:defcfun ("gsl_multiroot_fdfsolver_set" gsl_multiroot_fdfsolver_set) :int
  (s :pointer)
  (fdf :pointer)
  (x :pointer))

(cl:export 'gsl_multiroot_fdfsolver_set)

(cffi:defcfun ("gsl_multiroot_fdfsolver_iterate" gsl_multiroot_fdfsolver_iterate) :int
  (s :pointer))

(cl:export 'gsl_multiroot_fdfsolver_iterate)

(cffi:defcfun ("gsl_multiroot_fdfsolver_free" gsl_multiroot_fdfsolver_free) :void
  (s :pointer))

(cl:export 'gsl_multiroot_fdfsolver_free)

(cffi:defcfun ("gsl_multiroot_fdfsolver_name" gsl_multiroot_fdfsolver_name) :string
  (s :pointer))

(cl:export 'gsl_multiroot_fdfsolver_name)

(cffi:defcfun ("gsl_multiroot_fdfsolver_root" gsl_multiroot_fdfsolver_root) :pointer
  (s :pointer))

(cl:export 'gsl_multiroot_fdfsolver_root)

(cffi:defcfun ("gsl_multiroot_fdfsolver_dx" gsl_multiroot_fdfsolver_dx) :pointer
  (s :pointer))

(cl:export 'gsl_multiroot_fdfsolver_dx)

(cffi:defcfun ("gsl_multiroot_fdfsolver_f" gsl_multiroot_fdfsolver_f) :pointer
  (s :pointer))

(cl:export 'gsl_multiroot_fdfsolver_f)

(cffi:defcfun ("gsl_multiroot_test_delta" gsl_multiroot_test_delta) :int
  (dx :pointer)
  (x :pointer)
  (epsabs :double)
  (epsrel :double))

(cl:export 'gsl_multiroot_test_delta)

(cffi:defcfun ("gsl_multiroot_test_residual" gsl_multiroot_test_residual) :int
  (f :pointer)
  (epsabs :double))

(cl:export 'gsl_multiroot_test_residual)

(cffi:defcvar ("gsl_multiroot_fsolver_dnewton" gsl_multiroot_fsolver_dnewton)
 :pointer)

(cl:export 'gsl_multiroot_fsolver_dnewton)

(cffi:defcvar ("gsl_multiroot_fsolver_broyden" gsl_multiroot_fsolver_broyden)
 :pointer)

(cl:export 'gsl_multiroot_fsolver_broyden)

(cffi:defcvar ("gsl_multiroot_fsolver_hybrid" gsl_multiroot_fsolver_hybrid)
 :pointer)

(cl:export 'gsl_multiroot_fsolver_hybrid)

(cffi:defcvar ("gsl_multiroot_fsolver_hybrids" gsl_multiroot_fsolver_hybrids)
 :pointer)

(cl:export 'gsl_multiroot_fsolver_hybrids)

(cffi:defcvar ("gsl_multiroot_fdfsolver_newton" gsl_multiroot_fdfsolver_newton)
 :pointer)

(cl:export 'gsl_multiroot_fdfsolver_newton)

(cffi:defcvar ("gsl_multiroot_fdfsolver_gnewton" gsl_multiroot_fdfsolver_gnewton)
 :pointer)

(cl:export 'gsl_multiroot_fdfsolver_gnewton)

(cffi:defcvar ("gsl_multiroot_fdfsolver_hybridj" gsl_multiroot_fdfsolver_hybridj)
 :pointer)

(cl:export 'gsl_multiroot_fdfsolver_hybridj)

(cffi:defcvar ("gsl_multiroot_fdfsolver_hybridsj" gsl_multiroot_fdfsolver_hybridsj)
 :pointer)

(cl:export 'gsl_multiroot_fdfsolver_hybridsj)

(cffi:defcfun ("gsl_blas_sdsdot" gsl_blas_sdsdot) :int
  (alpha :float)
  (X :pointer)
  (Y :pointer)
  (result :pointer))

(cl:export 'gsl_blas_sdsdot)

(cffi:defcfun ("gsl_blas_dsdot" gsl_blas_dsdot) :int
  (X :pointer)
  (Y :pointer)
  (result :pointer))

(cl:export 'gsl_blas_dsdot)

(cffi:defcfun ("gsl_blas_sdot" gsl_blas_sdot) :int
  (X :pointer)
  (Y :pointer)
  (result :pointer))

(cl:export 'gsl_blas_sdot)

(cffi:defcfun ("gsl_blas_ddot" gsl_blas_ddot) :int
  (X :pointer)
  (Y :pointer)
  (result :pointer))

(cl:export 'gsl_blas_ddot)

(cffi:defcfun ("gsl_blas_cdotu" gsl_blas_cdotu) :int
  (X :pointer)
  (Y :pointer)
  (dotu :pointer))

(cl:export 'gsl_blas_cdotu)

(cffi:defcfun ("gsl_blas_cdotc" gsl_blas_cdotc) :int
  (X :pointer)
  (Y :pointer)
  (dotc :pointer))

(cl:export 'gsl_blas_cdotc)

(cffi:defcfun ("gsl_blas_zdotu" gsl_blas_zdotu) :int
  (X :pointer)
  (Y :pointer)
  (dotu :pointer))

(cl:export 'gsl_blas_zdotu)

(cffi:defcfun ("gsl_blas_zdotc" gsl_blas_zdotc) :int
  (X :pointer)
  (Y :pointer)
  (dotc :pointer))

(cl:export 'gsl_blas_zdotc)

(cffi:defcfun ("gsl_blas_snrm2" gsl_blas_snrm2) :float
  (X :pointer))

(cl:export 'gsl_blas_snrm2)

(cffi:defcfun ("gsl_blas_sasum" gsl_blas_sasum) :float
  (X :pointer))

(cl:export 'gsl_blas_sasum)

(cffi:defcfun ("gsl_blas_dnrm2" gsl_blas_dnrm2) :double
  (X :pointer))

(cl:export 'gsl_blas_dnrm2)

(cffi:defcfun ("gsl_blas_dasum" gsl_blas_dasum) :double
  (X :pointer))

(cl:export 'gsl_blas_dasum)

(cffi:defcfun ("gsl_blas_scnrm2" gsl_blas_scnrm2) :float
  (X :pointer))

(cl:export 'gsl_blas_scnrm2)

(cffi:defcfun ("gsl_blas_scasum" gsl_blas_scasum) :float
  (X :pointer))

(cl:export 'gsl_blas_scasum)

(cffi:defcfun ("gsl_blas_dznrm2" gsl_blas_dznrm2) :double
  (X :pointer))

(cl:export 'gsl_blas_dznrm2)

(cffi:defcfun ("gsl_blas_dzasum" gsl_blas_dzasum) :double
  (X :pointer))

(cl:export 'gsl_blas_dzasum)

(cffi:defcfun ("gsl_blas_isamax" gsl_blas_isamax) :pointer
  (X :pointer))

(cl:export 'gsl_blas_isamax)

(cffi:defcfun ("gsl_blas_idamax" gsl_blas_idamax) :pointer
  (X :pointer))

(cl:export 'gsl_blas_idamax)

(cffi:defcfun ("gsl_blas_icamax" gsl_blas_icamax) :pointer
  (X :pointer))

(cl:export 'gsl_blas_icamax)

(cffi:defcfun ("gsl_blas_izamax" gsl_blas_izamax) :pointer
  (X :pointer))

(cl:export 'gsl_blas_izamax)

(cffi:defcfun ("gsl_blas_sswap" gsl_blas_sswap) :int
  (X :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_sswap)

(cffi:defcfun ("gsl_blas_scopy" gsl_blas_scopy) :int
  (X :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_scopy)

(cffi:defcfun ("gsl_blas_saxpy" gsl_blas_saxpy) :int
  (alpha :float)
  (X :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_saxpy)

(cffi:defcfun ("gsl_blas_dswap" gsl_blas_dswap) :int
  (X :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_dswap)

(cffi:defcfun ("gsl_blas_dcopy" gsl_blas_dcopy) :int
  (X :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_dcopy)

(cffi:defcfun ("gsl_blas_daxpy" gsl_blas_daxpy) :int
  (alpha :double)
  (X :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_daxpy)

(cffi:defcfun ("gsl_blas_cswap" gsl_blas_cswap) :int
  (X :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_cswap)

(cffi:defcfun ("gsl_blas_ccopy" gsl_blas_ccopy) :int
  (X :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_ccopy)

(cffi:defcfun ("gsl_blas_caxpy" gsl_blas_caxpy) :int
  (alpha :pointer)
  (X :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_caxpy)

(cffi:defcfun ("gsl_blas_zswap" gsl_blas_zswap) :int
  (X :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_zswap)

(cffi:defcfun ("gsl_blas_zcopy" gsl_blas_zcopy) :int
  (X :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_zcopy)

(cffi:defcfun ("gsl_blas_zaxpy" gsl_blas_zaxpy) :int
  (alpha :pointer)
  (X :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_zaxpy)

(cffi:defcfun ("gsl_blas_srotg" gsl_blas_srotg) :int
  (a :pointer)
  (b :pointer)
  (c :pointer)
  (s :pointer))

(cl:export 'gsl_blas_srotg)

(cffi:defcfun ("gsl_blas_srotmg" gsl_blas_srotmg) :int
  (d1 :pointer)
  (d2 :pointer)
  (b1 :pointer)
  (b2 :float)
  (P :pointer))

(cl:export 'gsl_blas_srotmg)

(cffi:defcfun ("gsl_blas_srot" gsl_blas_srot) :int
  (X :pointer)
  (Y :pointer)
  (c :float)
  (s :float))

(cl:export 'gsl_blas_srot)

(cffi:defcfun ("gsl_blas_srotm" gsl_blas_srotm) :int
  (X :pointer)
  (Y :pointer)
  (P :pointer))

(cl:export 'gsl_blas_srotm)

(cffi:defcfun ("gsl_blas_drotg" gsl_blas_drotg) :int
  (a :pointer)
  (b :pointer)
  (c :pointer)
  (s :pointer))

(cl:export 'gsl_blas_drotg)

(cffi:defcfun ("gsl_blas_drotmg" gsl_blas_drotmg) :int
  (d1 :pointer)
  (d2 :pointer)
  (b1 :pointer)
  (b2 :double)
  (P :pointer))

(cl:export 'gsl_blas_drotmg)

(cffi:defcfun ("gsl_blas_drot" gsl_blas_drot) :int
  (X :pointer)
  (Y :pointer)
  (c :double)
  (s :double))

(cl:export 'gsl_blas_drot)

(cffi:defcfun ("gsl_blas_drotm" gsl_blas_drotm) :int
  (X :pointer)
  (Y :pointer)
  (P :pointer))

(cl:export 'gsl_blas_drotm)

(cffi:defcfun ("gsl_blas_sscal" gsl_blas_sscal) :void
  (alpha :float)
  (X :pointer))

(cl:export 'gsl_blas_sscal)

(cffi:defcfun ("gsl_blas_dscal" gsl_blas_dscal) :void
  (alpha :double)
  (X :pointer))

(cl:export 'gsl_blas_dscal)

(cffi:defcfun ("gsl_blas_cscal" gsl_blas_cscal) :void
  (alpha :pointer)
  (X :pointer))

(cl:export 'gsl_blas_cscal)

(cffi:defcfun ("gsl_blas_zscal" gsl_blas_zscal) :void
  (alpha :pointer)
  (X :pointer))

(cl:export 'gsl_blas_zscal)

(cffi:defcfun ("gsl_blas_csscal" gsl_blas_csscal) :void
  (alpha :float)
  (X :pointer))

(cl:export 'gsl_blas_csscal)

(cffi:defcfun ("gsl_blas_zdscal" gsl_blas_zdscal) :void
  (alpha :double)
  (X :pointer))

(cl:export 'gsl_blas_zdscal)

(cffi:defcfun ("gsl_blas_sgemv" gsl_blas_sgemv) :int
  (TransA :pointer)
  (alpha :float)
  (A :pointer)
  (X :pointer)
  (beta :float)
  (Y :pointer))

(cl:export 'gsl_blas_sgemv)

(cffi:defcfun ("gsl_blas_strmv" gsl_blas_strmv) :int
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (A :pointer)
  (X :pointer))

(cl:export 'gsl_blas_strmv)

(cffi:defcfun ("gsl_blas_strsv" gsl_blas_strsv) :int
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (A :pointer)
  (X :pointer))

(cl:export 'gsl_blas_strsv)

(cffi:defcfun ("gsl_blas_dgemv" gsl_blas_dgemv) :int
  (TransA :pointer)
  (alpha :double)
  (A :pointer)
  (X :pointer)
  (beta :double)
  (Y :pointer))

(cl:export 'gsl_blas_dgemv)

(cffi:defcfun ("gsl_blas_dtrmv" gsl_blas_dtrmv) :int
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (A :pointer)
  (X :pointer))

(cl:export 'gsl_blas_dtrmv)

(cffi:defcfun ("gsl_blas_dtrsv" gsl_blas_dtrsv) :int
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (A :pointer)
  (X :pointer))

(cl:export 'gsl_blas_dtrsv)

(cffi:defcfun ("gsl_blas_cgemv" gsl_blas_cgemv) :int
  (TransA :pointer)
  (alpha :pointer)
  (A :pointer)
  (X :pointer)
  (beta :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_cgemv)

(cffi:defcfun ("gsl_blas_ctrmv" gsl_blas_ctrmv) :int
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (A :pointer)
  (X :pointer))

(cl:export 'gsl_blas_ctrmv)

(cffi:defcfun ("gsl_blas_ctrsv" gsl_blas_ctrsv) :int
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (A :pointer)
  (X :pointer))

(cl:export 'gsl_blas_ctrsv)

(cffi:defcfun ("gsl_blas_zgemv" gsl_blas_zgemv) :int
  (TransA :pointer)
  (alpha :pointer)
  (A :pointer)
  (X :pointer)
  (beta :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_zgemv)

(cffi:defcfun ("gsl_blas_ztrmv" gsl_blas_ztrmv) :int
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (A :pointer)
  (X :pointer))

(cl:export 'gsl_blas_ztrmv)

(cffi:defcfun ("gsl_blas_ztrsv" gsl_blas_ztrsv) :int
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (A :pointer)
  (X :pointer))

(cl:export 'gsl_blas_ztrsv)

(cffi:defcfun ("gsl_blas_ssymv" gsl_blas_ssymv) :int
  (Uplo :pointer)
  (alpha :float)
  (A :pointer)
  (X :pointer)
  (beta :float)
  (Y :pointer))

(cl:export 'gsl_blas_ssymv)

(cffi:defcfun ("gsl_blas_sger" gsl_blas_sger) :int
  (alpha :float)
  (X :pointer)
  (Y :pointer)
  (A :pointer))

(cl:export 'gsl_blas_sger)

(cffi:defcfun ("gsl_blas_ssyr" gsl_blas_ssyr) :int
  (Uplo :pointer)
  (alpha :float)
  (X :pointer)
  (A :pointer))

(cl:export 'gsl_blas_ssyr)

(cffi:defcfun ("gsl_blas_ssyr2" gsl_blas_ssyr2) :int
  (Uplo :pointer)
  (alpha :float)
  (X :pointer)
  (Y :pointer)
  (A :pointer))

(cl:export 'gsl_blas_ssyr2)

(cffi:defcfun ("gsl_blas_dsymv" gsl_blas_dsymv) :int
  (Uplo :pointer)
  (alpha :double)
  (A :pointer)
  (X :pointer)
  (beta :double)
  (Y :pointer))

(cl:export 'gsl_blas_dsymv)

(cffi:defcfun ("gsl_blas_dger" gsl_blas_dger) :int
  (alpha :double)
  (X :pointer)
  (Y :pointer)
  (A :pointer))

(cl:export 'gsl_blas_dger)

(cffi:defcfun ("gsl_blas_dsyr" gsl_blas_dsyr) :int
  (Uplo :pointer)
  (alpha :double)
  (X :pointer)
  (A :pointer))

(cl:export 'gsl_blas_dsyr)

(cffi:defcfun ("gsl_blas_dsyr2" gsl_blas_dsyr2) :int
  (Uplo :pointer)
  (alpha :double)
  (X :pointer)
  (Y :pointer)
  (A :pointer))

(cl:export 'gsl_blas_dsyr2)

(cffi:defcfun ("gsl_blas_chemv" gsl_blas_chemv) :int
  (Uplo :pointer)
  (alpha :pointer)
  (A :pointer)
  (X :pointer)
  (beta :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_chemv)

(cffi:defcfun ("gsl_blas_cgeru" gsl_blas_cgeru) :int
  (alpha :pointer)
  (X :pointer)
  (Y :pointer)
  (A :pointer))

(cl:export 'gsl_blas_cgeru)

(cffi:defcfun ("gsl_blas_cgerc" gsl_blas_cgerc) :int
  (alpha :pointer)
  (X :pointer)
  (Y :pointer)
  (A :pointer))

(cl:export 'gsl_blas_cgerc)

(cffi:defcfun ("gsl_blas_cher" gsl_blas_cher) :int
  (Uplo :pointer)
  (alpha :float)
  (X :pointer)
  (A :pointer))

(cl:export 'gsl_blas_cher)

(cffi:defcfun ("gsl_blas_cher2" gsl_blas_cher2) :int
  (Uplo :pointer)
  (alpha :pointer)
  (X :pointer)
  (Y :pointer)
  (A :pointer))

(cl:export 'gsl_blas_cher2)

(cffi:defcfun ("gsl_blas_zhemv" gsl_blas_zhemv) :int
  (Uplo :pointer)
  (alpha :pointer)
  (A :pointer)
  (X :pointer)
  (beta :pointer)
  (Y :pointer))

(cl:export 'gsl_blas_zhemv)

(cffi:defcfun ("gsl_blas_zgeru" gsl_blas_zgeru) :int
  (alpha :pointer)
  (X :pointer)
  (Y :pointer)
  (A :pointer))

(cl:export 'gsl_blas_zgeru)

(cffi:defcfun ("gsl_blas_zgerc" gsl_blas_zgerc) :int
  (alpha :pointer)
  (X :pointer)
  (Y :pointer)
  (A :pointer))

(cl:export 'gsl_blas_zgerc)

(cffi:defcfun ("gsl_blas_zher" gsl_blas_zher) :int
  (Uplo :pointer)
  (alpha :double)
  (X :pointer)
  (A :pointer))

(cl:export 'gsl_blas_zher)

(cffi:defcfun ("gsl_blas_zher2" gsl_blas_zher2) :int
  (Uplo :pointer)
  (alpha :pointer)
  (X :pointer)
  (Y :pointer)
  (A :pointer))

(cl:export 'gsl_blas_zher2)

(cffi:defcfun ("gsl_blas_sgemm" gsl_blas_sgemm) :int
  (TransA :pointer)
  (TransB :pointer)
  (alpha :float)
  (A :pointer)
  (B :pointer)
  (beta :float)
  (C :pointer))

(cl:export 'gsl_blas_sgemm)

(cffi:defcfun ("gsl_blas_ssymm" gsl_blas_ssymm) :int
  (Side :pointer)
  (Uplo :pointer)
  (alpha :float)
  (A :pointer)
  (B :pointer)
  (beta :float)
  (C :pointer))

(cl:export 'gsl_blas_ssymm)

(cffi:defcfun ("gsl_blas_ssyrk" gsl_blas_ssyrk) :int
  (Uplo :pointer)
  (Trans :pointer)
  (alpha :float)
  (A :pointer)
  (beta :float)
  (C :pointer))

(cl:export 'gsl_blas_ssyrk)

(cffi:defcfun ("gsl_blas_ssyr2k" gsl_blas_ssyr2k) :int
  (Uplo :pointer)
  (Trans :pointer)
  (alpha :float)
  (A :pointer)
  (B :pointer)
  (beta :float)
  (C :pointer))

(cl:export 'gsl_blas_ssyr2k)

(cffi:defcfun ("gsl_blas_strmm" gsl_blas_strmm) :int
  (Side :pointer)
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (alpha :float)
  (A :pointer)
  (B :pointer))

(cl:export 'gsl_blas_strmm)

(cffi:defcfun ("gsl_blas_strsm" gsl_blas_strsm) :int
  (Side :pointer)
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (alpha :float)
  (A :pointer)
  (B :pointer))

(cl:export 'gsl_blas_strsm)

(cffi:defcfun ("gsl_blas_dgemm" gsl_blas_dgemm) :int
  (TransA :pointer)
  (TransB :pointer)
  (alpha :double)
  (A :pointer)
  (B :pointer)
  (beta :double)
  (C :pointer))

(cl:export 'gsl_blas_dgemm)

(cffi:defcfun ("gsl_blas_dsymm" gsl_blas_dsymm) :int
  (Side :pointer)
  (Uplo :pointer)
  (alpha :double)
  (A :pointer)
  (B :pointer)
  (beta :double)
  (C :pointer))

(cl:export 'gsl_blas_dsymm)

(cffi:defcfun ("gsl_blas_dsyrk" gsl_blas_dsyrk) :int
  (Uplo :pointer)
  (Trans :pointer)
  (alpha :double)
  (A :pointer)
  (beta :double)
  (C :pointer))

(cl:export 'gsl_blas_dsyrk)

(cffi:defcfun ("gsl_blas_dsyr2k" gsl_blas_dsyr2k) :int
  (Uplo :pointer)
  (Trans :pointer)
  (alpha :double)
  (A :pointer)
  (B :pointer)
  (beta :double)
  (C :pointer))

(cl:export 'gsl_blas_dsyr2k)

(cffi:defcfun ("gsl_blas_dtrmm" gsl_blas_dtrmm) :int
  (Side :pointer)
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (alpha :double)
  (A :pointer)
  (B :pointer))

(cl:export 'gsl_blas_dtrmm)

(cffi:defcfun ("gsl_blas_dtrsm" gsl_blas_dtrsm) :int
  (Side :pointer)
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (alpha :double)
  (A :pointer)
  (B :pointer))

(cl:export 'gsl_blas_dtrsm)

(cffi:defcfun ("gsl_blas_cgemm" gsl_blas_cgemm) :int
  (TransA :pointer)
  (TransB :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer)
  (beta :pointer)
  (C :pointer))

(cl:export 'gsl_blas_cgemm)

(cffi:defcfun ("gsl_blas_csymm" gsl_blas_csymm) :int
  (Side :pointer)
  (Uplo :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer)
  (beta :pointer)
  (C :pointer))

(cl:export 'gsl_blas_csymm)

(cffi:defcfun ("gsl_blas_csyrk" gsl_blas_csyrk) :int
  (Uplo :pointer)
  (Trans :pointer)
  (alpha :pointer)
  (A :pointer)
  (beta :pointer)
  (C :pointer))

(cl:export 'gsl_blas_csyrk)

(cffi:defcfun ("gsl_blas_csyr2k" gsl_blas_csyr2k) :int
  (Uplo :pointer)
  (Trans :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer)
  (beta :pointer)
  (C :pointer))

(cl:export 'gsl_blas_csyr2k)

(cffi:defcfun ("gsl_blas_ctrmm" gsl_blas_ctrmm) :int
  (Side :pointer)
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer))

(cl:export 'gsl_blas_ctrmm)

(cffi:defcfun ("gsl_blas_ctrsm" gsl_blas_ctrsm) :int
  (Side :pointer)
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer))

(cl:export 'gsl_blas_ctrsm)

(cffi:defcfun ("gsl_blas_zgemm" gsl_blas_zgemm) :int
  (TransA :pointer)
  (TransB :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer)
  (beta :pointer)
  (C :pointer))

(cl:export 'gsl_blas_zgemm)

(cffi:defcfun ("gsl_blas_zsymm" gsl_blas_zsymm) :int
  (Side :pointer)
  (Uplo :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer)
  (beta :pointer)
  (C :pointer))

(cl:export 'gsl_blas_zsymm)

(cffi:defcfun ("gsl_blas_zsyrk" gsl_blas_zsyrk) :int
  (Uplo :pointer)
  (Trans :pointer)
  (alpha :pointer)
  (A :pointer)
  (beta :pointer)
  (C :pointer))

(cl:export 'gsl_blas_zsyrk)

(cffi:defcfun ("gsl_blas_zsyr2k" gsl_blas_zsyr2k) :int
  (Uplo :pointer)
  (Trans :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer)
  (beta :pointer)
  (C :pointer))

(cl:export 'gsl_blas_zsyr2k)

(cffi:defcfun ("gsl_blas_ztrmm" gsl_blas_ztrmm) :int
  (Side :pointer)
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer))

(cl:export 'gsl_blas_ztrmm)

(cffi:defcfun ("gsl_blas_ztrsm" gsl_blas_ztrsm) :int
  (Side :pointer)
  (Uplo :pointer)
  (TransA :pointer)
  (Diag :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer))

(cl:export 'gsl_blas_ztrsm)

(cffi:defcfun ("gsl_blas_chemm" gsl_blas_chemm) :int
  (Side :pointer)
  (Uplo :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer)
  (beta :pointer)
  (C :pointer))

(cl:export 'gsl_blas_chemm)

(cffi:defcfun ("gsl_blas_cherk" gsl_blas_cherk) :int
  (Uplo :pointer)
  (Trans :pointer)
  (alpha :float)
  (A :pointer)
  (beta :float)
  (C :pointer))

(cl:export 'gsl_blas_cherk)

(cffi:defcfun ("gsl_blas_cher2k" gsl_blas_cher2k) :int
  (Uplo :pointer)
  (Trans :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer)
  (beta :float)
  (C :pointer))

(cl:export 'gsl_blas_cher2k)

(cffi:defcfun ("gsl_blas_zhemm" gsl_blas_zhemm) :int
  (Side :pointer)
  (Uplo :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer)
  (beta :pointer)
  (C :pointer))

(cl:export 'gsl_blas_zhemm)

(cffi:defcfun ("gsl_blas_zherk" gsl_blas_zherk) :int
  (Uplo :pointer)
  (Trans :pointer)
  (alpha :double)
  (A :pointer)
  (beta :double)
  (C :pointer))

(cl:export 'gsl_blas_zherk)

(cffi:defcfun ("gsl_blas_zher2k" gsl_blas_zher2k) :int
  (Uplo :pointer)
  (Trans :pointer)
  (alpha :pointer)
  (A :pointer)
  (B :pointer)
  (beta :double)
  (C :pointer))

(cl:export 'gsl_blas_zher2k)

(cffi:defcstruct gsl_block_char_struct
	(size :pointer)
	(data :string))

(cl:export 'gsl_block_char_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_char_alloc" gsl_block_char_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_char_alloc)

(cffi:defcfun ("gsl_block_char_calloc" gsl_block_char_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_char_calloc)

(cffi:defcfun ("gsl_block_char_free" gsl_block_char_free) :void
  (b :pointer))

(cl:export 'gsl_block_char_free)

(cffi:defcfun ("gsl_block_char_fread" gsl_block_char_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_char_fread)

(cffi:defcfun ("gsl_block_char_fwrite" gsl_block_char_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_char_fwrite)

(cffi:defcfun ("gsl_block_char_fscanf" gsl_block_char_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_char_fscanf)

(cffi:defcfun ("gsl_block_char_fprintf" gsl_block_char_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_char_fprintf)

(cffi:defcfun ("gsl_block_char_raw_fread" gsl_block_char_raw_fread) :int
  (stream :pointer)
  (b :string)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_char_raw_fread)

(cffi:defcfun ("gsl_block_char_raw_fwrite" gsl_block_char_raw_fwrite) :int
  (stream :pointer)
  (b :string)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_char_raw_fwrite)

(cffi:defcfun ("gsl_block_char_raw_fscanf" gsl_block_char_raw_fscanf) :int
  (stream :pointer)
  (b :string)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_char_raw_fscanf)

(cffi:defcfun ("gsl_block_char_raw_fprintf" gsl_block_char_raw_fprintf) :int
  (stream :pointer)
  (b :string)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_char_raw_fprintf)

(cffi:defcfun ("gsl_block_char_size" gsl_block_char_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_char_size)

(cffi:defcfun ("gsl_block_char_data" gsl_block_char_data) :string
  (b :pointer))

(cl:export 'gsl_block_char_data)

(cffi:defcstruct gsl_block_complex_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_block_complex_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_complex_alloc" gsl_block_complex_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_complex_alloc)

(cffi:defcfun ("gsl_block_complex_calloc" gsl_block_complex_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_complex_calloc)

(cffi:defcfun ("gsl_block_complex_free" gsl_block_complex_free) :void
  (b :pointer))

(cl:export 'gsl_block_complex_free)

(cffi:defcfun ("gsl_block_complex_fread" gsl_block_complex_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_complex_fread)

(cffi:defcfun ("gsl_block_complex_fwrite" gsl_block_complex_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_complex_fwrite)

(cffi:defcfun ("gsl_block_complex_fscanf" gsl_block_complex_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_complex_fscanf)

(cffi:defcfun ("gsl_block_complex_fprintf" gsl_block_complex_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_complex_fprintf)

(cffi:defcfun ("gsl_block_complex_raw_fread" gsl_block_complex_raw_fread) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_complex_raw_fread)

(cffi:defcfun ("gsl_block_complex_raw_fwrite" gsl_block_complex_raw_fwrite) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_complex_raw_fwrite)

(cffi:defcfun ("gsl_block_complex_raw_fscanf" gsl_block_complex_raw_fscanf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_complex_raw_fscanf)

(cffi:defcfun ("gsl_block_complex_raw_fprintf" gsl_block_complex_raw_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_complex_raw_fprintf)

(cffi:defcfun ("gsl_block_complex_size" gsl_block_complex_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_complex_size)

(cffi:defcfun ("gsl_block_complex_data" gsl_block_complex_data) :pointer
  (b :pointer))

(cl:export 'gsl_block_complex_data)

(cffi:defcstruct gsl_block_complex_float_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_block_complex_float_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_complex_float_alloc" gsl_block_complex_float_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_complex_float_alloc)

(cffi:defcfun ("gsl_block_complex_float_calloc" gsl_block_complex_float_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_complex_float_calloc)

(cffi:defcfun ("gsl_block_complex_float_free" gsl_block_complex_float_free) :void
  (b :pointer))

(cl:export 'gsl_block_complex_float_free)

(cffi:defcfun ("gsl_block_complex_float_fread" gsl_block_complex_float_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_complex_float_fread)

(cffi:defcfun ("gsl_block_complex_float_fwrite" gsl_block_complex_float_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_complex_float_fwrite)

(cffi:defcfun ("gsl_block_complex_float_fscanf" gsl_block_complex_float_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_complex_float_fscanf)

(cffi:defcfun ("gsl_block_complex_float_fprintf" gsl_block_complex_float_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_complex_float_fprintf)

(cffi:defcfun ("gsl_block_complex_float_raw_fread" gsl_block_complex_float_raw_fread) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_complex_float_raw_fread)

(cffi:defcfun ("gsl_block_complex_float_raw_fwrite" gsl_block_complex_float_raw_fwrite) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_complex_float_raw_fwrite)

(cffi:defcfun ("gsl_block_complex_float_raw_fscanf" gsl_block_complex_float_raw_fscanf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_complex_float_raw_fscanf)

(cffi:defcfun ("gsl_block_complex_float_raw_fprintf" gsl_block_complex_float_raw_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_complex_float_raw_fprintf)

(cffi:defcfun ("gsl_block_complex_float_size" gsl_block_complex_float_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_complex_float_size)

(cffi:defcfun ("gsl_block_complex_float_data" gsl_block_complex_float_data) :pointer
  (b :pointer))

(cl:export 'gsl_block_complex_float_data)

(cffi:defcstruct gsl_block_complex_long_double_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_block_complex_long_double_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_complex_long_double_alloc" gsl_block_complex_long_double_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_complex_long_double_alloc)

(cffi:defcfun ("gsl_block_complex_long_double_calloc" gsl_block_complex_long_double_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_complex_long_double_calloc)

(cffi:defcfun ("gsl_block_complex_long_double_free" gsl_block_complex_long_double_free) :void
  (b :pointer))

(cl:export 'gsl_block_complex_long_double_free)

(cffi:defcfun ("gsl_block_complex_long_double_fread" gsl_block_complex_long_double_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_complex_long_double_fread)

(cffi:defcfun ("gsl_block_complex_long_double_fwrite" gsl_block_complex_long_double_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_complex_long_double_fwrite)

(cffi:defcfun ("gsl_block_complex_long_double_fscanf" gsl_block_complex_long_double_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_complex_long_double_fscanf)

(cffi:defcfun ("gsl_block_complex_long_double_fprintf" gsl_block_complex_long_double_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_complex_long_double_fprintf)

(cffi:defcfun ("gsl_block_complex_long_double_raw_fread" gsl_block_complex_long_double_raw_fread) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_complex_long_double_raw_fread)

(cffi:defcfun ("gsl_block_complex_long_double_raw_fwrite" gsl_block_complex_long_double_raw_fwrite) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_complex_long_double_raw_fwrite)

(cffi:defcfun ("gsl_block_complex_long_double_raw_fscanf" gsl_block_complex_long_double_raw_fscanf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_complex_long_double_raw_fscanf)

(cffi:defcfun ("gsl_block_complex_long_double_raw_fprintf" gsl_block_complex_long_double_raw_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_complex_long_double_raw_fprintf)

(cffi:defcfun ("gsl_block_complex_long_double_size" gsl_block_complex_long_double_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_complex_long_double_size)

(cffi:defcfun ("gsl_block_complex_long_double_data" gsl_block_complex_long_double_data) :pointer
  (b :pointer))

(cl:export 'gsl_block_complex_long_double_data)

(cffi:defcstruct gsl_block_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_block_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_alloc" gsl_block_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_alloc)

(cffi:defcfun ("gsl_block_calloc" gsl_block_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_calloc)

(cffi:defcfun ("gsl_block_free" gsl_block_free) :void
  (b :pointer))

(cl:export 'gsl_block_free)

(cffi:defcfun ("gsl_block_fread" gsl_block_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_fread)

(cffi:defcfun ("gsl_block_fwrite" gsl_block_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_fwrite)

(cffi:defcfun ("gsl_block_fscanf" gsl_block_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_fscanf)

(cffi:defcfun ("gsl_block_fprintf" gsl_block_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_fprintf)

(cffi:defcfun ("gsl_block_raw_fread" gsl_block_raw_fread) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_raw_fread)

(cffi:defcfun ("gsl_block_raw_fwrite" gsl_block_raw_fwrite) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_raw_fwrite)

(cffi:defcfun ("gsl_block_raw_fscanf" gsl_block_raw_fscanf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_raw_fscanf)

(cffi:defcfun ("gsl_block_raw_fprintf" gsl_block_raw_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_raw_fprintf)

(cffi:defcfun ("gsl_block_size" gsl_block_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_size)

(cffi:defcfun ("gsl_block_data" gsl_block_data) :pointer
  (b :pointer))

(cl:export 'gsl_block_data)

(cffi:defcstruct gsl_block_float_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_block_float_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_float_alloc" gsl_block_float_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_float_alloc)

(cffi:defcfun ("gsl_block_float_calloc" gsl_block_float_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_float_calloc)

(cffi:defcfun ("gsl_block_float_free" gsl_block_float_free) :void
  (b :pointer))

(cl:export 'gsl_block_float_free)

(cffi:defcfun ("gsl_block_float_fread" gsl_block_float_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_float_fread)

(cffi:defcfun ("gsl_block_float_fwrite" gsl_block_float_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_float_fwrite)

(cffi:defcfun ("gsl_block_float_fscanf" gsl_block_float_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_float_fscanf)

(cffi:defcfun ("gsl_block_float_fprintf" gsl_block_float_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_float_fprintf)

(cffi:defcfun ("gsl_block_float_raw_fread" gsl_block_float_raw_fread) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_float_raw_fread)

(cffi:defcfun ("gsl_block_float_raw_fwrite" gsl_block_float_raw_fwrite) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_float_raw_fwrite)

(cffi:defcfun ("gsl_block_float_raw_fscanf" gsl_block_float_raw_fscanf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_float_raw_fscanf)

(cffi:defcfun ("gsl_block_float_raw_fprintf" gsl_block_float_raw_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_float_raw_fprintf)

(cffi:defcfun ("gsl_block_float_size" gsl_block_float_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_float_size)

(cffi:defcfun ("gsl_block_float_data" gsl_block_float_data) :pointer
  (b :pointer))

(cl:export 'gsl_block_float_data)

(cffi:defcstruct gsl_block_int_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_block_int_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_int_alloc" gsl_block_int_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_int_alloc)

(cffi:defcfun ("gsl_block_int_calloc" gsl_block_int_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_int_calloc)

(cffi:defcfun ("gsl_block_int_free" gsl_block_int_free) :void
  (b :pointer))

(cl:export 'gsl_block_int_free)

(cffi:defcfun ("gsl_block_int_fread" gsl_block_int_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_int_fread)

(cffi:defcfun ("gsl_block_int_fwrite" gsl_block_int_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_int_fwrite)

(cffi:defcfun ("gsl_block_int_fscanf" gsl_block_int_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_int_fscanf)

(cffi:defcfun ("gsl_block_int_fprintf" gsl_block_int_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_int_fprintf)

(cffi:defcfun ("gsl_block_int_raw_fread" gsl_block_int_raw_fread) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_int_raw_fread)

(cffi:defcfun ("gsl_block_int_raw_fwrite" gsl_block_int_raw_fwrite) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_int_raw_fwrite)

(cffi:defcfun ("gsl_block_int_raw_fscanf" gsl_block_int_raw_fscanf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_int_raw_fscanf)

(cffi:defcfun ("gsl_block_int_raw_fprintf" gsl_block_int_raw_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_int_raw_fprintf)

(cffi:defcfun ("gsl_block_int_size" gsl_block_int_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_int_size)

(cffi:defcfun ("gsl_block_int_data" gsl_block_int_data) :pointer
  (b :pointer))

(cl:export 'gsl_block_int_data)

(cffi:defcstruct gsl_block_long_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_block_long_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_long_alloc" gsl_block_long_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_long_alloc)

(cffi:defcfun ("gsl_block_long_calloc" gsl_block_long_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_long_calloc)

(cffi:defcfun ("gsl_block_long_free" gsl_block_long_free) :void
  (b :pointer))

(cl:export 'gsl_block_long_free)

(cffi:defcfun ("gsl_block_long_fread" gsl_block_long_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_long_fread)

(cffi:defcfun ("gsl_block_long_fwrite" gsl_block_long_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_long_fwrite)

(cffi:defcfun ("gsl_block_long_fscanf" gsl_block_long_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_long_fscanf)

(cffi:defcfun ("gsl_block_long_fprintf" gsl_block_long_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_long_fprintf)

(cffi:defcfun ("gsl_block_long_raw_fread" gsl_block_long_raw_fread) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_long_raw_fread)

(cffi:defcfun ("gsl_block_long_raw_fwrite" gsl_block_long_raw_fwrite) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_long_raw_fwrite)

(cffi:defcfun ("gsl_block_long_raw_fscanf" gsl_block_long_raw_fscanf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_long_raw_fscanf)

(cffi:defcfun ("gsl_block_long_raw_fprintf" gsl_block_long_raw_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_long_raw_fprintf)

(cffi:defcfun ("gsl_block_long_size" gsl_block_long_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_long_size)

(cffi:defcfun ("gsl_block_long_data" gsl_block_long_data) :pointer
  (b :pointer))

(cl:export 'gsl_block_long_data)

(cffi:defcstruct gsl_block_long_double_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_block_long_double_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_long_double_alloc" gsl_block_long_double_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_long_double_alloc)

(cffi:defcfun ("gsl_block_long_double_calloc" gsl_block_long_double_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_long_double_calloc)

(cffi:defcfun ("gsl_block_long_double_free" gsl_block_long_double_free) :void
  (b :pointer))

(cl:export 'gsl_block_long_double_free)

(cffi:defcfun ("gsl_block_long_double_fread" gsl_block_long_double_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_long_double_fread)

(cffi:defcfun ("gsl_block_long_double_fwrite" gsl_block_long_double_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_long_double_fwrite)

(cffi:defcfun ("gsl_block_long_double_fscanf" gsl_block_long_double_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_long_double_fscanf)

(cffi:defcfun ("gsl_block_long_double_fprintf" gsl_block_long_double_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_long_double_fprintf)

(cffi:defcfun ("gsl_block_long_double_raw_fread" gsl_block_long_double_raw_fread) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_long_double_raw_fread)

(cffi:defcfun ("gsl_block_long_double_raw_fwrite" gsl_block_long_double_raw_fwrite) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_long_double_raw_fwrite)

(cffi:defcfun ("gsl_block_long_double_raw_fscanf" gsl_block_long_double_raw_fscanf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_long_double_raw_fscanf)

(cffi:defcfun ("gsl_block_long_double_raw_fprintf" gsl_block_long_double_raw_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_long_double_raw_fprintf)

(cffi:defcfun ("gsl_block_long_double_size" gsl_block_long_double_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_long_double_size)

(cffi:defcfun ("gsl_block_long_double_data" gsl_block_long_double_data) :pointer
  (b :pointer))

(cl:export 'gsl_block_long_double_data)

(cffi:defcstruct gsl_block_short_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_block_short_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_short_alloc" gsl_block_short_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_short_alloc)

(cffi:defcfun ("gsl_block_short_calloc" gsl_block_short_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_short_calloc)

(cffi:defcfun ("gsl_block_short_free" gsl_block_short_free) :void
  (b :pointer))

(cl:export 'gsl_block_short_free)

(cffi:defcfun ("gsl_block_short_fread" gsl_block_short_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_short_fread)

(cffi:defcfun ("gsl_block_short_fwrite" gsl_block_short_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_short_fwrite)

(cffi:defcfun ("gsl_block_short_fscanf" gsl_block_short_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_short_fscanf)

(cffi:defcfun ("gsl_block_short_fprintf" gsl_block_short_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_short_fprintf)

(cffi:defcfun ("gsl_block_short_raw_fread" gsl_block_short_raw_fread) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_short_raw_fread)

(cffi:defcfun ("gsl_block_short_raw_fwrite" gsl_block_short_raw_fwrite) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_short_raw_fwrite)

(cffi:defcfun ("gsl_block_short_raw_fscanf" gsl_block_short_raw_fscanf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_short_raw_fscanf)

(cffi:defcfun ("gsl_block_short_raw_fprintf" gsl_block_short_raw_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_short_raw_fprintf)

(cffi:defcfun ("gsl_block_short_size" gsl_block_short_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_short_size)

(cffi:defcfun ("gsl_block_short_data" gsl_block_short_data) :pointer
  (b :pointer))

(cl:export 'gsl_block_short_data)

(cffi:defcstruct gsl_block_uchar_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_block_uchar_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_uchar_alloc" gsl_block_uchar_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_uchar_alloc)

(cffi:defcfun ("gsl_block_uchar_calloc" gsl_block_uchar_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_uchar_calloc)

(cffi:defcfun ("gsl_block_uchar_free" gsl_block_uchar_free) :void
  (b :pointer))

(cl:export 'gsl_block_uchar_free)

(cffi:defcfun ("gsl_block_uchar_fread" gsl_block_uchar_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_uchar_fread)

(cffi:defcfun ("gsl_block_uchar_fwrite" gsl_block_uchar_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_uchar_fwrite)

(cffi:defcfun ("gsl_block_uchar_fscanf" gsl_block_uchar_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_uchar_fscanf)

(cffi:defcfun ("gsl_block_uchar_fprintf" gsl_block_uchar_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_uchar_fprintf)

(cffi:defcfun ("gsl_block_uchar_raw_fread" gsl_block_uchar_raw_fread) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_uchar_raw_fread)

(cffi:defcfun ("gsl_block_uchar_raw_fwrite" gsl_block_uchar_raw_fwrite) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_uchar_raw_fwrite)

(cffi:defcfun ("gsl_block_uchar_raw_fscanf" gsl_block_uchar_raw_fscanf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_uchar_raw_fscanf)

(cffi:defcfun ("gsl_block_uchar_raw_fprintf" gsl_block_uchar_raw_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_uchar_raw_fprintf)

(cffi:defcfun ("gsl_block_uchar_size" gsl_block_uchar_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_uchar_size)

(cffi:defcfun ("gsl_block_uchar_data" gsl_block_uchar_data) :pointer
  (b :pointer))

(cl:export 'gsl_block_uchar_data)

(cffi:defcstruct gsl_block_uint_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_block_uint_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_uint_alloc" gsl_block_uint_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_uint_alloc)

(cffi:defcfun ("gsl_block_uint_calloc" gsl_block_uint_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_uint_calloc)

(cffi:defcfun ("gsl_block_uint_free" gsl_block_uint_free) :void
  (b :pointer))

(cl:export 'gsl_block_uint_free)

(cffi:defcfun ("gsl_block_uint_fread" gsl_block_uint_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_uint_fread)

(cffi:defcfun ("gsl_block_uint_fwrite" gsl_block_uint_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_uint_fwrite)

(cffi:defcfun ("gsl_block_uint_fscanf" gsl_block_uint_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_uint_fscanf)

(cffi:defcfun ("gsl_block_uint_fprintf" gsl_block_uint_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_uint_fprintf)

(cffi:defcfun ("gsl_block_uint_raw_fread" gsl_block_uint_raw_fread) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_uint_raw_fread)

(cffi:defcfun ("gsl_block_uint_raw_fwrite" gsl_block_uint_raw_fwrite) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_uint_raw_fwrite)

(cffi:defcfun ("gsl_block_uint_raw_fscanf" gsl_block_uint_raw_fscanf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_uint_raw_fscanf)

(cffi:defcfun ("gsl_block_uint_raw_fprintf" gsl_block_uint_raw_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_uint_raw_fprintf)

(cffi:defcfun ("gsl_block_uint_size" gsl_block_uint_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_uint_size)

(cffi:defcfun ("gsl_block_uint_data" gsl_block_uint_data) :pointer
  (b :pointer))

(cl:export 'gsl_block_uint_data)

(cffi:defcstruct gsl_block_ulong_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_block_ulong_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_ulong_alloc" gsl_block_ulong_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_ulong_alloc)

(cffi:defcfun ("gsl_block_ulong_calloc" gsl_block_ulong_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_ulong_calloc)

(cffi:defcfun ("gsl_block_ulong_free" gsl_block_ulong_free) :void
  (b :pointer))

(cl:export 'gsl_block_ulong_free)

(cffi:defcfun ("gsl_block_ulong_fread" gsl_block_ulong_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_ulong_fread)

(cffi:defcfun ("gsl_block_ulong_fwrite" gsl_block_ulong_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_ulong_fwrite)

(cffi:defcfun ("gsl_block_ulong_fscanf" gsl_block_ulong_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_ulong_fscanf)

(cffi:defcfun ("gsl_block_ulong_fprintf" gsl_block_ulong_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_ulong_fprintf)

(cffi:defcfun ("gsl_block_ulong_raw_fread" gsl_block_ulong_raw_fread) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_ulong_raw_fread)

(cffi:defcfun ("gsl_block_ulong_raw_fwrite" gsl_block_ulong_raw_fwrite) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_ulong_raw_fwrite)

(cffi:defcfun ("gsl_block_ulong_raw_fscanf" gsl_block_ulong_raw_fscanf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_ulong_raw_fscanf)

(cffi:defcfun ("gsl_block_ulong_raw_fprintf" gsl_block_ulong_raw_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_ulong_raw_fprintf)

(cffi:defcfun ("gsl_block_ulong_size" gsl_block_ulong_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_ulong_size)

(cffi:defcfun ("gsl_block_ulong_data" gsl_block_ulong_data) :pointer
  (b :pointer))

(cl:export 'gsl_block_ulong_data)

(cffi:defcstruct gsl_block_ushort_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_block_ushort_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_block_ushort_alloc" gsl_block_ushort_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_ushort_alloc)

(cffi:defcfun ("gsl_block_ushort_calloc" gsl_block_ushort_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_block_ushort_calloc)

(cffi:defcfun ("gsl_block_ushort_free" gsl_block_ushort_free) :void
  (b :pointer))

(cl:export 'gsl_block_ushort_free)

(cffi:defcfun ("gsl_block_ushort_fread" gsl_block_ushort_fread) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_ushort_fread)

(cffi:defcfun ("gsl_block_ushort_fwrite" gsl_block_ushort_fwrite) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_ushort_fwrite)

(cffi:defcfun ("gsl_block_ushort_fscanf" gsl_block_ushort_fscanf) :int
  (stream :pointer)
  (b :pointer))

(cl:export 'gsl_block_ushort_fscanf)

(cffi:defcfun ("gsl_block_ushort_fprintf" gsl_block_ushort_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (format :string))

(cl:export 'gsl_block_ushort_fprintf)

(cffi:defcfun ("gsl_block_ushort_raw_fread" gsl_block_ushort_raw_fread) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_ushort_raw_fread)

(cffi:defcfun ("gsl_block_ushort_raw_fwrite" gsl_block_ushort_raw_fwrite) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_ushort_raw_fwrite)

(cffi:defcfun ("gsl_block_ushort_raw_fscanf" gsl_block_ushort_raw_fscanf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_block_ushort_raw_fscanf)

(cffi:defcfun ("gsl_block_ushort_raw_fprintf" gsl_block_ushort_raw_fprintf) :int
  (stream :pointer)
  (b :pointer)
  (n :pointer)
  (stride :pointer)
  (format :string))

(cl:export 'gsl_block_ushort_raw_fprintf)

(cffi:defcfun ("gsl_block_ushort_size" gsl_block_ushort_size) :pointer
  (b :pointer))

(cl:export 'gsl_block_ushort_size)

(cffi:defcfun ("gsl_block_ushort_data" gsl_block_ushort_data) :pointer
  (b :pointer))

(cl:export 'gsl_block_ushort_data)

(cffi:defcstruct gsl_bspline_workspace
	(k :pointer)
	(km1 :pointer)
	(l :pointer)
	(nbreak :pointer)
	(n :pointer)
	(knots :pointer)
	(deltal :pointer)
	(deltar :pointer)
	(B :pointer))

(cl:export 'gsl_bspline_workspace)

(cl:export 'k)

(cl:export 'km1)

(cl:export 'l)

(cl:export 'nbreak)

(cl:export 'n)

(cl:export 'knots)

(cl:export 'deltal)

(cl:export 'deltar)

(cl:export 'B)

(cffi:defcstruct gsl_bspline_deriv_workspace
	(k :pointer)
	(A :pointer)
	(dB :pointer))

(cl:export 'gsl_bspline_deriv_workspace)

(cl:export 'k)

(cl:export 'A)

(cl:export 'dB)

(cffi:defcfun ("gsl_bspline_alloc" gsl_bspline_alloc) :pointer
  (k :pointer)
  (nbreak :pointer))

(cl:export 'gsl_bspline_alloc)

(cffi:defcfun ("gsl_bspline_free" gsl_bspline_free) :void
  (w :pointer))

(cl:export 'gsl_bspline_free)

(cffi:defcfun ("gsl_bspline_ncoeffs" gsl_bspline_ncoeffs) :pointer
  (w :pointer))

(cl:export 'gsl_bspline_ncoeffs)

(cffi:defcfun ("gsl_bspline_order" gsl_bspline_order) :pointer
  (w :pointer))

(cl:export 'gsl_bspline_order)

(cffi:defcfun ("gsl_bspline_nbreak" gsl_bspline_nbreak) :pointer
  (w :pointer))

(cl:export 'gsl_bspline_nbreak)

(cffi:defcfun ("gsl_bspline_breakpoint" gsl_bspline_breakpoint) :double
  (i :pointer)
  (w :pointer))

(cl:export 'gsl_bspline_breakpoint)

(cffi:defcfun ("gsl_bspline_greville_abscissa" gsl_bspline_greville_abscissa) :double
  (i :pointer)
  (w :pointer))

(cl:export 'gsl_bspline_greville_abscissa)

(cffi:defcfun ("gsl_bspline_knots" gsl_bspline_knots) :int
  (breakpts :pointer)
  (w :pointer))

(cl:export 'gsl_bspline_knots)

(cffi:defcfun ("gsl_bspline_knots_uniform" gsl_bspline_knots_uniform) :int
  (a :double)
  (b :double)
  (w :pointer))

(cl:export 'gsl_bspline_knots_uniform)

(cffi:defcfun ("gsl_bspline_knots_greville" gsl_bspline_knots_greville) :int
  (abscissae :pointer)
  (w :pointer)
  (abserr :pointer))

(cl:export 'gsl_bspline_knots_greville)

(cffi:defcfun ("gsl_bspline_eval" gsl_bspline_eval) :int
  (x :double)
  (B :pointer)
  (w :pointer))

(cl:export 'gsl_bspline_eval)

(cffi:defcfun ("gsl_bspline_eval_nonzero" gsl_bspline_eval_nonzero) :int
  (x :double)
  (Bk :pointer)
  (istart :pointer)
  (iend :pointer)
  (w :pointer))

(cl:export 'gsl_bspline_eval_nonzero)

(cffi:defcfun ("gsl_bspline_deriv_alloc" gsl_bspline_deriv_alloc) :pointer
  (k :pointer))

(cl:export 'gsl_bspline_deriv_alloc)

(cffi:defcfun ("gsl_bspline_deriv_free" gsl_bspline_deriv_free) :void
  (w :pointer))

(cl:export 'gsl_bspline_deriv_free)

(cffi:defcfun ("gsl_bspline_deriv_eval" gsl_bspline_deriv_eval) :int
  (x :double)
  (nderiv :pointer)
  (dB :pointer)
  (w :pointer)
  (dw :pointer))

(cl:export 'gsl_bspline_deriv_eval)

(cffi:defcfun ("gsl_bspline_deriv_eval_nonzero" gsl_bspline_deriv_eval_nonzero) :int
  (x :double)
  (nderiv :pointer)
  (dB :pointer)
  (istart :pointer)
  (iend :pointer)
  (w :pointer)
  (dw :pointer))

(cl:export 'gsl_bspline_deriv_eval_nonzero)

(cffi:defcenum CBLAS_ORDER
	(:CblasRowMajor #.101)
	(:CblasColMajor #.102))

(cl:export 'CBLAS_ORDER)

(cffi:defcenum CBLAS_TRANSPOSE
	(:CblasNoTrans #.111)
	(:CblasTrans #.112)
	(:CblasConjTrans #.113))

(cl:export 'CBLAS_TRANSPOSE)

(cffi:defcenum CBLAS_UPLO
	(:CblasUpper #.121)
	(:CblasLower #.122))

(cl:export 'CBLAS_UPLO)

(cffi:defcenum CBLAS_DIAG
	(:CblasNonUnit #.131)
	(:CblasUnit #.132))

(cl:export 'CBLAS_DIAG)

(cffi:defcenum CBLAS_SIDE
	(:CblasLeft #.141)
	(:CblasRight #.142))

(cl:export 'CBLAS_SIDE)

(cffi:defcfun ("cblas_sdsdot" cblas_sdsdot) :float
  (N :int)
  (alpha :float)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_sdsdot)

(cffi:defcfun ("cblas_dsdot" cblas_dsdot) :double
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_dsdot)

(cffi:defcfun ("cblas_sdot" cblas_sdot) :float
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_sdot)

(cffi:defcfun ("cblas_ddot" cblas_ddot) :double
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_ddot)

(cffi:defcfun ("cblas_cdotu_sub" cblas_cdotu_sub) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (dotu :pointer))

(cl:export 'cblas_cdotu_sub)

(cffi:defcfun ("cblas_cdotc_sub" cblas_cdotc_sub) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (dotc :pointer))

(cl:export 'cblas_cdotc_sub)

(cffi:defcfun ("cblas_zdotu_sub" cblas_zdotu_sub) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (dotu :pointer))

(cl:export 'cblas_zdotu_sub)

(cffi:defcfun ("cblas_zdotc_sub" cblas_zdotc_sub) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (dotc :pointer))

(cl:export 'cblas_zdotc_sub)

(cffi:defcfun ("cblas_snrm2" cblas_snrm2) :float
  (N :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_snrm2)

(cffi:defcfun ("cblas_sasum" cblas_sasum) :float
  (N :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_sasum)

(cffi:defcfun ("cblas_dnrm2" cblas_dnrm2) :double
  (N :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_dnrm2)

(cffi:defcfun ("cblas_dasum" cblas_dasum) :double
  (N :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_dasum)

(cffi:defcfun ("cblas_scnrm2" cblas_scnrm2) :float
  (N :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_scnrm2)

(cffi:defcfun ("cblas_scasum" cblas_scasum) :float
  (N :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_scasum)

(cffi:defcfun ("cblas_dznrm2" cblas_dznrm2) :double
  (N :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_dznrm2)

(cffi:defcfun ("cblas_dzasum" cblas_dzasum) :double
  (N :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_dzasum)

(cffi:defcfun ("cblas_isamax" cblas_isamax) :pointer
  (N :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_isamax)

(cffi:defcfun ("cblas_idamax" cblas_idamax) :pointer
  (N :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_idamax)

(cffi:defcfun ("cblas_icamax" cblas_icamax) :pointer
  (N :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_icamax)

(cffi:defcfun ("cblas_izamax" cblas_izamax) :pointer
  (N :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_izamax)

(cffi:defcfun ("cblas_sswap" cblas_sswap) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_sswap)

(cffi:defcfun ("cblas_scopy" cblas_scopy) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_scopy)

(cffi:defcfun ("cblas_saxpy" cblas_saxpy) :void
  (N :int)
  (alpha :float)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_saxpy)

(cffi:defcfun ("cblas_dswap" cblas_dswap) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_dswap)

(cffi:defcfun ("cblas_dcopy" cblas_dcopy) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_dcopy)

(cffi:defcfun ("cblas_daxpy" cblas_daxpy) :void
  (N :int)
  (alpha :double)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_daxpy)

(cffi:defcfun ("cblas_cswap" cblas_cswap) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_cswap)

(cffi:defcfun ("cblas_ccopy" cblas_ccopy) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_ccopy)

(cffi:defcfun ("cblas_caxpy" cblas_caxpy) :void
  (N :int)
  (alpha :pointer)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_caxpy)

(cffi:defcfun ("cblas_zswap" cblas_zswap) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_zswap)

(cffi:defcfun ("cblas_zcopy" cblas_zcopy) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_zcopy)

(cffi:defcfun ("cblas_zaxpy" cblas_zaxpy) :void
  (N :int)
  (alpha :pointer)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_zaxpy)

(cffi:defcfun ("cblas_srotg" cblas_srotg) :void
  (a :pointer)
  (b :pointer)
  (c :pointer)
  (s :pointer))

(cl:export 'cblas_srotg)

(cffi:defcfun ("cblas_srotmg" cblas_srotmg) :void
  (d1 :pointer)
  (d2 :pointer)
  (b1 :pointer)
  (b2 :float)
  (P :pointer))

(cl:export 'cblas_srotmg)

(cffi:defcfun ("cblas_srot" cblas_srot) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (c :float)
  (s :float))

(cl:export 'cblas_srot)

(cffi:defcfun ("cblas_srotm" cblas_srotm) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (P :pointer))

(cl:export 'cblas_srotm)

(cffi:defcfun ("cblas_drotg" cblas_drotg) :void
  (a :pointer)
  (b :pointer)
  (c :pointer)
  (s :pointer))

(cl:export 'cblas_drotg)

(cffi:defcfun ("cblas_drotmg" cblas_drotmg) :void
  (d1 :pointer)
  (d2 :pointer)
  (b1 :pointer)
  (b2 :double)
  (P :pointer))

(cl:export 'cblas_drotmg)

(cffi:defcfun ("cblas_drot" cblas_drot) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (c :double)
  (s :double))

(cl:export 'cblas_drot)

(cffi:defcfun ("cblas_drotm" cblas_drotm) :void
  (N :int)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (P :pointer))

(cl:export 'cblas_drotm)

(cffi:defcfun ("cblas_sscal" cblas_sscal) :void
  (N :int)
  (alpha :float)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_sscal)

(cffi:defcfun ("cblas_dscal" cblas_dscal) :void
  (N :int)
  (alpha :double)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_dscal)

(cffi:defcfun ("cblas_cscal" cblas_cscal) :void
  (N :int)
  (alpha :pointer)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_cscal)

(cffi:defcfun ("cblas_zscal" cblas_zscal) :void
  (N :int)
  (alpha :pointer)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_zscal)

(cffi:defcfun ("cblas_csscal" cblas_csscal) :void
  (N :int)
  (alpha :float)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_csscal)

(cffi:defcfun ("cblas_zdscal" cblas_zdscal) :void
  (N :int)
  (alpha :double)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_zdscal)

(cffi:defcfun ("cblas_sgemv" cblas_sgemv) :void
  (order CBLAS_ORDER)
  (TransA CBLAS_TRANSPOSE)
  (M :int)
  (N :int)
  (alpha :float)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :float)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_sgemv)

(cffi:defcfun ("cblas_sgbmv" cblas_sgbmv) :void
  (order CBLAS_ORDER)
  (TransA CBLAS_TRANSPOSE)
  (M :int)
  (N :int)
  (KL :int)
  (KU :int)
  (alpha :float)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :float)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_sgbmv)

(cffi:defcfun ("cblas_strmv" cblas_strmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_strmv)

(cffi:defcfun ("cblas_stbmv" cblas_stbmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (K :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_stbmv)

(cffi:defcfun ("cblas_stpmv" cblas_stpmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (Ap :pointer)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_stpmv)

(cffi:defcfun ("cblas_strsv" cblas_strsv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_strsv)

(cffi:defcfun ("cblas_stbsv" cblas_stbsv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (K :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_stbsv)

(cffi:defcfun ("cblas_stpsv" cblas_stpsv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (Ap :pointer)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_stpsv)

(cffi:defcfun ("cblas_dgemv" cblas_dgemv) :void
  (order CBLAS_ORDER)
  (TransA CBLAS_TRANSPOSE)
  (M :int)
  (N :int)
  (alpha :double)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :double)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_dgemv)

(cffi:defcfun ("cblas_dgbmv" cblas_dgbmv) :void
  (order CBLAS_ORDER)
  (TransA CBLAS_TRANSPOSE)
  (M :int)
  (N :int)
  (KL :int)
  (KU :int)
  (alpha :double)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :double)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_dgbmv)

(cffi:defcfun ("cblas_dtrmv" cblas_dtrmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_dtrmv)

(cffi:defcfun ("cblas_dtbmv" cblas_dtbmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (K :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_dtbmv)

(cffi:defcfun ("cblas_dtpmv" cblas_dtpmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (Ap :pointer)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_dtpmv)

(cffi:defcfun ("cblas_dtrsv" cblas_dtrsv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_dtrsv)

(cffi:defcfun ("cblas_dtbsv" cblas_dtbsv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (K :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_dtbsv)

(cffi:defcfun ("cblas_dtpsv" cblas_dtpsv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (Ap :pointer)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_dtpsv)

(cffi:defcfun ("cblas_cgemv" cblas_cgemv) :void
  (order CBLAS_ORDER)
  (TransA CBLAS_TRANSPOSE)
  (M :int)
  (N :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :pointer)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_cgemv)

(cffi:defcfun ("cblas_cgbmv" cblas_cgbmv) :void
  (order CBLAS_ORDER)
  (TransA CBLAS_TRANSPOSE)
  (M :int)
  (N :int)
  (KL :int)
  (KU :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :pointer)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_cgbmv)

(cffi:defcfun ("cblas_ctrmv" cblas_ctrmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_ctrmv)

(cffi:defcfun ("cblas_ctbmv" cblas_ctbmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (K :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_ctbmv)

(cffi:defcfun ("cblas_ctpmv" cblas_ctpmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (Ap :pointer)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_ctpmv)

(cffi:defcfun ("cblas_ctrsv" cblas_ctrsv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_ctrsv)

(cffi:defcfun ("cblas_ctbsv" cblas_ctbsv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (K :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_ctbsv)

(cffi:defcfun ("cblas_ctpsv" cblas_ctpsv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (Ap :pointer)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_ctpsv)

(cffi:defcfun ("cblas_zgemv" cblas_zgemv) :void
  (order CBLAS_ORDER)
  (TransA CBLAS_TRANSPOSE)
  (M :int)
  (N :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :pointer)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_zgemv)

(cffi:defcfun ("cblas_zgbmv" cblas_zgbmv) :void
  (order CBLAS_ORDER)
  (TransA CBLAS_TRANSPOSE)
  (M :int)
  (N :int)
  (KL :int)
  (KU :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :pointer)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_zgbmv)

(cffi:defcfun ("cblas_ztrmv" cblas_ztrmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_ztrmv)

(cffi:defcfun ("cblas_ztbmv" cblas_ztbmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (K :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_ztbmv)

(cffi:defcfun ("cblas_ztpmv" cblas_ztpmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (Ap :pointer)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_ztpmv)

(cffi:defcfun ("cblas_ztrsv" cblas_ztrsv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_ztrsv)

(cffi:defcfun ("cblas_ztbsv" cblas_ztbsv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (K :int)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_ztbsv)

(cffi:defcfun ("cblas_ztpsv" cblas_ztpsv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (N :int)
  (Ap :pointer)
  (X :pointer)
  (incX :int))

(cl:export 'cblas_ztpsv)

(cffi:defcfun ("cblas_ssymv" cblas_ssymv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :float)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :float)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_ssymv)

(cffi:defcfun ("cblas_ssbmv" cblas_ssbmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (K :int)
  (alpha :float)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :float)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_ssbmv)

(cffi:defcfun ("cblas_sspmv" cblas_sspmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :float)
  (Ap :pointer)
  (X :pointer)
  (incX :int)
  (beta :float)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_sspmv)

(cffi:defcfun ("cblas_sger" cblas_sger) :void
  (order CBLAS_ORDER)
  (M :int)
  (N :int)
  (alpha :float)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_sger)

(cffi:defcfun ("cblas_ssyr" cblas_ssyr) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :float)
  (X :pointer)
  (incX :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_ssyr)

(cffi:defcfun ("cblas_sspr" cblas_sspr) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :float)
  (X :pointer)
  (incX :int)
  (Ap :pointer))

(cl:export 'cblas_sspr)

(cffi:defcfun ("cblas_ssyr2" cblas_ssyr2) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :float)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_ssyr2)

(cffi:defcfun ("cblas_sspr2" cblas_sspr2) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :float)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (A :pointer))

(cl:export 'cblas_sspr2)

(cffi:defcfun ("cblas_dsymv" cblas_dsymv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :double)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :double)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_dsymv)

(cffi:defcfun ("cblas_dsbmv" cblas_dsbmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (K :int)
  (alpha :double)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :double)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_dsbmv)

(cffi:defcfun ("cblas_dspmv" cblas_dspmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :double)
  (Ap :pointer)
  (X :pointer)
  (incX :int)
  (beta :double)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_dspmv)

(cffi:defcfun ("cblas_dger" cblas_dger) :void
  (order CBLAS_ORDER)
  (M :int)
  (N :int)
  (alpha :double)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_dger)

(cffi:defcfun ("cblas_dsyr" cblas_dsyr) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :double)
  (X :pointer)
  (incX :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_dsyr)

(cffi:defcfun ("cblas_dspr" cblas_dspr) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :double)
  (X :pointer)
  (incX :int)
  (Ap :pointer))

(cl:export 'cblas_dspr)

(cffi:defcfun ("cblas_dsyr2" cblas_dsyr2) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :double)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_dsyr2)

(cffi:defcfun ("cblas_dspr2" cblas_dspr2) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :double)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (A :pointer))

(cl:export 'cblas_dspr2)

(cffi:defcfun ("cblas_chemv" cblas_chemv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :pointer)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_chemv)

(cffi:defcfun ("cblas_chbmv" cblas_chbmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (K :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :pointer)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_chbmv)

(cffi:defcfun ("cblas_chpmv" cblas_chpmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :pointer)
  (Ap :pointer)
  (X :pointer)
  (incX :int)
  (beta :pointer)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_chpmv)

(cffi:defcfun ("cblas_cgeru" cblas_cgeru) :void
  (order CBLAS_ORDER)
  (M :int)
  (N :int)
  (alpha :pointer)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_cgeru)

(cffi:defcfun ("cblas_cgerc" cblas_cgerc) :void
  (order CBLAS_ORDER)
  (M :int)
  (N :int)
  (alpha :pointer)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_cgerc)

(cffi:defcfun ("cblas_cher" cblas_cher) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :float)
  (X :pointer)
  (incX :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_cher)

(cffi:defcfun ("cblas_chpr" cblas_chpr) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :float)
  (X :pointer)
  (incX :int)
  (A :pointer))

(cl:export 'cblas_chpr)

(cffi:defcfun ("cblas_cher2" cblas_cher2) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :pointer)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_cher2)

(cffi:defcfun ("cblas_chpr2" cblas_chpr2) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :pointer)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (Ap :pointer))

(cl:export 'cblas_chpr2)

(cffi:defcfun ("cblas_zhemv" cblas_zhemv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :pointer)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_zhemv)

(cffi:defcfun ("cblas_zhbmv" cblas_zhbmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (K :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (X :pointer)
  (incX :int)
  (beta :pointer)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_zhbmv)

(cffi:defcfun ("cblas_zhpmv" cblas_zhpmv) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :pointer)
  (Ap :pointer)
  (X :pointer)
  (incX :int)
  (beta :pointer)
  (Y :pointer)
  (incY :int))

(cl:export 'cblas_zhpmv)

(cffi:defcfun ("cblas_zgeru" cblas_zgeru) :void
  (order CBLAS_ORDER)
  (M :int)
  (N :int)
  (alpha :pointer)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_zgeru)

(cffi:defcfun ("cblas_zgerc" cblas_zgerc) :void
  (order CBLAS_ORDER)
  (M :int)
  (N :int)
  (alpha :pointer)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_zgerc)

(cffi:defcfun ("cblas_zher" cblas_zher) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :double)
  (X :pointer)
  (incX :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_zher)

(cffi:defcfun ("cblas_zhpr" cblas_zhpr) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :double)
  (X :pointer)
  (incX :int)
  (A :pointer))

(cl:export 'cblas_zhpr)

(cffi:defcfun ("cblas_zher2" cblas_zher2) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :pointer)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (A :pointer)
  (lda :int))

(cl:export 'cblas_zher2)

(cffi:defcfun ("cblas_zhpr2" cblas_zhpr2) :void
  (order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (N :int)
  (alpha :pointer)
  (X :pointer)
  (incX :int)
  (Y :pointer)
  (incY :int)
  (Ap :pointer))

(cl:export 'cblas_zhpr2)

(cffi:defcfun ("cblas_sgemm" cblas_sgemm) :void
  (Order CBLAS_ORDER)
  (TransA CBLAS_TRANSPOSE)
  (TransB CBLAS_TRANSPOSE)
  (M :int)
  (N :int)
  (K :int)
  (alpha :float)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :float)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_sgemm)

(cffi:defcfun ("cblas_ssymm" cblas_ssymm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (M :int)
  (N :int)
  (alpha :float)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :float)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_ssymm)

(cffi:defcfun ("cblas_ssyrk" cblas_ssyrk) :void
  (Order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (Trans CBLAS_TRANSPOSE)
  (N :int)
  (K :int)
  (alpha :float)
  (A :pointer)
  (lda :int)
  (beta :float)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_ssyrk)

(cffi:defcfun ("cblas_ssyr2k" cblas_ssyr2k) :void
  (Order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (Trans CBLAS_TRANSPOSE)
  (N :int)
  (K :int)
  (alpha :float)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :float)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_ssyr2k)

(cffi:defcfun ("cblas_strmm" cblas_strmm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (M :int)
  (N :int)
  (alpha :float)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int))

(cl:export 'cblas_strmm)

(cffi:defcfun ("cblas_strsm" cblas_strsm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (M :int)
  (N :int)
  (alpha :float)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int))

(cl:export 'cblas_strsm)

(cffi:defcfun ("cblas_dgemm" cblas_dgemm) :void
  (Order CBLAS_ORDER)
  (TransA CBLAS_TRANSPOSE)
  (TransB CBLAS_TRANSPOSE)
  (M :int)
  (N :int)
  (K :int)
  (alpha :double)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :double)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_dgemm)

(cffi:defcfun ("cblas_dsymm" cblas_dsymm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (M :int)
  (N :int)
  (alpha :double)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :double)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_dsymm)

(cffi:defcfun ("cblas_dsyrk" cblas_dsyrk) :void
  (Order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (Trans CBLAS_TRANSPOSE)
  (N :int)
  (K :int)
  (alpha :double)
  (A :pointer)
  (lda :int)
  (beta :double)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_dsyrk)

(cffi:defcfun ("cblas_dsyr2k" cblas_dsyr2k) :void
  (Order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (Trans CBLAS_TRANSPOSE)
  (N :int)
  (K :int)
  (alpha :double)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :double)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_dsyr2k)

(cffi:defcfun ("cblas_dtrmm" cblas_dtrmm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (M :int)
  (N :int)
  (alpha :double)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int))

(cl:export 'cblas_dtrmm)

(cffi:defcfun ("cblas_dtrsm" cblas_dtrsm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (M :int)
  (N :int)
  (alpha :double)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int))

(cl:export 'cblas_dtrsm)

(cffi:defcfun ("cblas_cgemm" cblas_cgemm) :void
  (Order CBLAS_ORDER)
  (TransA CBLAS_TRANSPOSE)
  (TransB CBLAS_TRANSPOSE)
  (M :int)
  (N :int)
  (K :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :pointer)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_cgemm)

(cffi:defcfun ("cblas_csymm" cblas_csymm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (M :int)
  (N :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :pointer)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_csymm)

(cffi:defcfun ("cblas_csyrk" cblas_csyrk) :void
  (Order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (Trans CBLAS_TRANSPOSE)
  (N :int)
  (K :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (beta :pointer)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_csyrk)

(cffi:defcfun ("cblas_csyr2k" cblas_csyr2k) :void
  (Order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (Trans CBLAS_TRANSPOSE)
  (N :int)
  (K :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :pointer)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_csyr2k)

(cffi:defcfun ("cblas_ctrmm" cblas_ctrmm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (M :int)
  (N :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int))

(cl:export 'cblas_ctrmm)

(cffi:defcfun ("cblas_ctrsm" cblas_ctrsm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (M :int)
  (N :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int))

(cl:export 'cblas_ctrsm)

(cffi:defcfun ("cblas_zgemm" cblas_zgemm) :void
  (Order CBLAS_ORDER)
  (TransA CBLAS_TRANSPOSE)
  (TransB CBLAS_TRANSPOSE)
  (M :int)
  (N :int)
  (K :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :pointer)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_zgemm)

(cffi:defcfun ("cblas_zsymm" cblas_zsymm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (M :int)
  (N :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :pointer)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_zsymm)

(cffi:defcfun ("cblas_zsyrk" cblas_zsyrk) :void
  (Order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (Trans CBLAS_TRANSPOSE)
  (N :int)
  (K :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (beta :pointer)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_zsyrk)

(cffi:defcfun ("cblas_zsyr2k" cblas_zsyr2k) :void
  (Order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (Trans CBLAS_TRANSPOSE)
  (N :int)
  (K :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :pointer)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_zsyr2k)

(cffi:defcfun ("cblas_ztrmm" cblas_ztrmm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (M :int)
  (N :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int))

(cl:export 'cblas_ztrmm)

(cffi:defcfun ("cblas_ztrsm" cblas_ztrsm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (TransA CBLAS_TRANSPOSE)
  (Diag CBLAS_DIAG)
  (M :int)
  (N :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int))

(cl:export 'cblas_ztrsm)

(cffi:defcfun ("cblas_chemm" cblas_chemm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (M :int)
  (N :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :pointer)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_chemm)

(cffi:defcfun ("cblas_cherk" cblas_cherk) :void
  (Order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (Trans CBLAS_TRANSPOSE)
  (N :int)
  (K :int)
  (alpha :float)
  (A :pointer)
  (lda :int)
  (beta :float)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_cherk)

(cffi:defcfun ("cblas_cher2k" cblas_cher2k) :void
  (Order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (Trans CBLAS_TRANSPOSE)
  (N :int)
  (K :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :float)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_cher2k)

(cffi:defcfun ("cblas_zhemm" cblas_zhemm) :void
  (Order CBLAS_ORDER)
  (Side CBLAS_SIDE)
  (Uplo CBLAS_UPLO)
  (M :int)
  (N :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :pointer)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_zhemm)

(cffi:defcfun ("cblas_zherk" cblas_zherk) :void
  (Order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (Trans CBLAS_TRANSPOSE)
  (N :int)
  (K :int)
  (alpha :double)
  (A :pointer)
  (lda :int)
  (beta :double)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_zherk)

(cffi:defcfun ("cblas_zher2k" cblas_zher2k) :void
  (Order CBLAS_ORDER)
  (Uplo CBLAS_UPLO)
  (Trans CBLAS_TRANSPOSE)
  (N :int)
  (K :int)
  (alpha :pointer)
  (A :pointer)
  (lda :int)
  (B :pointer)
  (ldb :int)
  (beta :double)
  (C :pointer)
  (ldc :int))

(cl:export 'cblas_zher2k)

(cffi:defcfun ("cblas_xerbla" cblas_xerbla) :void
  (p :int)
  (rout :string)
  (form :string)
  &rest)

(cl:export 'cblas_xerbla)

(cffi:defcfun ("gsl_cdf_ugaussian_P" gsl_cdf_ugaussian_P) :double
  (x :double))

(cl:export 'gsl_cdf_ugaussian_P)

(cffi:defcfun ("gsl_cdf_ugaussian_Q" gsl_cdf_ugaussian_Q) :double
  (x :double))

(cl:export 'gsl_cdf_ugaussian_Q)

(cffi:defcfun ("gsl_cdf_ugaussian_Pinv" gsl_cdf_ugaussian_Pinv) :double
  (P :double))

(cl:export 'gsl_cdf_ugaussian_Pinv)

(cffi:defcfun ("gsl_cdf_ugaussian_Qinv" gsl_cdf_ugaussian_Qinv) :double
  (Q :double))

(cl:export 'gsl_cdf_ugaussian_Qinv)

(cffi:defcfun ("gsl_cdf_gaussian_P" gsl_cdf_gaussian_P) :double
  (x :double)
  (sigma :double))

(cl:export 'gsl_cdf_gaussian_P)

(cffi:defcfun ("gsl_cdf_gaussian_Q" gsl_cdf_gaussian_Q) :double
  (x :double)
  (sigma :double))

(cl:export 'gsl_cdf_gaussian_Q)

(cffi:defcfun ("gsl_cdf_gaussian_Pinv" gsl_cdf_gaussian_Pinv) :double
  (P :double)
  (sigma :double))

(cl:export 'gsl_cdf_gaussian_Pinv)

(cffi:defcfun ("gsl_cdf_gaussian_Qinv" gsl_cdf_gaussian_Qinv) :double
  (Q :double)
  (sigma :double))

(cl:export 'gsl_cdf_gaussian_Qinv)

(cffi:defcfun ("gsl_cdf_gamma_P" gsl_cdf_gamma_P) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_gamma_P)

(cffi:defcfun ("gsl_cdf_gamma_Q" gsl_cdf_gamma_Q) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_gamma_Q)

(cffi:defcfun ("gsl_cdf_gamma_Pinv" gsl_cdf_gamma_Pinv) :double
  (P :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_gamma_Pinv)

(cffi:defcfun ("gsl_cdf_gamma_Qinv" gsl_cdf_gamma_Qinv) :double
  (Q :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_gamma_Qinv)

(cffi:defcfun ("gsl_cdf_cauchy_P" gsl_cdf_cauchy_P) :double
  (x :double)
  (a :double))

(cl:export 'gsl_cdf_cauchy_P)

(cffi:defcfun ("gsl_cdf_cauchy_Q" gsl_cdf_cauchy_Q) :double
  (x :double)
  (a :double))

(cl:export 'gsl_cdf_cauchy_Q)

(cffi:defcfun ("gsl_cdf_cauchy_Pinv" gsl_cdf_cauchy_Pinv) :double
  (P :double)
  (a :double))

(cl:export 'gsl_cdf_cauchy_Pinv)

(cffi:defcfun ("gsl_cdf_cauchy_Qinv" gsl_cdf_cauchy_Qinv) :double
  (Q :double)
  (a :double))

(cl:export 'gsl_cdf_cauchy_Qinv)

(cffi:defcfun ("gsl_cdf_laplace_P" gsl_cdf_laplace_P) :double
  (x :double)
  (a :double))

(cl:export 'gsl_cdf_laplace_P)

(cffi:defcfun ("gsl_cdf_laplace_Q" gsl_cdf_laplace_Q) :double
  (x :double)
  (a :double))

(cl:export 'gsl_cdf_laplace_Q)

(cffi:defcfun ("gsl_cdf_laplace_Pinv" gsl_cdf_laplace_Pinv) :double
  (P :double)
  (a :double))

(cl:export 'gsl_cdf_laplace_Pinv)

(cffi:defcfun ("gsl_cdf_laplace_Qinv" gsl_cdf_laplace_Qinv) :double
  (Q :double)
  (a :double))

(cl:export 'gsl_cdf_laplace_Qinv)

(cffi:defcfun ("gsl_cdf_rayleigh_P" gsl_cdf_rayleigh_P) :double
  (x :double)
  (sigma :double))

(cl:export 'gsl_cdf_rayleigh_P)

(cffi:defcfun ("gsl_cdf_rayleigh_Q" gsl_cdf_rayleigh_Q) :double
  (x :double)
  (sigma :double))

(cl:export 'gsl_cdf_rayleigh_Q)

(cffi:defcfun ("gsl_cdf_rayleigh_Pinv" gsl_cdf_rayleigh_Pinv) :double
  (P :double)
  (sigma :double))

(cl:export 'gsl_cdf_rayleigh_Pinv)

(cffi:defcfun ("gsl_cdf_rayleigh_Qinv" gsl_cdf_rayleigh_Qinv) :double
  (Q :double)
  (sigma :double))

(cl:export 'gsl_cdf_rayleigh_Qinv)

(cffi:defcfun ("gsl_cdf_chisq_P" gsl_cdf_chisq_P) :double
  (x :double)
  (nu :double))

(cl:export 'gsl_cdf_chisq_P)

(cffi:defcfun ("gsl_cdf_chisq_Q" gsl_cdf_chisq_Q) :double
  (x :double)
  (nu :double))

(cl:export 'gsl_cdf_chisq_Q)

(cffi:defcfun ("gsl_cdf_chisq_Pinv" gsl_cdf_chisq_Pinv) :double
  (P :double)
  (nu :double))

(cl:export 'gsl_cdf_chisq_Pinv)

(cffi:defcfun ("gsl_cdf_chisq_Qinv" gsl_cdf_chisq_Qinv) :double
  (Q :double)
  (nu :double))

(cl:export 'gsl_cdf_chisq_Qinv)

(cffi:defcfun ("gsl_cdf_exponential_P" gsl_cdf_exponential_P) :double
  (x :double)
  (mu :double))

(cl:export 'gsl_cdf_exponential_P)

(cffi:defcfun ("gsl_cdf_exponential_Q" gsl_cdf_exponential_Q) :double
  (x :double)
  (mu :double))

(cl:export 'gsl_cdf_exponential_Q)

(cffi:defcfun ("gsl_cdf_exponential_Pinv" gsl_cdf_exponential_Pinv) :double
  (P :double)
  (mu :double))

(cl:export 'gsl_cdf_exponential_Pinv)

(cffi:defcfun ("gsl_cdf_exponential_Qinv" gsl_cdf_exponential_Qinv) :double
  (Q :double)
  (mu :double))

(cl:export 'gsl_cdf_exponential_Qinv)

(cffi:defcfun ("gsl_cdf_exppow_P" gsl_cdf_exppow_P) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_exppow_P)

(cffi:defcfun ("gsl_cdf_exppow_Q" gsl_cdf_exppow_Q) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_exppow_Q)

(cffi:defcfun ("gsl_cdf_tdist_P" gsl_cdf_tdist_P) :double
  (x :double)
  (nu :double))

(cl:export 'gsl_cdf_tdist_P)

(cffi:defcfun ("gsl_cdf_tdist_Q" gsl_cdf_tdist_Q) :double
  (x :double)
  (nu :double))

(cl:export 'gsl_cdf_tdist_Q)

(cffi:defcfun ("gsl_cdf_tdist_Pinv" gsl_cdf_tdist_Pinv) :double
  (P :double)
  (nu :double))

(cl:export 'gsl_cdf_tdist_Pinv)

(cffi:defcfun ("gsl_cdf_tdist_Qinv" gsl_cdf_tdist_Qinv) :double
  (Q :double)
  (nu :double))

(cl:export 'gsl_cdf_tdist_Qinv)

(cffi:defcfun ("gsl_cdf_fdist_P" gsl_cdf_fdist_P) :double
  (x :double)
  (nu1 :double)
  (nu2 :double))

(cl:export 'gsl_cdf_fdist_P)

(cffi:defcfun ("gsl_cdf_fdist_Q" gsl_cdf_fdist_Q) :double
  (x :double)
  (nu1 :double)
  (nu2 :double))

(cl:export 'gsl_cdf_fdist_Q)

(cffi:defcfun ("gsl_cdf_fdist_Pinv" gsl_cdf_fdist_Pinv) :double
  (P :double)
  (nu1 :double)
  (nu2 :double))

(cl:export 'gsl_cdf_fdist_Pinv)

(cffi:defcfun ("gsl_cdf_fdist_Qinv" gsl_cdf_fdist_Qinv) :double
  (Q :double)
  (nu1 :double)
  (nu2 :double))

(cl:export 'gsl_cdf_fdist_Qinv)

(cffi:defcfun ("gsl_cdf_beta_P" gsl_cdf_beta_P) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_beta_P)

(cffi:defcfun ("gsl_cdf_beta_Q" gsl_cdf_beta_Q) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_beta_Q)

(cffi:defcfun ("gsl_cdf_beta_Pinv" gsl_cdf_beta_Pinv) :double
  (P :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_beta_Pinv)

(cffi:defcfun ("gsl_cdf_beta_Qinv" gsl_cdf_beta_Qinv) :double
  (Q :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_beta_Qinv)

(cffi:defcfun ("gsl_cdf_flat_P" gsl_cdf_flat_P) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_flat_P)

(cffi:defcfun ("gsl_cdf_flat_Q" gsl_cdf_flat_Q) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_flat_Q)

(cffi:defcfun ("gsl_cdf_flat_Pinv" gsl_cdf_flat_Pinv) :double
  (P :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_flat_Pinv)

(cffi:defcfun ("gsl_cdf_flat_Qinv" gsl_cdf_flat_Qinv) :double
  (Q :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_flat_Qinv)

(cffi:defcfun ("gsl_cdf_lognormal_P" gsl_cdf_lognormal_P) :double
  (x :double)
  (zeta :double)
  (sigma :double))

(cl:export 'gsl_cdf_lognormal_P)

(cffi:defcfun ("gsl_cdf_lognormal_Q" gsl_cdf_lognormal_Q) :double
  (x :double)
  (zeta :double)
  (sigma :double))

(cl:export 'gsl_cdf_lognormal_Q)

(cffi:defcfun ("gsl_cdf_lognormal_Pinv" gsl_cdf_lognormal_Pinv) :double
  (P :double)
  (zeta :double)
  (sigma :double))

(cl:export 'gsl_cdf_lognormal_Pinv)

(cffi:defcfun ("gsl_cdf_lognormal_Qinv" gsl_cdf_lognormal_Qinv) :double
  (Q :double)
  (zeta :double)
  (sigma :double))

(cl:export 'gsl_cdf_lognormal_Qinv)

(cffi:defcfun ("gsl_cdf_gumbel1_P" gsl_cdf_gumbel1_P) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_gumbel1_P)

(cffi:defcfun ("gsl_cdf_gumbel1_Q" gsl_cdf_gumbel1_Q) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_gumbel1_Q)

(cffi:defcfun ("gsl_cdf_gumbel1_Pinv" gsl_cdf_gumbel1_Pinv) :double
  (P :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_gumbel1_Pinv)

(cffi:defcfun ("gsl_cdf_gumbel1_Qinv" gsl_cdf_gumbel1_Qinv) :double
  (Q :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_gumbel1_Qinv)

(cffi:defcfun ("gsl_cdf_gumbel2_P" gsl_cdf_gumbel2_P) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_gumbel2_P)

(cffi:defcfun ("gsl_cdf_gumbel2_Q" gsl_cdf_gumbel2_Q) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_gumbel2_Q)

(cffi:defcfun ("gsl_cdf_gumbel2_Pinv" gsl_cdf_gumbel2_Pinv) :double
  (P :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_gumbel2_Pinv)

(cffi:defcfun ("gsl_cdf_gumbel2_Qinv" gsl_cdf_gumbel2_Qinv) :double
  (Q :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_gumbel2_Qinv)

(cffi:defcfun ("gsl_cdf_weibull_P" gsl_cdf_weibull_P) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_weibull_P)

(cffi:defcfun ("gsl_cdf_weibull_Q" gsl_cdf_weibull_Q) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_weibull_Q)

(cffi:defcfun ("gsl_cdf_weibull_Pinv" gsl_cdf_weibull_Pinv) :double
  (P :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_weibull_Pinv)

(cffi:defcfun ("gsl_cdf_weibull_Qinv" gsl_cdf_weibull_Qinv) :double
  (Q :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_weibull_Qinv)

(cffi:defcfun ("gsl_cdf_pareto_P" gsl_cdf_pareto_P) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_pareto_P)

(cffi:defcfun ("gsl_cdf_pareto_Q" gsl_cdf_pareto_Q) :double
  (x :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_pareto_Q)

(cffi:defcfun ("gsl_cdf_pareto_Pinv" gsl_cdf_pareto_Pinv) :double
  (P :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_pareto_Pinv)

(cffi:defcfun ("gsl_cdf_pareto_Qinv" gsl_cdf_pareto_Qinv) :double
  (Q :double)
  (a :double)
  (b :double))

(cl:export 'gsl_cdf_pareto_Qinv)

(cffi:defcfun ("gsl_cdf_logistic_P" gsl_cdf_logistic_P) :double
  (x :double)
  (a :double))

(cl:export 'gsl_cdf_logistic_P)

(cffi:defcfun ("gsl_cdf_logistic_Q" gsl_cdf_logistic_Q) :double
  (x :double)
  (a :double))

(cl:export 'gsl_cdf_logistic_Q)

(cffi:defcfun ("gsl_cdf_logistic_Pinv" gsl_cdf_logistic_Pinv) :double
  (P :double)
  (a :double))

(cl:export 'gsl_cdf_logistic_Pinv)

(cffi:defcfun ("gsl_cdf_logistic_Qinv" gsl_cdf_logistic_Qinv) :double
  (Q :double)
  (a :double))

(cl:export 'gsl_cdf_logistic_Qinv)

(cffi:defcfun ("gsl_cdf_binomial_P" gsl_cdf_binomial_P) :double
  (k :unsigned-int)
  (p :double)
  (n :unsigned-int))

(cl:export 'gsl_cdf_binomial_P)

(cffi:defcfun ("gsl_cdf_binomial_Q" gsl_cdf_binomial_Q) :double
  (k :unsigned-int)
  (p :double)
  (n :unsigned-int))

(cl:export 'gsl_cdf_binomial_Q)

(cffi:defcfun ("gsl_cdf_poisson_P" gsl_cdf_poisson_P) :double
  (k :unsigned-int)
  (mu :double))

(cl:export 'gsl_cdf_poisson_P)

(cffi:defcfun ("gsl_cdf_poisson_Q" gsl_cdf_poisson_Q) :double
  (k :unsigned-int)
  (mu :double))

(cl:export 'gsl_cdf_poisson_Q)

(cffi:defcfun ("gsl_cdf_geometric_P" gsl_cdf_geometric_P) :double
  (k :unsigned-int)
  (p :double))

(cl:export 'gsl_cdf_geometric_P)

(cffi:defcfun ("gsl_cdf_geometric_Q" gsl_cdf_geometric_Q) :double
  (k :unsigned-int)
  (p :double))

(cl:export 'gsl_cdf_geometric_Q)

(cffi:defcfun ("gsl_cdf_negative_binomial_P" gsl_cdf_negative_binomial_P) :double
  (k :unsigned-int)
  (p :double)
  (n :double))

(cl:export 'gsl_cdf_negative_binomial_P)

(cffi:defcfun ("gsl_cdf_negative_binomial_Q" gsl_cdf_negative_binomial_Q) :double
  (k :unsigned-int)
  (p :double)
  (n :double))

(cl:export 'gsl_cdf_negative_binomial_Q)

(cffi:defcfun ("gsl_cdf_pascal_P" gsl_cdf_pascal_P) :double
  (k :unsigned-int)
  (p :double)
  (n :unsigned-int))

(cl:export 'gsl_cdf_pascal_P)

(cffi:defcfun ("gsl_cdf_pascal_Q" gsl_cdf_pascal_Q) :double
  (k :unsigned-int)
  (p :double)
  (n :unsigned-int))

(cl:export 'gsl_cdf_pascal_Q)

(cffi:defcfun ("gsl_cdf_hypergeometric_P" gsl_cdf_hypergeometric_P) :double
  (k :unsigned-int)
  (n1 :unsigned-int)
  (n2 :unsigned-int)
  (t_arg3 :unsigned-int))

(cl:export 'gsl_cdf_hypergeometric_P)

(cffi:defcfun ("gsl_cdf_hypergeometric_Q" gsl_cdf_hypergeometric_Q) :double
  (k :unsigned-int)
  (n1 :unsigned-int)
  (n2 :unsigned-int)
  (t_arg3 :unsigned-int))

(cl:export 'gsl_cdf_hypergeometric_Q)

(cffi:defcstruct gsl_cheb_series_struct
	(c :pointer)
	(order :pointer)
	(a :double)
	(b :double)
	(order_sp :pointer)
	(f :pointer))

(cl:export 'gsl_cheb_series_struct)

(cl:export 'c)

(cl:export 'order)

(cl:export 'a)

(cl:export 'b)

(cl:export 'order_sp)

(cl:export 'f)

(cffi:defcfun ("gsl_cheb_alloc" gsl_cheb_alloc) :pointer
  (order :pointer))

(cl:export 'gsl_cheb_alloc)

(cffi:defcfun ("gsl_cheb_free" gsl_cheb_free) :void
  (cs :pointer))

(cl:export 'gsl_cheb_free)

(cffi:defcfun ("gsl_cheb_init" gsl_cheb_init) :int
  (cs :pointer)
  (func :pointer)
  (a :double)
  (b :double))

(cl:export 'gsl_cheb_init)

(cffi:defcfun ("gsl_cheb_order" gsl_cheb_order) :pointer
  (cs :pointer))

(cl:export 'gsl_cheb_order)

(cffi:defcfun ("gsl_cheb_size" gsl_cheb_size) :pointer
  (cs :pointer))

(cl:export 'gsl_cheb_size)

(cffi:defcfun ("gsl_cheb_coeffs" gsl_cheb_coeffs) :pointer
  (cs :pointer))

(cl:export 'gsl_cheb_coeffs)

(cffi:defcfun ("gsl_cheb_eval" gsl_cheb_eval) :double
  (cs :pointer)
  (x :double))

(cl:export 'gsl_cheb_eval)

(cffi:defcfun ("gsl_cheb_eval_err" gsl_cheb_eval_err) :int
  (cs :pointer)
  (x :double)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_cheb_eval_err)

(cffi:defcfun ("gsl_cheb_eval_n" gsl_cheb_eval_n) :double
  (cs :pointer)
  (order :pointer)
  (x :double))

(cl:export 'gsl_cheb_eval_n)

(cffi:defcfun ("gsl_cheb_eval_n_err" gsl_cheb_eval_n_err) :int
  (cs :pointer)
  (order :pointer)
  (x :double)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_cheb_eval_n_err)

(cffi:defcfun ("gsl_cheb_eval_mode" gsl_cheb_eval_mode) :double
  (cs :pointer)
  (x :double)
  (mode :unsigned-int))

(cl:export 'gsl_cheb_eval_mode)

(cffi:defcfun ("gsl_cheb_eval_mode_e" gsl_cheb_eval_mode_e) :int
  (cs :pointer)
  (x :double)
  (mode :unsigned-int)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_cheb_eval_mode_e)

(cffi:defcfun ("gsl_cheb_calc_deriv" gsl_cheb_calc_deriv) :int
  (deriv :pointer)
  (cs :pointer))

(cl:export 'gsl_cheb_calc_deriv)

(cffi:defcfun ("gsl_cheb_calc_integ" gsl_cheb_calc_integ) :int
  (integ :pointer)
  (cs :pointer))

(cl:export 'gsl_cheb_calc_integ)

(cffi:defcstruct gsl_combination_struct
	(n :pointer)
	(k :pointer)
	(data :pointer))

(cl:export 'gsl_combination_struct)

(cl:export 'n)

(cl:export 'k)

(cl:export 'data)

(cffi:defcfun ("gsl_combination_alloc" gsl_combination_alloc) :pointer
  (n :pointer)
  (k :pointer))

(cl:export 'gsl_combination_alloc)

(cffi:defcfun ("gsl_combination_calloc" gsl_combination_calloc) :pointer
  (n :pointer)
  (k :pointer))

(cl:export 'gsl_combination_calloc)

(cffi:defcfun ("gsl_combination_init_first" gsl_combination_init_first) :void
  (c :pointer))

(cl:export 'gsl_combination_init_first)

(cffi:defcfun ("gsl_combination_init_last" gsl_combination_init_last) :void
  (c :pointer))

(cl:export 'gsl_combination_init_last)

(cffi:defcfun ("gsl_combination_free" gsl_combination_free) :void
  (c :pointer))

(cl:export 'gsl_combination_free)

(cffi:defcfun ("gsl_combination_memcpy" gsl_combination_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_combination_memcpy)

(cffi:defcfun ("gsl_combination_fread" gsl_combination_fread) :int
  (stream :pointer)
  (c :pointer))

(cl:export 'gsl_combination_fread)

(cffi:defcfun ("gsl_combination_fwrite" gsl_combination_fwrite) :int
  (stream :pointer)
  (c :pointer))

(cl:export 'gsl_combination_fwrite)

(cffi:defcfun ("gsl_combination_fscanf" gsl_combination_fscanf) :int
  (stream :pointer)
  (c :pointer))

(cl:export 'gsl_combination_fscanf)

(cffi:defcfun ("gsl_combination_fprintf" gsl_combination_fprintf) :int
  (stream :pointer)
  (c :pointer)
  (format :string))

(cl:export 'gsl_combination_fprintf)

(cffi:defcfun ("gsl_combination_n" gsl_combination_n) :pointer
  (c :pointer))

(cl:export 'gsl_combination_n)

(cffi:defcfun ("gsl_combination_k" gsl_combination_k) :pointer
  (c :pointer))

(cl:export 'gsl_combination_k)

(cffi:defcfun ("gsl_combination_data" gsl_combination_data) :pointer
  (c :pointer))

(cl:export 'gsl_combination_data)

(cffi:defcfun ("gsl_combination_valid" gsl_combination_valid) :int
  (c :pointer))

(cl:export 'gsl_combination_valid)

(cffi:defcfun ("gsl_combination_next" gsl_combination_next) :int
  (c :pointer))

(cl:export 'gsl_combination_next)

(cffi:defcfun ("gsl_combination_prev" gsl_combination_prev) :int
  (c :pointer))

(cl:export 'gsl_combination_prev)

(cffi:defcfun ("gsl_combination_get" gsl_combination_get) :pointer
  (c :pointer)
  (i :pointer))

(cl:export 'gsl_combination_get)

(cffi:defcstruct gsl_complex_long_double
	(dat :pointer))

(cl:export 'gsl_complex_long_double)

(cl:export 'dat)

(cffi:defcstruct gsl_complex
	(dat :pointer))

(cl:export 'gsl_complex)

(cl:export 'dat)

(cffi:defcstruct gsl_complex_float
	(dat :pointer))

(cl:export 'gsl_complex_float)

(cl:export 'dat)

(cffi:defcfun ("gsl_complex_polar" gsl_complex_polar) gsl_complex
  (r :double)
  (theta :double))

(cl:export 'gsl_complex_polar)

(cffi:defcfun ("gsl_complex_rect" gsl_complex_rect) gsl_complex
  (x :double)
  (y :double))

(cl:export 'gsl_complex_rect)

(cffi:defcfun ("gsl_complex_arg" gsl_complex_arg) :double
  (z gsl_complex))

(cl:export 'gsl_complex_arg)

(cffi:defcfun ("gsl_complex_abs" gsl_complex_abs) :double
  (z gsl_complex))

(cl:export 'gsl_complex_abs)

(cffi:defcfun ("gsl_complex_abs2" gsl_complex_abs2) :double
  (z gsl_complex))

(cl:export 'gsl_complex_abs2)

(cffi:defcfun ("gsl_complex_logabs" gsl_complex_logabs) :double
  (z gsl_complex))

(cl:export 'gsl_complex_logabs)

(cffi:defcfun ("gsl_complex_add" gsl_complex_add) gsl_complex
  (a gsl_complex)
  (b gsl_complex))

(cl:export 'gsl_complex_add)

(cffi:defcfun ("gsl_complex_sub" gsl_complex_sub) gsl_complex
  (a gsl_complex)
  (b gsl_complex))

(cl:export 'gsl_complex_sub)

(cffi:defcfun ("gsl_complex_mul" gsl_complex_mul) gsl_complex
  (a gsl_complex)
  (b gsl_complex))

(cl:export 'gsl_complex_mul)

(cffi:defcfun ("gsl_complex_div" gsl_complex_div) gsl_complex
  (a gsl_complex)
  (b gsl_complex))

(cl:export 'gsl_complex_div)

(cffi:defcfun ("gsl_complex_add_real" gsl_complex_add_real) gsl_complex
  (a gsl_complex)
  (x :double))

(cl:export 'gsl_complex_add_real)

(cffi:defcfun ("gsl_complex_sub_real" gsl_complex_sub_real) gsl_complex
  (a gsl_complex)
  (x :double))

(cl:export 'gsl_complex_sub_real)

(cffi:defcfun ("gsl_complex_mul_real" gsl_complex_mul_real) gsl_complex
  (a gsl_complex)
  (x :double))

(cl:export 'gsl_complex_mul_real)

(cffi:defcfun ("gsl_complex_div_real" gsl_complex_div_real) gsl_complex
  (a gsl_complex)
  (x :double))

(cl:export 'gsl_complex_div_real)

(cffi:defcfun ("gsl_complex_add_imag" gsl_complex_add_imag) gsl_complex
  (a gsl_complex)
  (y :double))

(cl:export 'gsl_complex_add_imag)

(cffi:defcfun ("gsl_complex_sub_imag" gsl_complex_sub_imag) gsl_complex
  (a gsl_complex)
  (y :double))

(cl:export 'gsl_complex_sub_imag)

(cffi:defcfun ("gsl_complex_mul_imag" gsl_complex_mul_imag) gsl_complex
  (a gsl_complex)
  (y :double))

(cl:export 'gsl_complex_mul_imag)

(cffi:defcfun ("gsl_complex_div_imag" gsl_complex_div_imag) gsl_complex
  (a gsl_complex)
  (y :double))

(cl:export 'gsl_complex_div_imag)

(cffi:defcfun ("gsl_complex_conjugate" gsl_complex_conjugate) gsl_complex
  (z gsl_complex))

(cl:export 'gsl_complex_conjugate)

(cffi:defcfun ("gsl_complex_inverse" gsl_complex_inverse) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_inverse)

(cffi:defcfun ("gsl_complex_negative" gsl_complex_negative) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_negative)

(cffi:defcfun ("gsl_complex_sqrt" gsl_complex_sqrt) gsl_complex
  (z gsl_complex))

(cl:export 'gsl_complex_sqrt)

(cffi:defcfun ("gsl_complex_sqrt_real" gsl_complex_sqrt_real) gsl_complex
  (x :double))

(cl:export 'gsl_complex_sqrt_real)

(cffi:defcfun ("gsl_complex_pow" gsl_complex_pow) gsl_complex
  (a gsl_complex)
  (b gsl_complex))

(cl:export 'gsl_complex_pow)

(cffi:defcfun ("gsl_complex_pow_real" gsl_complex_pow_real) gsl_complex
  (a gsl_complex)
  (b :double))

(cl:export 'gsl_complex_pow_real)

(cffi:defcfun ("gsl_complex_exp" gsl_complex_exp) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_exp)

(cffi:defcfun ("gsl_complex_log" gsl_complex_log) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_log)

(cffi:defcfun ("gsl_complex_log10" gsl_complex_log10) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_log10)

(cffi:defcfun ("gsl_complex_log_b" gsl_complex_log_b) gsl_complex
  (a gsl_complex)
  (b gsl_complex))

(cl:export 'gsl_complex_log_b)

(cffi:defcfun ("gsl_complex_sin" gsl_complex_sin) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_sin)

(cffi:defcfun ("gsl_complex_cos" gsl_complex_cos) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_cos)

(cffi:defcfun ("gsl_complex_sec" gsl_complex_sec) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_sec)

(cffi:defcfun ("gsl_complex_csc" gsl_complex_csc) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_csc)

(cffi:defcfun ("gsl_complex_tan" gsl_complex_tan) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_tan)

(cffi:defcfun ("gsl_complex_cot" gsl_complex_cot) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_cot)

(cffi:defcfun ("gsl_complex_arcsin" gsl_complex_arcsin) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_arcsin)

(cffi:defcfun ("gsl_complex_arcsin_real" gsl_complex_arcsin_real) gsl_complex
  (a :double))

(cl:export 'gsl_complex_arcsin_real)

(cffi:defcfun ("gsl_complex_arccos" gsl_complex_arccos) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_arccos)

(cffi:defcfun ("gsl_complex_arccos_real" gsl_complex_arccos_real) gsl_complex
  (a :double))

(cl:export 'gsl_complex_arccos_real)

(cffi:defcfun ("gsl_complex_arcsec" gsl_complex_arcsec) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_arcsec)

(cffi:defcfun ("gsl_complex_arcsec_real" gsl_complex_arcsec_real) gsl_complex
  (a :double))

(cl:export 'gsl_complex_arcsec_real)

(cffi:defcfun ("gsl_complex_arccsc" gsl_complex_arccsc) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_arccsc)

(cffi:defcfun ("gsl_complex_arccsc_real" gsl_complex_arccsc_real) gsl_complex
  (a :double))

(cl:export 'gsl_complex_arccsc_real)

(cffi:defcfun ("gsl_complex_arctan" gsl_complex_arctan) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_arctan)

(cffi:defcfun ("gsl_complex_arccot" gsl_complex_arccot) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_arccot)

(cffi:defcfun ("gsl_complex_sinh" gsl_complex_sinh) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_sinh)

(cffi:defcfun ("gsl_complex_cosh" gsl_complex_cosh) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_cosh)

(cffi:defcfun ("gsl_complex_sech" gsl_complex_sech) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_sech)

(cffi:defcfun ("gsl_complex_csch" gsl_complex_csch) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_csch)

(cffi:defcfun ("gsl_complex_tanh" gsl_complex_tanh) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_tanh)

(cffi:defcfun ("gsl_complex_coth" gsl_complex_coth) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_coth)

(cffi:defcfun ("gsl_complex_arcsinh" gsl_complex_arcsinh) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_arcsinh)

(cffi:defcfun ("gsl_complex_arccosh" gsl_complex_arccosh) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_arccosh)

(cffi:defcfun ("gsl_complex_arccosh_real" gsl_complex_arccosh_real) gsl_complex
  (a :double))

(cl:export 'gsl_complex_arccosh_real)

(cffi:defcfun ("gsl_complex_arcsech" gsl_complex_arcsech) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_arcsech)

(cffi:defcfun ("gsl_complex_arccsch" gsl_complex_arccsch) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_arccsch)

(cffi:defcfun ("gsl_complex_arctanh" gsl_complex_arctanh) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_arctanh)

(cffi:defcfun ("gsl_complex_arctanh_real" gsl_complex_arctanh_real) gsl_complex
  (a :double))

(cl:export 'gsl_complex_arctanh_real)

(cffi:defcfun ("gsl_complex_arccoth" gsl_complex_arccoth) gsl_complex
  (a gsl_complex))

(cl:export 'gsl_complex_arccoth)

(cl:defconstant GSL_CONST_CGS_SPEED_OF_LIGHT 2.99792458d10)

(cl:export 'GSL_CONST_CGS_SPEED_OF_LIGHT)

(cl:defconstant GSL_CONST_CGS_GRAVITATIONAL_CONSTANT 6.673d-8)

(cl:export 'GSL_CONST_CGS_GRAVITATIONAL_CONSTANT)

(cl:defconstant GSL_CONST_CGS_PLANCKS_CONSTANT_H 6.62606896d-27)

(cl:export 'GSL_CONST_CGS_PLANCKS_CONSTANT_H)

(cl:defconstant GSL_CONST_CGS_PLANCKS_CONSTANT_HBAR 1.05457162825d-27)

(cl:export 'GSL_CONST_CGS_PLANCKS_CONSTANT_HBAR)

(cl:defconstant GSL_CONST_CGS_ASTRONOMICAL_UNIT 1.49597870691d13)

(cl:export 'GSL_CONST_CGS_ASTRONOMICAL_UNIT)

(cl:defconstant GSL_CONST_CGS_LIGHT_YEAR 9.46053620707d17)

(cl:export 'GSL_CONST_CGS_LIGHT_YEAR)

(cl:defconstant GSL_CONST_CGS_PARSEC 3.08567758135d18)

(cl:export 'GSL_CONST_CGS_PARSEC)

(cl:defconstant GSL_CONST_CGS_GRAV_ACCEL 9.80665d2)

(cl:export 'GSL_CONST_CGS_GRAV_ACCEL)

(cl:defconstant GSL_CONST_CGS_ELECTRON_VOLT 1.602176487d-12)

(cl:export 'GSL_CONST_CGS_ELECTRON_VOLT)

(cl:defconstant GSL_CONST_CGS_MASS_ELECTRON 9.10938188d-28)

(cl:export 'GSL_CONST_CGS_MASS_ELECTRON)

(cl:defconstant GSL_CONST_CGS_MASS_MUON 1.88353109d-25)

(cl:export 'GSL_CONST_CGS_MASS_MUON)

(cl:defconstant GSL_CONST_CGS_MASS_PROTON 1.67262158d-24)

(cl:export 'GSL_CONST_CGS_MASS_PROTON)

(cl:defconstant GSL_CONST_CGS_MASS_NEUTRON 1.67492716d-24)

(cl:export 'GSL_CONST_CGS_MASS_NEUTRON)

(cl:defconstant GSL_CONST_CGS_RYDBERG 2.17987196968d-11)

(cl:export 'GSL_CONST_CGS_RYDBERG)

(cl:defconstant GSL_CONST_CGS_BOLTZMANN 1.3806504d-16)

(cl:export 'GSL_CONST_CGS_BOLTZMANN)

(cl:defconstant GSL_CONST_CGS_MOLAR_GAS 8.314472d7)

(cl:export 'GSL_CONST_CGS_MOLAR_GAS)

(cl:defconstant GSL_CONST_CGS_STANDARD_GAS_VOLUME 2.2710981d4)

(cl:export 'GSL_CONST_CGS_STANDARD_GAS_VOLUME)

(cl:defconstant GSL_CONST_CGS_MINUTE 6d1)

(cl:export 'GSL_CONST_CGS_MINUTE)

(cl:defconstant GSL_CONST_CGS_HOUR 3.6d3)

(cl:export 'GSL_CONST_CGS_HOUR)

(cl:defconstant GSL_CONST_CGS_DAY 8.64d4)

(cl:export 'GSL_CONST_CGS_DAY)

(cl:defconstant GSL_CONST_CGS_WEEK 6.048d5)

(cl:export 'GSL_CONST_CGS_WEEK)

(cl:defconstant GSL_CONST_CGS_INCH 2.54d0)

(cl:export 'GSL_CONST_CGS_INCH)

(cl:defconstant GSL_CONST_CGS_FOOT 3.048d1)

(cl:export 'GSL_CONST_CGS_FOOT)

(cl:defconstant GSL_CONST_CGS_YARD 9.144d1)

(cl:export 'GSL_CONST_CGS_YARD)

(cl:defconstant GSL_CONST_CGS_MILE 1.609344d5)

(cl:export 'GSL_CONST_CGS_MILE)

(cl:defconstant GSL_CONST_CGS_NAUTICAL_MILE 1.852d5)

(cl:export 'GSL_CONST_CGS_NAUTICAL_MILE)

(cl:defconstant GSL_CONST_CGS_FATHOM 1.8288d2)

(cl:export 'GSL_CONST_CGS_FATHOM)

(cl:defconstant GSL_CONST_CGS_MIL 2.54d-3)

(cl:export 'GSL_CONST_CGS_MIL)

(cl:defconstant GSL_CONST_CGS_POINT 3.52777777778d-2)

(cl:export 'GSL_CONST_CGS_POINT)

(cl:defconstant GSL_CONST_CGS_TEXPOINT 3.51459803515d-2)

(cl:export 'GSL_CONST_CGS_TEXPOINT)

(cl:defconstant GSL_CONST_CGS_MICRON 1d-4)

(cl:export 'GSL_CONST_CGS_MICRON)

(cl:defconstant GSL_CONST_CGS_ANGSTROM 1d-8)

(cl:export 'GSL_CONST_CGS_ANGSTROM)

(cl:defconstant GSL_CONST_CGS_HECTARE 1d8)

(cl:export 'GSL_CONST_CGS_HECTARE)

(cl:defconstant GSL_CONST_CGS_ACRE 4.04685642241d7)

(cl:export 'GSL_CONST_CGS_ACRE)

(cl:defconstant GSL_CONST_CGS_BARN 1d-24)

(cl:export 'GSL_CONST_CGS_BARN)

(cl:defconstant GSL_CONST_CGS_LITER 1d3)

(cl:export 'GSL_CONST_CGS_LITER)

(cl:defconstant GSL_CONST_CGS_US_GALLON 3.78541178402d3)

(cl:export 'GSL_CONST_CGS_US_GALLON)

(cl:defconstant GSL_CONST_CGS_QUART 9.46352946004d2)

(cl:export 'GSL_CONST_CGS_QUART)

(cl:defconstant GSL_CONST_CGS_PINT 4.73176473002d2)

(cl:export 'GSL_CONST_CGS_PINT)

(cl:defconstant GSL_CONST_CGS_CUP 2.36588236501d2)

(cl:export 'GSL_CONST_CGS_CUP)

(cl:defconstant GSL_CONST_CGS_FLUID_OUNCE 2.95735295626d1)

(cl:export 'GSL_CONST_CGS_FLUID_OUNCE)

(cl:defconstant GSL_CONST_CGS_TABLESPOON 1.47867647813d1)

(cl:export 'GSL_CONST_CGS_TABLESPOON)

(cl:defconstant GSL_CONST_CGS_TEASPOON 4.92892159375d0)

(cl:export 'GSL_CONST_CGS_TEASPOON)

(cl:defconstant GSL_CONST_CGS_CANADIAN_GALLON 4.54609d3)

(cl:export 'GSL_CONST_CGS_CANADIAN_GALLON)

(cl:defconstant GSL_CONST_CGS_UK_GALLON 4.546092d3)

(cl:export 'GSL_CONST_CGS_UK_GALLON)

(cl:defconstant GSL_CONST_CGS_MILES_PER_HOUR 4.4704d1)

(cl:export 'GSL_CONST_CGS_MILES_PER_HOUR)

(cl:defconstant GSL_CONST_CGS_KILOMETERS_PER_HOUR 2.77777777778d1)

(cl:export 'GSL_CONST_CGS_KILOMETERS_PER_HOUR)

(cl:defconstant GSL_CONST_CGS_KNOT 5.14444444444d1)

(cl:export 'GSL_CONST_CGS_KNOT)

(cl:defconstant GSL_CONST_CGS_POUND_MASS 4.5359237d2)

(cl:export 'GSL_CONST_CGS_POUND_MASS)

(cl:defconstant GSL_CONST_CGS_OUNCE_MASS 2.8349523125d1)

(cl:export 'GSL_CONST_CGS_OUNCE_MASS)

(cl:defconstant GSL_CONST_CGS_TON 9.0718474d5)

(cl:export 'GSL_CONST_CGS_TON)

(cl:defconstant GSL_CONST_CGS_METRIC_TON 1d6)

(cl:export 'GSL_CONST_CGS_METRIC_TON)

(cl:defconstant GSL_CONST_CGS_UK_TON 1.0160469088d6)

(cl:export 'GSL_CONST_CGS_UK_TON)

(cl:defconstant GSL_CONST_CGS_TROY_OUNCE 3.1103475d1)

(cl:export 'GSL_CONST_CGS_TROY_OUNCE)

(cl:defconstant GSL_CONST_CGS_CARAT 2d-1)

(cl:export 'GSL_CONST_CGS_CARAT)

(cl:defconstant GSL_CONST_CGS_UNIFIED_ATOMIC_MASS 1.660538782d-24)

(cl:export 'GSL_CONST_CGS_UNIFIED_ATOMIC_MASS)

(cl:defconstant GSL_CONST_CGS_GRAM_FORCE 9.80665d2)

(cl:export 'GSL_CONST_CGS_GRAM_FORCE)

(cl:defconstant GSL_CONST_CGS_POUND_FORCE 4.44822161526d5)

(cl:export 'GSL_CONST_CGS_POUND_FORCE)

(cl:defconstant GSL_CONST_CGS_KILOPOUND_FORCE 4.44822161526d8)

(cl:export 'GSL_CONST_CGS_KILOPOUND_FORCE)

(cl:defconstant GSL_CONST_CGS_POUNDAL 1.38255d4)

(cl:export 'GSL_CONST_CGS_POUNDAL)

(cl:defconstant GSL_CONST_CGS_CALORIE 4.1868d7)

(cl:export 'GSL_CONST_CGS_CALORIE)

(cl:defconstant GSL_CONST_CGS_BTU 1.05505585262d10)

(cl:export 'GSL_CONST_CGS_BTU)

(cl:defconstant GSL_CONST_CGS_THERM 1.05506d15)

(cl:export 'GSL_CONST_CGS_THERM)

(cl:defconstant GSL_CONST_CGS_HORSEPOWER 7.457d9)

(cl:export 'GSL_CONST_CGS_HORSEPOWER)

(cl:defconstant GSL_CONST_CGS_BAR 1d6)

(cl:export 'GSL_CONST_CGS_BAR)

(cl:defconstant GSL_CONST_CGS_STD_ATMOSPHERE 1.01325d6)

(cl:export 'GSL_CONST_CGS_STD_ATMOSPHERE)

(cl:defconstant GSL_CONST_CGS_TORR 1.33322368421d3)

(cl:export 'GSL_CONST_CGS_TORR)

(cl:defconstant GSL_CONST_CGS_METER_OF_MERCURY 1.33322368421d6)

(cl:export 'GSL_CONST_CGS_METER_OF_MERCURY)

(cl:defconstant GSL_CONST_CGS_INCH_OF_MERCURY 3.38638815789d4)

(cl:export 'GSL_CONST_CGS_INCH_OF_MERCURY)

(cl:defconstant GSL_CONST_CGS_INCH_OF_WATER 2.490889d3)

(cl:export 'GSL_CONST_CGS_INCH_OF_WATER)

(cl:defconstant GSL_CONST_CGS_PSI 6.89475729317d4)

(cl:export 'GSL_CONST_CGS_PSI)

(cl:defconstant GSL_CONST_CGS_POISE 1d0)

(cl:export 'GSL_CONST_CGS_POISE)

(cl:defconstant GSL_CONST_CGS_STOKES 1d0)

(cl:export 'GSL_CONST_CGS_STOKES)

(cl:defconstant GSL_CONST_CGS_STILB 1d0)

(cl:export 'GSL_CONST_CGS_STILB)

(cl:defconstant GSL_CONST_CGS_LUMEN 1d0)

(cl:export 'GSL_CONST_CGS_LUMEN)

(cl:defconstant GSL_CONST_CGS_LUX 1d-4)

(cl:export 'GSL_CONST_CGS_LUX)

(cl:defconstant GSL_CONST_CGS_PHOT 1d0)

(cl:export 'GSL_CONST_CGS_PHOT)

(cl:defconstant GSL_CONST_CGS_FOOTCANDLE 1.076d-3)

(cl:export 'GSL_CONST_CGS_FOOTCANDLE)

(cl:defconstant GSL_CONST_CGS_LAMBERT 1d0)

(cl:export 'GSL_CONST_CGS_LAMBERT)

(cl:defconstant GSL_CONST_CGS_FOOTLAMBERT 1.07639104d-3)

(cl:export 'GSL_CONST_CGS_FOOTLAMBERT)

(cl:defconstant GSL_CONST_CGS_CURIE 3.7d10)

(cl:export 'GSL_CONST_CGS_CURIE)

(cl:defconstant GSL_CONST_CGS_ROENTGEN 2.58d-7)

(cl:export 'GSL_CONST_CGS_ROENTGEN)

(cl:defconstant GSL_CONST_CGS_RAD 1d2)

(cl:export 'GSL_CONST_CGS_RAD)

(cl:defconstant GSL_CONST_CGS_SOLAR_MASS 1.98892d33)

(cl:export 'GSL_CONST_CGS_SOLAR_MASS)

(cl:defconstant GSL_CONST_CGS_BOHR_RADIUS 5.291772083d-9)

(cl:export 'GSL_CONST_CGS_BOHR_RADIUS)

(cl:defconstant GSL_CONST_CGS_NEWTON 1d5)

(cl:export 'GSL_CONST_CGS_NEWTON)

(cl:defconstant GSL_CONST_CGS_DYNE 1d0)

(cl:export 'GSL_CONST_CGS_DYNE)

(cl:defconstant GSL_CONST_CGS_JOULE 1d7)

(cl:export 'GSL_CONST_CGS_JOULE)

(cl:defconstant GSL_CONST_CGS_ERG 1d0)

(cl:export 'GSL_CONST_CGS_ERG)

(cl:defconstant GSL_CONST_CGS_STEFAN_BOLTZMANN_CONSTANT 5.67040047374d-5)

(cl:export 'GSL_CONST_CGS_STEFAN_BOLTZMANN_CONSTANT)

(cl:defconstant GSL_CONST_CGS_THOMSON_CROSS_SECTION 6.65245893699d-25)

(cl:export 'GSL_CONST_CGS_THOMSON_CROSS_SECTION)

(cl:defconstant GSL_CONST_CGSM_SPEED_OF_LIGHT 2.99792458d10)

(cl:export 'GSL_CONST_CGSM_SPEED_OF_LIGHT)

(cl:defconstant GSL_CONST_CGSM_GRAVITATIONAL_CONSTANT 6.673d-8)

(cl:export 'GSL_CONST_CGSM_GRAVITATIONAL_CONSTANT)

(cl:defconstant GSL_CONST_CGSM_PLANCKS_CONSTANT_H 6.62606896d-27)

(cl:export 'GSL_CONST_CGSM_PLANCKS_CONSTANT_H)

(cl:defconstant GSL_CONST_CGSM_PLANCKS_CONSTANT_HBAR 1.05457162825d-27)

(cl:export 'GSL_CONST_CGSM_PLANCKS_CONSTANT_HBAR)

(cl:defconstant GSL_CONST_CGSM_ASTRONOMICAL_UNIT 1.49597870691d13)

(cl:export 'GSL_CONST_CGSM_ASTRONOMICAL_UNIT)

(cl:defconstant GSL_CONST_CGSM_LIGHT_YEAR 9.46053620707d17)

(cl:export 'GSL_CONST_CGSM_LIGHT_YEAR)

(cl:defconstant GSL_CONST_CGSM_PARSEC 3.08567758135d18)

(cl:export 'GSL_CONST_CGSM_PARSEC)

(cl:defconstant GSL_CONST_CGSM_GRAV_ACCEL 9.80665d2)

(cl:export 'GSL_CONST_CGSM_GRAV_ACCEL)

(cl:defconstant GSL_CONST_CGSM_ELECTRON_VOLT 1.602176487d-12)

(cl:export 'GSL_CONST_CGSM_ELECTRON_VOLT)

(cl:defconstant GSL_CONST_CGSM_MASS_ELECTRON 9.10938188d-28)

(cl:export 'GSL_CONST_CGSM_MASS_ELECTRON)

(cl:defconstant GSL_CONST_CGSM_MASS_MUON 1.88353109d-25)

(cl:export 'GSL_CONST_CGSM_MASS_MUON)

(cl:defconstant GSL_CONST_CGSM_MASS_PROTON 1.67262158d-24)

(cl:export 'GSL_CONST_CGSM_MASS_PROTON)

(cl:defconstant GSL_CONST_CGSM_MASS_NEUTRON 1.67492716d-24)

(cl:export 'GSL_CONST_CGSM_MASS_NEUTRON)

(cl:defconstant GSL_CONST_CGSM_RYDBERG 2.17987196968d-11)

(cl:export 'GSL_CONST_CGSM_RYDBERG)

(cl:defconstant GSL_CONST_CGSM_BOLTZMANN 1.3806504d-16)

(cl:export 'GSL_CONST_CGSM_BOLTZMANN)

(cl:defconstant GSL_CONST_CGSM_MOLAR_GAS 8.314472d7)

(cl:export 'GSL_CONST_CGSM_MOLAR_GAS)

(cl:defconstant GSL_CONST_CGSM_STANDARD_GAS_VOLUME 2.2710981d4)

(cl:export 'GSL_CONST_CGSM_STANDARD_GAS_VOLUME)

(cl:defconstant GSL_CONST_CGSM_MINUTE 6d1)

(cl:export 'GSL_CONST_CGSM_MINUTE)

(cl:defconstant GSL_CONST_CGSM_HOUR 3.6d3)

(cl:export 'GSL_CONST_CGSM_HOUR)

(cl:defconstant GSL_CONST_CGSM_DAY 8.64d4)

(cl:export 'GSL_CONST_CGSM_DAY)

(cl:defconstant GSL_CONST_CGSM_WEEK 6.048d5)

(cl:export 'GSL_CONST_CGSM_WEEK)

(cl:defconstant GSL_CONST_CGSM_INCH 2.54d0)

(cl:export 'GSL_CONST_CGSM_INCH)

(cl:defconstant GSL_CONST_CGSM_FOOT 3.048d1)

(cl:export 'GSL_CONST_CGSM_FOOT)

(cl:defconstant GSL_CONST_CGSM_YARD 9.144d1)

(cl:export 'GSL_CONST_CGSM_YARD)

(cl:defconstant GSL_CONST_CGSM_MILE 1.609344d5)

(cl:export 'GSL_CONST_CGSM_MILE)

(cl:defconstant GSL_CONST_CGSM_NAUTICAL_MILE 1.852d5)

(cl:export 'GSL_CONST_CGSM_NAUTICAL_MILE)

(cl:defconstant GSL_CONST_CGSM_FATHOM 1.8288d2)

(cl:export 'GSL_CONST_CGSM_FATHOM)

(cl:defconstant GSL_CONST_CGSM_MIL 2.54d-3)

(cl:export 'GSL_CONST_CGSM_MIL)

(cl:defconstant GSL_CONST_CGSM_POINT 3.52777777778d-2)

(cl:export 'GSL_CONST_CGSM_POINT)

(cl:defconstant GSL_CONST_CGSM_TEXPOINT 3.51459803515d-2)

(cl:export 'GSL_CONST_CGSM_TEXPOINT)

(cl:defconstant GSL_CONST_CGSM_MICRON 1d-4)

(cl:export 'GSL_CONST_CGSM_MICRON)

(cl:defconstant GSL_CONST_CGSM_ANGSTROM 1d-8)

(cl:export 'GSL_CONST_CGSM_ANGSTROM)

(cl:defconstant GSL_CONST_CGSM_HECTARE 1d8)

(cl:export 'GSL_CONST_CGSM_HECTARE)

(cl:defconstant GSL_CONST_CGSM_ACRE 4.04685642241d7)

(cl:export 'GSL_CONST_CGSM_ACRE)

(cl:defconstant GSL_CONST_CGSM_BARN 1d-24)

(cl:export 'GSL_CONST_CGSM_BARN)

(cl:defconstant GSL_CONST_CGSM_LITER 1d3)

(cl:export 'GSL_CONST_CGSM_LITER)

(cl:defconstant GSL_CONST_CGSM_US_GALLON 3.78541178402d3)

(cl:export 'GSL_CONST_CGSM_US_GALLON)

(cl:defconstant GSL_CONST_CGSM_QUART 9.46352946004d2)

(cl:export 'GSL_CONST_CGSM_QUART)

(cl:defconstant GSL_CONST_CGSM_PINT 4.73176473002d2)

(cl:export 'GSL_CONST_CGSM_PINT)

(cl:defconstant GSL_CONST_CGSM_CUP 2.36588236501d2)

(cl:export 'GSL_CONST_CGSM_CUP)

(cl:defconstant GSL_CONST_CGSM_FLUID_OUNCE 2.95735295626d1)

(cl:export 'GSL_CONST_CGSM_FLUID_OUNCE)

(cl:defconstant GSL_CONST_CGSM_TABLESPOON 1.47867647813d1)

(cl:export 'GSL_CONST_CGSM_TABLESPOON)

(cl:defconstant GSL_CONST_CGSM_TEASPOON 4.92892159375d0)

(cl:export 'GSL_CONST_CGSM_TEASPOON)

(cl:defconstant GSL_CONST_CGSM_CANADIAN_GALLON 4.54609d3)

(cl:export 'GSL_CONST_CGSM_CANADIAN_GALLON)

(cl:defconstant GSL_CONST_CGSM_UK_GALLON 4.546092d3)

(cl:export 'GSL_CONST_CGSM_UK_GALLON)

(cl:defconstant GSL_CONST_CGSM_MILES_PER_HOUR 4.4704d1)

(cl:export 'GSL_CONST_CGSM_MILES_PER_HOUR)

(cl:defconstant GSL_CONST_CGSM_KILOMETERS_PER_HOUR 2.77777777778d1)

(cl:export 'GSL_CONST_CGSM_KILOMETERS_PER_HOUR)

(cl:defconstant GSL_CONST_CGSM_KNOT 5.14444444444d1)

(cl:export 'GSL_CONST_CGSM_KNOT)

(cl:defconstant GSL_CONST_CGSM_POUND_MASS 4.5359237d2)

(cl:export 'GSL_CONST_CGSM_POUND_MASS)

(cl:defconstant GSL_CONST_CGSM_OUNCE_MASS 2.8349523125d1)

(cl:export 'GSL_CONST_CGSM_OUNCE_MASS)

(cl:defconstant GSL_CONST_CGSM_TON 9.0718474d5)

(cl:export 'GSL_CONST_CGSM_TON)

(cl:defconstant GSL_CONST_CGSM_METRIC_TON 1d6)

(cl:export 'GSL_CONST_CGSM_METRIC_TON)

(cl:defconstant GSL_CONST_CGSM_UK_TON 1.0160469088d6)

(cl:export 'GSL_CONST_CGSM_UK_TON)

(cl:defconstant GSL_CONST_CGSM_TROY_OUNCE 3.1103475d1)

(cl:export 'GSL_CONST_CGSM_TROY_OUNCE)

(cl:defconstant GSL_CONST_CGSM_CARAT 2d-1)

(cl:export 'GSL_CONST_CGSM_CARAT)

(cl:defconstant GSL_CONST_CGSM_UNIFIED_ATOMIC_MASS 1.660538782d-24)

(cl:export 'GSL_CONST_CGSM_UNIFIED_ATOMIC_MASS)

(cl:defconstant GSL_CONST_CGSM_GRAM_FORCE 9.80665d2)

(cl:export 'GSL_CONST_CGSM_GRAM_FORCE)

(cl:defconstant GSL_CONST_CGSM_POUND_FORCE 4.44822161526d5)

(cl:export 'GSL_CONST_CGSM_POUND_FORCE)

(cl:defconstant GSL_CONST_CGSM_KILOPOUND_FORCE 4.44822161526d8)

(cl:export 'GSL_CONST_CGSM_KILOPOUND_FORCE)

(cl:defconstant GSL_CONST_CGSM_POUNDAL 1.38255d4)

(cl:export 'GSL_CONST_CGSM_POUNDAL)

(cl:defconstant GSL_CONST_CGSM_CALORIE 4.1868d7)

(cl:export 'GSL_CONST_CGSM_CALORIE)

(cl:defconstant GSL_CONST_CGSM_BTU 1.05505585262d10)

(cl:export 'GSL_CONST_CGSM_BTU)

(cl:defconstant GSL_CONST_CGSM_THERM 1.05506d15)

(cl:export 'GSL_CONST_CGSM_THERM)

(cl:defconstant GSL_CONST_CGSM_HORSEPOWER 7.457d9)

(cl:export 'GSL_CONST_CGSM_HORSEPOWER)

(cl:defconstant GSL_CONST_CGSM_BAR 1d6)

(cl:export 'GSL_CONST_CGSM_BAR)

(cl:defconstant GSL_CONST_CGSM_STD_ATMOSPHERE 1.01325d6)

(cl:export 'GSL_CONST_CGSM_STD_ATMOSPHERE)

(cl:defconstant GSL_CONST_CGSM_TORR 1.33322368421d3)

(cl:export 'GSL_CONST_CGSM_TORR)

(cl:defconstant GSL_CONST_CGSM_METER_OF_MERCURY 1.33322368421d6)

(cl:export 'GSL_CONST_CGSM_METER_OF_MERCURY)

(cl:defconstant GSL_CONST_CGSM_INCH_OF_MERCURY 3.38638815789d4)

(cl:export 'GSL_CONST_CGSM_INCH_OF_MERCURY)

(cl:defconstant GSL_CONST_CGSM_INCH_OF_WATER 2.490889d3)

(cl:export 'GSL_CONST_CGSM_INCH_OF_WATER)

(cl:defconstant GSL_CONST_CGSM_PSI 6.89475729317d4)

(cl:export 'GSL_CONST_CGSM_PSI)

(cl:defconstant GSL_CONST_CGSM_POISE 1d0)

(cl:export 'GSL_CONST_CGSM_POISE)

(cl:defconstant GSL_CONST_CGSM_STOKES 1d0)

(cl:export 'GSL_CONST_CGSM_STOKES)

(cl:defconstant GSL_CONST_CGSM_STILB 1d0)

(cl:export 'GSL_CONST_CGSM_STILB)

(cl:defconstant GSL_CONST_CGSM_LUMEN 1d0)

(cl:export 'GSL_CONST_CGSM_LUMEN)

(cl:defconstant GSL_CONST_CGSM_LUX 1d-4)

(cl:export 'GSL_CONST_CGSM_LUX)

(cl:defconstant GSL_CONST_CGSM_PHOT 1d0)

(cl:export 'GSL_CONST_CGSM_PHOT)

(cl:defconstant GSL_CONST_CGSM_FOOTCANDLE 1.076d-3)

(cl:export 'GSL_CONST_CGSM_FOOTCANDLE)

(cl:defconstant GSL_CONST_CGSM_LAMBERT 1d0)

(cl:export 'GSL_CONST_CGSM_LAMBERT)

(cl:defconstant GSL_CONST_CGSM_FOOTLAMBERT 1.07639104d-3)

(cl:export 'GSL_CONST_CGSM_FOOTLAMBERT)

(cl:defconstant GSL_CONST_CGSM_CURIE 3.7d10)

(cl:export 'GSL_CONST_CGSM_CURIE)

(cl:defconstant GSL_CONST_CGSM_ROENTGEN 2.58d-8)

(cl:export 'GSL_CONST_CGSM_ROENTGEN)

(cl:defconstant GSL_CONST_CGSM_RAD 1d2)

(cl:export 'GSL_CONST_CGSM_RAD)

(cl:defconstant GSL_CONST_CGSM_SOLAR_MASS 1.98892d33)

(cl:export 'GSL_CONST_CGSM_SOLAR_MASS)

(cl:defconstant GSL_CONST_CGSM_BOHR_RADIUS 5.291772083d-9)

(cl:export 'GSL_CONST_CGSM_BOHR_RADIUS)

(cl:defconstant GSL_CONST_CGSM_NEWTON 1d5)

(cl:export 'GSL_CONST_CGSM_NEWTON)

(cl:defconstant GSL_CONST_CGSM_DYNE 1d0)

(cl:export 'GSL_CONST_CGSM_DYNE)

(cl:defconstant GSL_CONST_CGSM_JOULE 1d7)

(cl:export 'GSL_CONST_CGSM_JOULE)

(cl:defconstant GSL_CONST_CGSM_ERG 1d0)

(cl:export 'GSL_CONST_CGSM_ERG)

(cl:defconstant GSL_CONST_CGSM_STEFAN_BOLTZMANN_CONSTANT 5.67040047374d-5)

(cl:export 'GSL_CONST_CGSM_STEFAN_BOLTZMANN_CONSTANT)

(cl:defconstant GSL_CONST_CGSM_THOMSON_CROSS_SECTION 6.65245893699d-25)

(cl:export 'GSL_CONST_CGSM_THOMSON_CROSS_SECTION)

(cl:defconstant GSL_CONST_CGSM_BOHR_MAGNETON 9.27400899d-21)

(cl:export 'GSL_CONST_CGSM_BOHR_MAGNETON)

(cl:defconstant GSL_CONST_CGSM_NUCLEAR_MAGNETON 5.05078317d-24)

(cl:export 'GSL_CONST_CGSM_NUCLEAR_MAGNETON)

(cl:defconstant GSL_CONST_CGSM_ELECTRON_MAGNETIC_MOMENT 9.28476362d-21)

(cl:export 'GSL_CONST_CGSM_ELECTRON_MAGNETIC_MOMENT)

(cl:defconstant GSL_CONST_CGSM_PROTON_MAGNETIC_MOMENT 1.410606633d-23)

(cl:export 'GSL_CONST_CGSM_PROTON_MAGNETIC_MOMENT)

(cl:defconstant GSL_CONST_CGSM_FARADAY 9.64853429775d3)

(cl:export 'GSL_CONST_CGSM_FARADAY)

(cl:defconstant GSL_CONST_CGSM_ELECTRON_CHARGE 1.602176487d-20)

(cl:export 'GSL_CONST_CGSM_ELECTRON_CHARGE)

(cl:defconstant GSL_CONST_MKS_SPEED_OF_LIGHT 2.99792458d8)

(cl:export 'GSL_CONST_MKS_SPEED_OF_LIGHT)

(cl:defconstant GSL_CONST_MKS_GRAVITATIONAL_CONSTANT 6.673d-11)

(cl:export 'GSL_CONST_MKS_GRAVITATIONAL_CONSTANT)

(cl:defconstant GSL_CONST_MKS_PLANCKS_CONSTANT_H 6.62606896d-34)

(cl:export 'GSL_CONST_MKS_PLANCKS_CONSTANT_H)

(cl:defconstant GSL_CONST_MKS_PLANCKS_CONSTANT_HBAR 1.05457162825d-34)

(cl:export 'GSL_CONST_MKS_PLANCKS_CONSTANT_HBAR)

(cl:defconstant GSL_CONST_MKS_ASTRONOMICAL_UNIT 1.49597870691d11)

(cl:export 'GSL_CONST_MKS_ASTRONOMICAL_UNIT)

(cl:defconstant GSL_CONST_MKS_LIGHT_YEAR 9.46053620707d15)

(cl:export 'GSL_CONST_MKS_LIGHT_YEAR)

(cl:defconstant GSL_CONST_MKS_PARSEC 3.08567758135d16)

(cl:export 'GSL_CONST_MKS_PARSEC)

(cl:defconstant GSL_CONST_MKS_GRAV_ACCEL 9.80665d0)

(cl:export 'GSL_CONST_MKS_GRAV_ACCEL)

(cl:defconstant GSL_CONST_MKS_ELECTRON_VOLT 1.602176487d-19)

(cl:export 'GSL_CONST_MKS_ELECTRON_VOLT)

(cl:defconstant GSL_CONST_MKS_MASS_ELECTRON 9.10938188d-31)

(cl:export 'GSL_CONST_MKS_MASS_ELECTRON)

(cl:defconstant GSL_CONST_MKS_MASS_MUON 1.88353109d-28)

(cl:export 'GSL_CONST_MKS_MASS_MUON)

(cl:defconstant GSL_CONST_MKS_MASS_PROTON 1.67262158d-27)

(cl:export 'GSL_CONST_MKS_MASS_PROTON)

(cl:defconstant GSL_CONST_MKS_MASS_NEUTRON 1.67492716d-27)

(cl:export 'GSL_CONST_MKS_MASS_NEUTRON)

(cl:defconstant GSL_CONST_MKS_RYDBERG 2.17987196968d-18)

(cl:export 'GSL_CONST_MKS_RYDBERG)

(cl:defconstant GSL_CONST_MKS_BOLTZMANN 1.3806504d-23)

(cl:export 'GSL_CONST_MKS_BOLTZMANN)

(cl:defconstant GSL_CONST_MKS_MOLAR_GAS 8.314472d0)

(cl:export 'GSL_CONST_MKS_MOLAR_GAS)

(cl:defconstant GSL_CONST_MKS_STANDARD_GAS_VOLUME 2.2710981d-2)

(cl:export 'GSL_CONST_MKS_STANDARD_GAS_VOLUME)

(cl:defconstant GSL_CONST_MKS_MINUTE 6d1)

(cl:export 'GSL_CONST_MKS_MINUTE)

(cl:defconstant GSL_CONST_MKS_HOUR 3.6d3)

(cl:export 'GSL_CONST_MKS_HOUR)

(cl:defconstant GSL_CONST_MKS_DAY 8.64d4)

(cl:export 'GSL_CONST_MKS_DAY)

(cl:defconstant GSL_CONST_MKS_WEEK 6.048d5)

(cl:export 'GSL_CONST_MKS_WEEK)

(cl:defconstant GSL_CONST_MKS_INCH 2.54d-2)

(cl:export 'GSL_CONST_MKS_INCH)

(cl:defconstant GSL_CONST_MKS_FOOT 3.048d-1)

(cl:export 'GSL_CONST_MKS_FOOT)

(cl:defconstant GSL_CONST_MKS_YARD 9.144d-1)

(cl:export 'GSL_CONST_MKS_YARD)

(cl:defconstant GSL_CONST_MKS_MILE 1.609344d3)

(cl:export 'GSL_CONST_MKS_MILE)

(cl:defconstant GSL_CONST_MKS_NAUTICAL_MILE 1.852d3)

(cl:export 'GSL_CONST_MKS_NAUTICAL_MILE)

(cl:defconstant GSL_CONST_MKS_FATHOM 1.8288d0)

(cl:export 'GSL_CONST_MKS_FATHOM)

(cl:defconstant GSL_CONST_MKS_MIL 2.54d-5)

(cl:export 'GSL_CONST_MKS_MIL)

(cl:defconstant GSL_CONST_MKS_POINT 3.52777777778d-4)

(cl:export 'GSL_CONST_MKS_POINT)

(cl:defconstant GSL_CONST_MKS_TEXPOINT 3.51459803515d-4)

(cl:export 'GSL_CONST_MKS_TEXPOINT)

(cl:defconstant GSL_CONST_MKS_MICRON 1d-6)

(cl:export 'GSL_CONST_MKS_MICRON)

(cl:defconstant GSL_CONST_MKS_ANGSTROM 1d-10)

(cl:export 'GSL_CONST_MKS_ANGSTROM)

(cl:defconstant GSL_CONST_MKS_HECTARE 1d4)

(cl:export 'GSL_CONST_MKS_HECTARE)

(cl:defconstant GSL_CONST_MKS_ACRE 4.04685642241d3)

(cl:export 'GSL_CONST_MKS_ACRE)

(cl:defconstant GSL_CONST_MKS_BARN 1d-28)

(cl:export 'GSL_CONST_MKS_BARN)

(cl:defconstant GSL_CONST_MKS_LITER 1d-3)

(cl:export 'GSL_CONST_MKS_LITER)

(cl:defconstant GSL_CONST_MKS_US_GALLON 3.78541178402d-3)

(cl:export 'GSL_CONST_MKS_US_GALLON)

(cl:defconstant GSL_CONST_MKS_QUART 9.46352946004d-4)

(cl:export 'GSL_CONST_MKS_QUART)

(cl:defconstant GSL_CONST_MKS_PINT 4.73176473002d-4)

(cl:export 'GSL_CONST_MKS_PINT)

(cl:defconstant GSL_CONST_MKS_CUP 2.36588236501d-4)

(cl:export 'GSL_CONST_MKS_CUP)

(cl:defconstant GSL_CONST_MKS_FLUID_OUNCE 2.95735295626d-5)

(cl:export 'GSL_CONST_MKS_FLUID_OUNCE)

(cl:defconstant GSL_CONST_MKS_TABLESPOON 1.47867647813d-5)

(cl:export 'GSL_CONST_MKS_TABLESPOON)

(cl:defconstant GSL_CONST_MKS_TEASPOON 4.92892159375d-6)

(cl:export 'GSL_CONST_MKS_TEASPOON)

(cl:defconstant GSL_CONST_MKS_CANADIAN_GALLON 4.54609d-3)

(cl:export 'GSL_CONST_MKS_CANADIAN_GALLON)

(cl:defconstant GSL_CONST_MKS_UK_GALLON 4.546092d-3)

(cl:export 'GSL_CONST_MKS_UK_GALLON)

(cl:defconstant GSL_CONST_MKS_MILES_PER_HOUR 4.4704d-1)

(cl:export 'GSL_CONST_MKS_MILES_PER_HOUR)

(cl:defconstant GSL_CONST_MKS_KILOMETERS_PER_HOUR 2.77777777778d-1)

(cl:export 'GSL_CONST_MKS_KILOMETERS_PER_HOUR)

(cl:defconstant GSL_CONST_MKS_KNOT 5.14444444444d-1)

(cl:export 'GSL_CONST_MKS_KNOT)

(cl:defconstant GSL_CONST_MKS_POUND_MASS 4.5359237d-1)

(cl:export 'GSL_CONST_MKS_POUND_MASS)

(cl:defconstant GSL_CONST_MKS_OUNCE_MASS 2.8349523125d-2)

(cl:export 'GSL_CONST_MKS_OUNCE_MASS)

(cl:defconstant GSL_CONST_MKS_TON 9.0718474d2)

(cl:export 'GSL_CONST_MKS_TON)

(cl:defconstant GSL_CONST_MKS_METRIC_TON 1d3)

(cl:export 'GSL_CONST_MKS_METRIC_TON)

(cl:defconstant GSL_CONST_MKS_UK_TON 1.0160469088d3)

(cl:export 'GSL_CONST_MKS_UK_TON)

(cl:defconstant GSL_CONST_MKS_TROY_OUNCE 3.1103475d-2)

(cl:export 'GSL_CONST_MKS_TROY_OUNCE)

(cl:defconstant GSL_CONST_MKS_CARAT 2d-4)

(cl:export 'GSL_CONST_MKS_CARAT)

(cl:defconstant GSL_CONST_MKS_UNIFIED_ATOMIC_MASS 1.660538782d-27)

(cl:export 'GSL_CONST_MKS_UNIFIED_ATOMIC_MASS)

(cl:defconstant GSL_CONST_MKS_GRAM_FORCE 9.80665d-3)

(cl:export 'GSL_CONST_MKS_GRAM_FORCE)

(cl:defconstant GSL_CONST_MKS_POUND_FORCE 4.44822161526d0)

(cl:export 'GSL_CONST_MKS_POUND_FORCE)

(cl:defconstant GSL_CONST_MKS_KILOPOUND_FORCE 4.44822161526d3)

(cl:export 'GSL_CONST_MKS_KILOPOUND_FORCE)

(cl:defconstant GSL_CONST_MKS_POUNDAL 1.38255d-1)

(cl:export 'GSL_CONST_MKS_POUNDAL)

(cl:defconstant GSL_CONST_MKS_CALORIE 4.1868d0)

(cl:export 'GSL_CONST_MKS_CALORIE)

(cl:defconstant GSL_CONST_MKS_BTU 1.05505585262d3)

(cl:export 'GSL_CONST_MKS_BTU)

(cl:defconstant GSL_CONST_MKS_THERM 1.05506d8)

(cl:export 'GSL_CONST_MKS_THERM)

(cl:defconstant GSL_CONST_MKS_HORSEPOWER 7.457d2)

(cl:export 'GSL_CONST_MKS_HORSEPOWER)

(cl:defconstant GSL_CONST_MKS_BAR 1d5)

(cl:export 'GSL_CONST_MKS_BAR)

(cl:defconstant GSL_CONST_MKS_STD_ATMOSPHERE 1.01325d5)

(cl:export 'GSL_CONST_MKS_STD_ATMOSPHERE)

(cl:defconstant GSL_CONST_MKS_TORR 1.33322368421d2)

(cl:export 'GSL_CONST_MKS_TORR)

(cl:defconstant GSL_CONST_MKS_METER_OF_MERCURY 1.33322368421d5)

(cl:export 'GSL_CONST_MKS_METER_OF_MERCURY)

(cl:defconstant GSL_CONST_MKS_INCH_OF_MERCURY 3.38638815789d3)

(cl:export 'GSL_CONST_MKS_INCH_OF_MERCURY)

(cl:defconstant GSL_CONST_MKS_INCH_OF_WATER 2.490889d2)

(cl:export 'GSL_CONST_MKS_INCH_OF_WATER)

(cl:defconstant GSL_CONST_MKS_PSI 6.89475729317d3)

(cl:export 'GSL_CONST_MKS_PSI)

(cl:defconstant GSL_CONST_MKS_POISE 1d-1)

(cl:export 'GSL_CONST_MKS_POISE)

(cl:defconstant GSL_CONST_MKS_STOKES 1d-4)

(cl:export 'GSL_CONST_MKS_STOKES)

(cl:defconstant GSL_CONST_MKS_STILB 1d4)

(cl:export 'GSL_CONST_MKS_STILB)

(cl:defconstant GSL_CONST_MKS_LUMEN 1d0)

(cl:export 'GSL_CONST_MKS_LUMEN)

(cl:defconstant GSL_CONST_MKS_LUX 1d0)

(cl:export 'GSL_CONST_MKS_LUX)

(cl:defconstant GSL_CONST_MKS_PHOT 1d4)

(cl:export 'GSL_CONST_MKS_PHOT)

(cl:defconstant GSL_CONST_MKS_FOOTCANDLE 1.076d1)

(cl:export 'GSL_CONST_MKS_FOOTCANDLE)

(cl:defconstant GSL_CONST_MKS_LAMBERT 1d4)

(cl:export 'GSL_CONST_MKS_LAMBERT)

(cl:defconstant GSL_CONST_MKS_FOOTLAMBERT 1.07639104d1)

(cl:export 'GSL_CONST_MKS_FOOTLAMBERT)

(cl:defconstant GSL_CONST_MKS_CURIE 3.7d10)

(cl:export 'GSL_CONST_MKS_CURIE)

(cl:defconstant GSL_CONST_MKS_ROENTGEN 2.58d-4)

(cl:export 'GSL_CONST_MKS_ROENTGEN)

(cl:defconstant GSL_CONST_MKS_RAD 1d-2)

(cl:export 'GSL_CONST_MKS_RAD)

(cl:defconstant GSL_CONST_MKS_SOLAR_MASS 1.98892d30)

(cl:export 'GSL_CONST_MKS_SOLAR_MASS)

(cl:defconstant GSL_CONST_MKS_BOHR_RADIUS 5.291772083d-11)

(cl:export 'GSL_CONST_MKS_BOHR_RADIUS)

(cl:defconstant GSL_CONST_MKS_NEWTON 1d0)

(cl:export 'GSL_CONST_MKS_NEWTON)

(cl:defconstant GSL_CONST_MKS_DYNE 1d-5)

(cl:export 'GSL_CONST_MKS_DYNE)

(cl:defconstant GSL_CONST_MKS_JOULE 1d0)

(cl:export 'GSL_CONST_MKS_JOULE)

(cl:defconstant GSL_CONST_MKS_ERG 1d-7)

(cl:export 'GSL_CONST_MKS_ERG)

(cl:defconstant GSL_CONST_MKS_STEFAN_BOLTZMANN_CONSTANT 5.67040047374d-8)

(cl:export 'GSL_CONST_MKS_STEFAN_BOLTZMANN_CONSTANT)

(cl:defconstant GSL_CONST_MKS_THOMSON_CROSS_SECTION 6.65245893699d-29)

(cl:export 'GSL_CONST_MKS_THOMSON_CROSS_SECTION)

(cl:defconstant GSL_CONST_MKS_BOHR_MAGNETON 9.27400899d-24)

(cl:export 'GSL_CONST_MKS_BOHR_MAGNETON)

(cl:defconstant GSL_CONST_MKS_NUCLEAR_MAGNETON 5.05078317d-27)

(cl:export 'GSL_CONST_MKS_NUCLEAR_MAGNETON)

(cl:defconstant GSL_CONST_MKS_ELECTRON_MAGNETIC_MOMENT 9.28476362d-24)

(cl:export 'GSL_CONST_MKS_ELECTRON_MAGNETIC_MOMENT)

(cl:defconstant GSL_CONST_MKS_PROTON_MAGNETIC_MOMENT 1.410606633d-26)

(cl:export 'GSL_CONST_MKS_PROTON_MAGNETIC_MOMENT)

(cl:defconstant GSL_CONST_MKS_FARADAY 9.64853429775d4)

(cl:export 'GSL_CONST_MKS_FARADAY)

(cl:defconstant GSL_CONST_MKS_ELECTRON_CHARGE 1.602176487d-19)

(cl:export 'GSL_CONST_MKS_ELECTRON_CHARGE)

(cl:defconstant GSL_CONST_MKS_VACUUM_PERMITTIVITY 8.854187817d-12)

(cl:export 'GSL_CONST_MKS_VACUUM_PERMITTIVITY)

(cl:defconstant GSL_CONST_MKS_VACUUM_PERMEABILITY 1.25663706144d-6)

(cl:export 'GSL_CONST_MKS_VACUUM_PERMEABILITY)

(cl:defconstant GSL_CONST_MKS_DEBYE 3.33564095198d-30)

(cl:export 'GSL_CONST_MKS_DEBYE)

(cl:defconstant GSL_CONST_MKS_GAUSS 1d-4)

(cl:export 'GSL_CONST_MKS_GAUSS)

(cl:defconstant GSL_CONST_MKSA_SPEED_OF_LIGHT 2.99792458d8)

(cl:export 'GSL_CONST_MKSA_SPEED_OF_LIGHT)

(cl:defconstant GSL_CONST_MKSA_GRAVITATIONAL_CONSTANT 6.673d-11)

(cl:export 'GSL_CONST_MKSA_GRAVITATIONAL_CONSTANT)

(cl:defconstant GSL_CONST_MKSA_PLANCKS_CONSTANT_H 6.62606896d-34)

(cl:export 'GSL_CONST_MKSA_PLANCKS_CONSTANT_H)

(cl:defconstant GSL_CONST_MKSA_PLANCKS_CONSTANT_HBAR 1.05457162825d-34)

(cl:export 'GSL_CONST_MKSA_PLANCKS_CONSTANT_HBAR)

(cl:defconstant GSL_CONST_MKSA_ASTRONOMICAL_UNIT 1.49597870691d11)

(cl:export 'GSL_CONST_MKSA_ASTRONOMICAL_UNIT)

(cl:defconstant GSL_CONST_MKSA_LIGHT_YEAR 9.46053620707d15)

(cl:export 'GSL_CONST_MKSA_LIGHT_YEAR)

(cl:defconstant GSL_CONST_MKSA_PARSEC 3.08567758135d16)

(cl:export 'GSL_CONST_MKSA_PARSEC)

(cl:defconstant GSL_CONST_MKSA_GRAV_ACCEL 9.80665d0)

(cl:export 'GSL_CONST_MKSA_GRAV_ACCEL)

(cl:defconstant GSL_CONST_MKSA_ELECTRON_VOLT 1.602176487d-19)

(cl:export 'GSL_CONST_MKSA_ELECTRON_VOLT)

(cl:defconstant GSL_CONST_MKSA_MASS_ELECTRON 9.10938188d-31)

(cl:export 'GSL_CONST_MKSA_MASS_ELECTRON)

(cl:defconstant GSL_CONST_MKSA_MASS_MUON 1.88353109d-28)

(cl:export 'GSL_CONST_MKSA_MASS_MUON)

(cl:defconstant GSL_CONST_MKSA_MASS_PROTON 1.67262158d-27)

(cl:export 'GSL_CONST_MKSA_MASS_PROTON)

(cl:defconstant GSL_CONST_MKSA_MASS_NEUTRON 1.67492716d-27)

(cl:export 'GSL_CONST_MKSA_MASS_NEUTRON)

(cl:defconstant GSL_CONST_MKSA_RYDBERG 2.17987196968d-18)

(cl:export 'GSL_CONST_MKSA_RYDBERG)

(cl:defconstant GSL_CONST_MKSA_BOLTZMANN 1.3806504d-23)

(cl:export 'GSL_CONST_MKSA_BOLTZMANN)

(cl:defconstant GSL_CONST_MKSA_MOLAR_GAS 8.314472d0)

(cl:export 'GSL_CONST_MKSA_MOLAR_GAS)

(cl:defconstant GSL_CONST_MKSA_STANDARD_GAS_VOLUME 2.2710981d-2)

(cl:export 'GSL_CONST_MKSA_STANDARD_GAS_VOLUME)

(cl:defconstant GSL_CONST_MKSA_MINUTE 6d1)

(cl:export 'GSL_CONST_MKSA_MINUTE)

(cl:defconstant GSL_CONST_MKSA_HOUR 3.6d3)

(cl:export 'GSL_CONST_MKSA_HOUR)

(cl:defconstant GSL_CONST_MKSA_DAY 8.64d4)

(cl:export 'GSL_CONST_MKSA_DAY)

(cl:defconstant GSL_CONST_MKSA_WEEK 6.048d5)

(cl:export 'GSL_CONST_MKSA_WEEK)

(cl:defconstant GSL_CONST_MKSA_INCH 2.54d-2)

(cl:export 'GSL_CONST_MKSA_INCH)

(cl:defconstant GSL_CONST_MKSA_FOOT 3.048d-1)

(cl:export 'GSL_CONST_MKSA_FOOT)

(cl:defconstant GSL_CONST_MKSA_YARD 9.144d-1)

(cl:export 'GSL_CONST_MKSA_YARD)

(cl:defconstant GSL_CONST_MKSA_MILE 1.609344d3)

(cl:export 'GSL_CONST_MKSA_MILE)

(cl:defconstant GSL_CONST_MKSA_NAUTICAL_MILE 1.852d3)

(cl:export 'GSL_CONST_MKSA_NAUTICAL_MILE)

(cl:defconstant GSL_CONST_MKSA_FATHOM 1.8288d0)

(cl:export 'GSL_CONST_MKSA_FATHOM)

(cl:defconstant GSL_CONST_MKSA_MIL 2.54d-5)

(cl:export 'GSL_CONST_MKSA_MIL)

(cl:defconstant GSL_CONST_MKSA_POINT 3.52777777778d-4)

(cl:export 'GSL_CONST_MKSA_POINT)

(cl:defconstant GSL_CONST_MKSA_TEXPOINT 3.51459803515d-4)

(cl:export 'GSL_CONST_MKSA_TEXPOINT)

(cl:defconstant GSL_CONST_MKSA_MICRON 1d-6)

(cl:export 'GSL_CONST_MKSA_MICRON)

(cl:defconstant GSL_CONST_MKSA_ANGSTROM 1d-10)

(cl:export 'GSL_CONST_MKSA_ANGSTROM)

(cl:defconstant GSL_CONST_MKSA_HECTARE 1d4)

(cl:export 'GSL_CONST_MKSA_HECTARE)

(cl:defconstant GSL_CONST_MKSA_ACRE 4.04685642241d3)

(cl:export 'GSL_CONST_MKSA_ACRE)

(cl:defconstant GSL_CONST_MKSA_BARN 1d-28)

(cl:export 'GSL_CONST_MKSA_BARN)

(cl:defconstant GSL_CONST_MKSA_LITER 1d-3)

(cl:export 'GSL_CONST_MKSA_LITER)

(cl:defconstant GSL_CONST_MKSA_US_GALLON 3.78541178402d-3)

(cl:export 'GSL_CONST_MKSA_US_GALLON)

(cl:defconstant GSL_CONST_MKSA_QUART 9.46352946004d-4)

(cl:export 'GSL_CONST_MKSA_QUART)

(cl:defconstant GSL_CONST_MKSA_PINT 4.73176473002d-4)

(cl:export 'GSL_CONST_MKSA_PINT)

(cl:defconstant GSL_CONST_MKSA_CUP 2.36588236501d-4)

(cl:export 'GSL_CONST_MKSA_CUP)

(cl:defconstant GSL_CONST_MKSA_FLUID_OUNCE 2.95735295626d-5)

(cl:export 'GSL_CONST_MKSA_FLUID_OUNCE)

(cl:defconstant GSL_CONST_MKSA_TABLESPOON 1.47867647813d-5)

(cl:export 'GSL_CONST_MKSA_TABLESPOON)

(cl:defconstant GSL_CONST_MKSA_TEASPOON 4.92892159375d-6)

(cl:export 'GSL_CONST_MKSA_TEASPOON)

(cl:defconstant GSL_CONST_MKSA_CANADIAN_GALLON 4.54609d-3)

(cl:export 'GSL_CONST_MKSA_CANADIAN_GALLON)

(cl:defconstant GSL_CONST_MKSA_UK_GALLON 4.546092d-3)

(cl:export 'GSL_CONST_MKSA_UK_GALLON)

(cl:defconstant GSL_CONST_MKSA_MILES_PER_HOUR 4.4704d-1)

(cl:export 'GSL_CONST_MKSA_MILES_PER_HOUR)

(cl:defconstant GSL_CONST_MKSA_KILOMETERS_PER_HOUR 2.77777777778d-1)

(cl:export 'GSL_CONST_MKSA_KILOMETERS_PER_HOUR)

(cl:defconstant GSL_CONST_MKSA_KNOT 5.14444444444d-1)

(cl:export 'GSL_CONST_MKSA_KNOT)

(cl:defconstant GSL_CONST_MKSA_POUND_MASS 4.5359237d-1)

(cl:export 'GSL_CONST_MKSA_POUND_MASS)

(cl:defconstant GSL_CONST_MKSA_OUNCE_MASS 2.8349523125d-2)

(cl:export 'GSL_CONST_MKSA_OUNCE_MASS)

(cl:defconstant GSL_CONST_MKSA_TON 9.0718474d2)

(cl:export 'GSL_CONST_MKSA_TON)

(cl:defconstant GSL_CONST_MKSA_METRIC_TON 1d3)

(cl:export 'GSL_CONST_MKSA_METRIC_TON)

(cl:defconstant GSL_CONST_MKSA_UK_TON 1.0160469088d3)

(cl:export 'GSL_CONST_MKSA_UK_TON)

(cl:defconstant GSL_CONST_MKSA_TROY_OUNCE 3.1103475d-2)

(cl:export 'GSL_CONST_MKSA_TROY_OUNCE)

(cl:defconstant GSL_CONST_MKSA_CARAT 2d-4)

(cl:export 'GSL_CONST_MKSA_CARAT)

(cl:defconstant GSL_CONST_MKSA_UNIFIED_ATOMIC_MASS 1.660538782d-27)

(cl:export 'GSL_CONST_MKSA_UNIFIED_ATOMIC_MASS)

(cl:defconstant GSL_CONST_MKSA_GRAM_FORCE 9.80665d-3)

(cl:export 'GSL_CONST_MKSA_GRAM_FORCE)

(cl:defconstant GSL_CONST_MKSA_POUND_FORCE 4.44822161526d0)

(cl:export 'GSL_CONST_MKSA_POUND_FORCE)

(cl:defconstant GSL_CONST_MKSA_KILOPOUND_FORCE 4.44822161526d3)

(cl:export 'GSL_CONST_MKSA_KILOPOUND_FORCE)

(cl:defconstant GSL_CONST_MKSA_POUNDAL 1.38255d-1)

(cl:export 'GSL_CONST_MKSA_POUNDAL)

(cl:defconstant GSL_CONST_MKSA_CALORIE 4.1868d0)

(cl:export 'GSL_CONST_MKSA_CALORIE)

(cl:defconstant GSL_CONST_MKSA_BTU 1.05505585262d3)

(cl:export 'GSL_CONST_MKSA_BTU)

(cl:defconstant GSL_CONST_MKSA_THERM 1.05506d8)

(cl:export 'GSL_CONST_MKSA_THERM)

(cl:defconstant GSL_CONST_MKSA_HORSEPOWER 7.457d2)

(cl:export 'GSL_CONST_MKSA_HORSEPOWER)

(cl:defconstant GSL_CONST_MKSA_BAR 1d5)

(cl:export 'GSL_CONST_MKSA_BAR)

(cl:defconstant GSL_CONST_MKSA_STD_ATMOSPHERE 1.01325d5)

(cl:export 'GSL_CONST_MKSA_STD_ATMOSPHERE)

(cl:defconstant GSL_CONST_MKSA_TORR 1.33322368421d2)

(cl:export 'GSL_CONST_MKSA_TORR)

(cl:defconstant GSL_CONST_MKSA_METER_OF_MERCURY 1.33322368421d5)

(cl:export 'GSL_CONST_MKSA_METER_OF_MERCURY)

(cl:defconstant GSL_CONST_MKSA_INCH_OF_MERCURY 3.38638815789d3)

(cl:export 'GSL_CONST_MKSA_INCH_OF_MERCURY)

(cl:defconstant GSL_CONST_MKSA_INCH_OF_WATER 2.490889d2)

(cl:export 'GSL_CONST_MKSA_INCH_OF_WATER)

(cl:defconstant GSL_CONST_MKSA_PSI 6.89475729317d3)

(cl:export 'GSL_CONST_MKSA_PSI)

(cl:defconstant GSL_CONST_MKSA_POISE 1d-1)

(cl:export 'GSL_CONST_MKSA_POISE)

(cl:defconstant GSL_CONST_MKSA_STOKES 1d-4)

(cl:export 'GSL_CONST_MKSA_STOKES)

(cl:defconstant GSL_CONST_MKSA_STILB 1d4)

(cl:export 'GSL_CONST_MKSA_STILB)

(cl:defconstant GSL_CONST_MKSA_LUMEN 1d0)

(cl:export 'GSL_CONST_MKSA_LUMEN)

(cl:defconstant GSL_CONST_MKSA_LUX 1d0)

(cl:export 'GSL_CONST_MKSA_LUX)

(cl:defconstant GSL_CONST_MKSA_PHOT 1d4)

(cl:export 'GSL_CONST_MKSA_PHOT)

(cl:defconstant GSL_CONST_MKSA_FOOTCANDLE 1.076d1)

(cl:export 'GSL_CONST_MKSA_FOOTCANDLE)

(cl:defconstant GSL_CONST_MKSA_LAMBERT 1d4)

(cl:export 'GSL_CONST_MKSA_LAMBERT)

(cl:defconstant GSL_CONST_MKSA_FOOTLAMBERT 1.07639104d1)

(cl:export 'GSL_CONST_MKSA_FOOTLAMBERT)

(cl:defconstant GSL_CONST_MKSA_CURIE 3.7d10)

(cl:export 'GSL_CONST_MKSA_CURIE)

(cl:defconstant GSL_CONST_MKSA_ROENTGEN 2.58d-4)

(cl:export 'GSL_CONST_MKSA_ROENTGEN)

(cl:defconstant GSL_CONST_MKSA_RAD 1d-2)

(cl:export 'GSL_CONST_MKSA_RAD)

(cl:defconstant GSL_CONST_MKSA_SOLAR_MASS 1.98892d30)

(cl:export 'GSL_CONST_MKSA_SOLAR_MASS)

(cl:defconstant GSL_CONST_MKSA_BOHR_RADIUS 5.291772083d-11)

(cl:export 'GSL_CONST_MKSA_BOHR_RADIUS)

(cl:defconstant GSL_CONST_MKSA_NEWTON 1d0)

(cl:export 'GSL_CONST_MKSA_NEWTON)

(cl:defconstant GSL_CONST_MKSA_DYNE 1d-5)

(cl:export 'GSL_CONST_MKSA_DYNE)

(cl:defconstant GSL_CONST_MKSA_JOULE 1d0)

(cl:export 'GSL_CONST_MKSA_JOULE)

(cl:defconstant GSL_CONST_MKSA_ERG 1d-7)

(cl:export 'GSL_CONST_MKSA_ERG)

(cl:defconstant GSL_CONST_MKSA_STEFAN_BOLTZMANN_CONSTANT 5.67040047374d-8)

(cl:export 'GSL_CONST_MKSA_STEFAN_BOLTZMANN_CONSTANT)

(cl:defconstant GSL_CONST_MKSA_THOMSON_CROSS_SECTION 6.65245893699d-29)

(cl:export 'GSL_CONST_MKSA_THOMSON_CROSS_SECTION)

(cl:defconstant GSL_CONST_MKSA_BOHR_MAGNETON 9.27400899d-24)

(cl:export 'GSL_CONST_MKSA_BOHR_MAGNETON)

(cl:defconstant GSL_CONST_MKSA_NUCLEAR_MAGNETON 5.05078317d-27)

(cl:export 'GSL_CONST_MKSA_NUCLEAR_MAGNETON)

(cl:defconstant GSL_CONST_MKSA_ELECTRON_MAGNETIC_MOMENT 9.28476362d-24)

(cl:export 'GSL_CONST_MKSA_ELECTRON_MAGNETIC_MOMENT)

(cl:defconstant GSL_CONST_MKSA_PROTON_MAGNETIC_MOMENT 1.410606633d-26)

(cl:export 'GSL_CONST_MKSA_PROTON_MAGNETIC_MOMENT)

(cl:defconstant GSL_CONST_MKSA_FARADAY 9.64853429775d4)

(cl:export 'GSL_CONST_MKSA_FARADAY)

(cl:defconstant GSL_CONST_MKSA_ELECTRON_CHARGE 1.602176487d-19)

(cl:export 'GSL_CONST_MKSA_ELECTRON_CHARGE)

(cl:defconstant GSL_CONST_MKSA_VACUUM_PERMITTIVITY 8.854187817d-12)

(cl:export 'GSL_CONST_MKSA_VACUUM_PERMITTIVITY)

(cl:defconstant GSL_CONST_MKSA_VACUUM_PERMEABILITY 1.25663706144d-6)

(cl:export 'GSL_CONST_MKSA_VACUUM_PERMEABILITY)

(cl:defconstant GSL_CONST_MKSA_DEBYE 3.33564095198d-30)

(cl:export 'GSL_CONST_MKSA_DEBYE)

(cl:defconstant GSL_CONST_MKSA_GAUSS 1d-4)

(cl:export 'GSL_CONST_MKSA_GAUSS)

(cl:defconstant GSL_CONST_NUM_FINE_STRUCTURE 7.297352533d-3)

(cl:export 'GSL_CONST_NUM_FINE_STRUCTURE)

(cl:defconstant GSL_CONST_NUM_AVOGADRO 6.02214199d23)

(cl:export 'GSL_CONST_NUM_AVOGADRO)

(cl:defconstant GSL_CONST_NUM_YOTTA 1d24)

(cl:export 'GSL_CONST_NUM_YOTTA)

(cl:defconstant GSL_CONST_NUM_ZETTA 1d21)

(cl:export 'GSL_CONST_NUM_ZETTA)

(cl:defconstant GSL_CONST_NUM_EXA 1d18)

(cl:export 'GSL_CONST_NUM_EXA)

(cl:defconstant GSL_CONST_NUM_PETA 1d15)

(cl:export 'GSL_CONST_NUM_PETA)

(cl:defconstant GSL_CONST_NUM_TERA 1d12)

(cl:export 'GSL_CONST_NUM_TERA)

(cl:defconstant GSL_CONST_NUM_GIGA 1d9)

(cl:export 'GSL_CONST_NUM_GIGA)

(cl:defconstant GSL_CONST_NUM_MEGA 1d6)

(cl:export 'GSL_CONST_NUM_MEGA)

(cl:defconstant GSL_CONST_NUM_KILO 1d3)

(cl:export 'GSL_CONST_NUM_KILO)

(cl:defconstant GSL_CONST_NUM_MILLI 1d-3)

(cl:export 'GSL_CONST_NUM_MILLI)

(cl:defconstant GSL_CONST_NUM_MICRO 1d-6)

(cl:export 'GSL_CONST_NUM_MICRO)

(cl:defconstant GSL_CONST_NUM_NANO 1d-9)

(cl:export 'GSL_CONST_NUM_NANO)

(cl:defconstant GSL_CONST_NUM_PICO 1d-12)

(cl:export 'GSL_CONST_NUM_PICO)

(cl:defconstant GSL_CONST_NUM_FEMTO 1d-15)

(cl:export 'GSL_CONST_NUM_FEMTO)

(cl:defconstant GSL_CONST_NUM_ATTO 1d-18)

(cl:export 'GSL_CONST_NUM_ATTO)

(cl:defconstant GSL_CONST_NUM_ZEPTO 1d-21)

(cl:export 'GSL_CONST_NUM_ZEPTO)

(cl:defconstant GSL_CONST_NUM_YOCTO 1d-24)

(cl:export 'GSL_CONST_NUM_YOCTO)

(cffi:defcfun ("gsl_deriv_central" gsl_deriv_central) :int
  (f :pointer)
  (x :double)
  (h :double)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_deriv_central)

(cffi:defcfun ("gsl_deriv_backward" gsl_deriv_backward) :int
  (f :pointer)
  (x :double)
  (h :double)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_deriv_backward)

(cffi:defcfun ("gsl_deriv_forward" gsl_deriv_forward) :int
  (f :pointer)
  (x :double)
  (h :double)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_deriv_forward)

(cffi:defcfun ("gsl_dft_complex_forward" gsl_dft_complex_forward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (result :pointer))

(cl:export 'gsl_dft_complex_forward)

(cffi:defcfun ("gsl_dft_complex_backward" gsl_dft_complex_backward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (result :pointer))

(cl:export 'gsl_dft_complex_backward)

(cffi:defcfun ("gsl_dft_complex_inverse" gsl_dft_complex_inverse) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (result :pointer))

(cl:export 'gsl_dft_complex_inverse)

(cffi:defcfun ("gsl_dft_complex_transform" gsl_dft_complex_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (result :pointer)
  (sign :pointer))

(cl:export 'gsl_dft_complex_transform)

(cffi:defcfun ("gsl_dft_complex_float_forward" gsl_dft_complex_float_forward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (result :pointer))

(cl:export 'gsl_dft_complex_float_forward)

(cffi:defcfun ("gsl_dft_complex_float_backward" gsl_dft_complex_float_backward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (result :pointer))

(cl:export 'gsl_dft_complex_float_backward)

(cffi:defcfun ("gsl_dft_complex_float_inverse" gsl_dft_complex_float_inverse) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (result :pointer))

(cl:export 'gsl_dft_complex_float_inverse)

(cffi:defcfun ("gsl_dft_complex_float_transform" gsl_dft_complex_float_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (result :pointer)
  (sign :pointer))

(cl:export 'gsl_dft_complex_float_transform)

(cffi:defcstruct gsl_dht_struct
	(size :pointer)
	(nu :double)
	(xmax :double)
	(kmax :double)
	(j :pointer)
	(Jjj :pointer)
	(J2 :pointer))

(cl:export 'gsl_dht_struct)

(cl:export 'size)

(cl:export 'nu)

(cl:export 'xmax)

(cl:export 'kmax)

(cl:export 'j)

(cl:export 'Jjj)

(cl:export 'J2)

(cffi:defcfun ("gsl_dht_alloc" gsl_dht_alloc) :pointer
  (size :pointer))

(cl:export 'gsl_dht_alloc)

(cffi:defcfun ("gsl_dht_new" gsl_dht_new) :pointer
  (size :pointer)
  (nu :double)
  (xmax :double))

(cl:export 'gsl_dht_new)

(cffi:defcfun ("gsl_dht_init" gsl_dht_init) :int
  (t_arg0 :pointer)
  (nu :double)
  (xmax :double))

(cl:export 'gsl_dht_init)

(cffi:defcfun ("gsl_dht_x_sample" gsl_dht_x_sample) :double
  (t_arg0 :pointer)
  (n :int))

(cl:export 'gsl_dht_x_sample)

(cffi:defcfun ("gsl_dht_k_sample" gsl_dht_k_sample) :double
  (t_arg0 :pointer)
  (n :int))

(cl:export 'gsl_dht_k_sample)

(cffi:defcfun ("gsl_dht_free" gsl_dht_free) :void
  (t_arg0 :pointer))

(cl:export 'gsl_dht_free)

(cffi:defcfun ("gsl_dht_apply" gsl_dht_apply) :int
  (t_arg0 :pointer)
  (f_in :pointer)
  (f_out :pointer))

(cl:export 'gsl_dht_apply)

(cffi:defcfun ("gsl_diff_central" gsl_diff_central) :int
  (f :pointer)
  (x :double)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_diff_central)

(cffi:defcfun ("gsl_diff_backward" gsl_diff_backward) :int
  (f :pointer)
  (x :double)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_diff_backward)

(cffi:defcfun ("gsl_diff_forward" gsl_diff_forward) :int
  (f :pointer)
  (x :double)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_diff_forward)

(cffi:defcstruct gsl_eigen_symm_workspace
	(size :pointer)
	(d :pointer)
	(sd :pointer))

(cl:export 'gsl_eigen_symm_workspace)

(cl:export 'size)

(cl:export 'd)

(cl:export 'sd)

(cffi:defcfun ("gsl_eigen_symm_alloc" gsl_eigen_symm_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_eigen_symm_alloc)

(cffi:defcfun ("gsl_eigen_symm_free" gsl_eigen_symm_free) :void
  (w :pointer))

(cl:export 'gsl_eigen_symm_free)

(cffi:defcfun ("gsl_eigen_symm" gsl_eigen_symm) :int
  (A :pointer)
  (eval :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_symm)

(cffi:defcstruct gsl_eigen_symmv_workspace
	(size :pointer)
	(d :pointer)
	(sd :pointer)
	(gc :pointer)
	(gs :pointer))

(cl:export 'gsl_eigen_symmv_workspace)

(cl:export 'size)

(cl:export 'd)

(cl:export 'sd)

(cl:export 'gc)

(cl:export 'gs)

(cffi:defcfun ("gsl_eigen_symmv_alloc" gsl_eigen_symmv_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_eigen_symmv_alloc)

(cffi:defcfun ("gsl_eigen_symmv_free" gsl_eigen_symmv_free) :void
  (w :pointer))

(cl:export 'gsl_eigen_symmv_free)

(cffi:defcfun ("gsl_eigen_symmv" gsl_eigen_symmv) :int
  (A :pointer)
  (eval :pointer)
  (evec :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_symmv)

(cffi:defcstruct gsl_eigen_herm_workspace
	(size :pointer)
	(d :pointer)
	(sd :pointer)
	(tau :pointer))

(cl:export 'gsl_eigen_herm_workspace)

(cl:export 'size)

(cl:export 'd)

(cl:export 'sd)

(cl:export 'tau)

(cffi:defcfun ("gsl_eigen_herm_alloc" gsl_eigen_herm_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_eigen_herm_alloc)

(cffi:defcfun ("gsl_eigen_herm_free" gsl_eigen_herm_free) :void
  (w :pointer))

(cl:export 'gsl_eigen_herm_free)

(cffi:defcfun ("gsl_eigen_herm" gsl_eigen_herm) :int
  (A :pointer)
  (eval :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_herm)

(cffi:defcstruct gsl_eigen_hermv_workspace
	(size :pointer)
	(d :pointer)
	(sd :pointer)
	(tau :pointer)
	(gc :pointer)
	(gs :pointer))

(cl:export 'gsl_eigen_hermv_workspace)

(cl:export 'size)

(cl:export 'd)

(cl:export 'sd)

(cl:export 'tau)

(cl:export 'gc)

(cl:export 'gs)

(cffi:defcfun ("gsl_eigen_hermv_alloc" gsl_eigen_hermv_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_eigen_hermv_alloc)

(cffi:defcfun ("gsl_eigen_hermv_free" gsl_eigen_hermv_free) :void
  (w :pointer))

(cl:export 'gsl_eigen_hermv_free)

(cffi:defcfun ("gsl_eigen_hermv" gsl_eigen_hermv) :int
  (A :pointer)
  (eval :pointer)
  (evec :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_hermv)

(cffi:defcstruct gsl_eigen_francis_workspace
	(size :pointer)
	(max_iterations :pointer)
	(n_iter :pointer)
	(n_evals :pointer)
	(compute_t :int)
	(H :pointer)
	(Z :pointer))

(cl:export 'gsl_eigen_francis_workspace)

(cl:export 'size)

(cl:export 'max_iterations)

(cl:export 'n_iter)

(cl:export 'n_evals)

(cl:export 'compute_t)

(cl:export 'H)

(cl:export 'Z)

(cffi:defcfun ("gsl_eigen_francis_alloc" gsl_eigen_francis_alloc) :pointer)

(cl:export 'gsl_eigen_francis_alloc)

(cffi:defcfun ("gsl_eigen_francis_free" gsl_eigen_francis_free) :void
  (w :pointer))

(cl:export 'gsl_eigen_francis_free)

(cffi:defcfun ("gsl_eigen_francis_T" gsl_eigen_francis_T) :void
  (compute_t :int)
  (w :pointer))

(cl:export 'gsl_eigen_francis_T)

(cffi:defcfun ("gsl_eigen_francis" gsl_eigen_francis) :int
  (H :pointer)
  (eval :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_francis)

(cffi:defcfun ("gsl_eigen_francis_Z" gsl_eigen_francis_Z) :int
  (H :pointer)
  (eval :pointer)
  (Z :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_francis_Z)

(cffi:defcstruct gsl_eigen_nonsymm_workspace
	(size :pointer)
	(diag :pointer)
	(tau :pointer)
	(Z :pointer)
	(do_balance :int)
	(n_evals :pointer)
	(francis_workspace_p :pointer))

(cl:export 'gsl_eigen_nonsymm_workspace)

(cl:export 'size)

(cl:export 'diag)

(cl:export 'tau)

(cl:export 'Z)

(cl:export 'do_balance)

(cl:export 'n_evals)

(cl:export 'francis_workspace_p)

(cffi:defcfun ("gsl_eigen_nonsymm_alloc" gsl_eigen_nonsymm_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_eigen_nonsymm_alloc)

(cffi:defcfun ("gsl_eigen_nonsymm_free" gsl_eigen_nonsymm_free) :void
  (w :pointer))

(cl:export 'gsl_eigen_nonsymm_free)

(cffi:defcfun ("gsl_eigen_nonsymm_params" gsl_eigen_nonsymm_params) :void
  (compute_t :int)
  (balance :int)
  (w :pointer))

(cl:export 'gsl_eigen_nonsymm_params)

(cffi:defcfun ("gsl_eigen_nonsymm" gsl_eigen_nonsymm) :int
  (A :pointer)
  (eval :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_nonsymm)

(cffi:defcfun ("gsl_eigen_nonsymm_Z" gsl_eigen_nonsymm_Z) :int
  (A :pointer)
  (eval :pointer)
  (Z :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_nonsymm_Z)

(cffi:defcstruct gsl_eigen_nonsymmv_workspace
	(size :pointer)
	(work :pointer)
	(work2 :pointer)
	(work3 :pointer)
	(Z :pointer)
	(nonsymm_workspace_p :pointer))

(cl:export 'gsl_eigen_nonsymmv_workspace)

(cl:export 'size)

(cl:export 'work)

(cl:export 'work2)

(cl:export 'work3)

(cl:export 'Z)

(cl:export 'nonsymm_workspace_p)

(cffi:defcfun ("gsl_eigen_nonsymmv_alloc" gsl_eigen_nonsymmv_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_eigen_nonsymmv_alloc)

(cffi:defcfun ("gsl_eigen_nonsymmv_free" gsl_eigen_nonsymmv_free) :void
  (w :pointer))

(cl:export 'gsl_eigen_nonsymmv_free)

(cffi:defcfun ("gsl_eigen_nonsymmv_params" gsl_eigen_nonsymmv_params) :void
  (balance :int)
  (w :pointer))

(cl:export 'gsl_eigen_nonsymmv_params)

(cffi:defcfun ("gsl_eigen_nonsymmv" gsl_eigen_nonsymmv) :int
  (A :pointer)
  (eval :pointer)
  (evec :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_nonsymmv)

(cffi:defcfun ("gsl_eigen_nonsymmv_Z" gsl_eigen_nonsymmv_Z) :int
  (A :pointer)
  (eval :pointer)
  (evec :pointer)
  (Z :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_nonsymmv_Z)

(cffi:defcstruct gsl_eigen_gensymm_workspace
	(size :pointer)
	(symm_workspace_p :pointer))

(cl:export 'gsl_eigen_gensymm_workspace)

(cl:export 'size)

(cl:export 'symm_workspace_p)

(cffi:defcfun ("gsl_eigen_gensymm_alloc" gsl_eigen_gensymm_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_eigen_gensymm_alloc)

(cffi:defcfun ("gsl_eigen_gensymm_free" gsl_eigen_gensymm_free) :void
  (w :pointer))

(cl:export 'gsl_eigen_gensymm_free)

(cffi:defcfun ("gsl_eigen_gensymm" gsl_eigen_gensymm) :int
  (A :pointer)
  (B :pointer)
  (eval :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_gensymm)

(cffi:defcfun ("gsl_eigen_gensymm_standardize" gsl_eigen_gensymm_standardize) :int
  (A :pointer)
  (B :pointer))

(cl:export 'gsl_eigen_gensymm_standardize)

(cffi:defcstruct gsl_eigen_gensymmv_workspace
	(size :pointer)
	(symmv_workspace_p :pointer))

(cl:export 'gsl_eigen_gensymmv_workspace)

(cl:export 'size)

(cl:export 'symmv_workspace_p)

(cffi:defcfun ("gsl_eigen_gensymmv_alloc" gsl_eigen_gensymmv_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_eigen_gensymmv_alloc)

(cffi:defcfun ("gsl_eigen_gensymmv_free" gsl_eigen_gensymmv_free) :void
  (w :pointer))

(cl:export 'gsl_eigen_gensymmv_free)

(cffi:defcfun ("gsl_eigen_gensymmv" gsl_eigen_gensymmv) :int
  (A :pointer)
  (B :pointer)
  (eval :pointer)
  (evec :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_gensymmv)

(cffi:defcstruct gsl_eigen_genherm_workspace
	(size :pointer)
	(herm_workspace_p :pointer))

(cl:export 'gsl_eigen_genherm_workspace)

(cl:export 'size)

(cl:export 'herm_workspace_p)

(cffi:defcfun ("gsl_eigen_genherm_alloc" gsl_eigen_genherm_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_eigen_genherm_alloc)

(cffi:defcfun ("gsl_eigen_genherm_free" gsl_eigen_genherm_free) :void
  (w :pointer))

(cl:export 'gsl_eigen_genherm_free)

(cffi:defcfun ("gsl_eigen_genherm" gsl_eigen_genherm) :int
  (A :pointer)
  (B :pointer)
  (eval :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_genherm)

(cffi:defcfun ("gsl_eigen_genherm_standardize" gsl_eigen_genherm_standardize) :int
  (A :pointer)
  (B :pointer))

(cl:export 'gsl_eigen_genherm_standardize)

(cffi:defcstruct gsl_eigen_genhermv_workspace
	(size :pointer)
	(hermv_workspace_p :pointer))

(cl:export 'gsl_eigen_genhermv_workspace)

(cl:export 'size)

(cl:export 'hermv_workspace_p)

(cffi:defcfun ("gsl_eigen_genhermv_alloc" gsl_eigen_genhermv_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_eigen_genhermv_alloc)

(cffi:defcfun ("gsl_eigen_genhermv_free" gsl_eigen_genhermv_free) :void
  (w :pointer))

(cl:export 'gsl_eigen_genhermv_free)

(cffi:defcfun ("gsl_eigen_genhermv" gsl_eigen_genhermv) :int
  (A :pointer)
  (B :pointer)
  (eval :pointer)
  (evec :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_genhermv)

(cffi:defcstruct gsl_eigen_gen_workspace
	(size :pointer)
	(work :pointer)
	(n_evals :pointer)
	(max_iterations :pointer)
	(n_iter :pointer)
	(eshift :double)
	(needtop :int)
	(atol :double)
	(btol :double)
	(ascale :double)
	(bscale :double)
	(H :pointer)
	(R :pointer)
	(compute_s :int)
	(compute_t :int)
	(Q :pointer)
	(Z :pointer))

(cl:export 'gsl_eigen_gen_workspace)

(cl:export 'size)

(cl:export 'work)

(cl:export 'n_evals)

(cl:export 'max_iterations)

(cl:export 'n_iter)

(cl:export 'eshift)

(cl:export 'needtop)

(cl:export 'atol)

(cl:export 'btol)

(cl:export 'ascale)

(cl:export 'bscale)

(cl:export 'H)

(cl:export 'R)

(cl:export 'compute_s)

(cl:export 'compute_t)

(cl:export 'Q)

(cl:export 'Z)

(cffi:defcfun ("gsl_eigen_gen_alloc" gsl_eigen_gen_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_eigen_gen_alloc)

(cffi:defcfun ("gsl_eigen_gen_free" gsl_eigen_gen_free) :void
  (w :pointer))

(cl:export 'gsl_eigen_gen_free)

(cffi:defcfun ("gsl_eigen_gen_params" gsl_eigen_gen_params) :void
  (compute_s :int)
  (compute_t :int)
  (balance :int)
  (w :pointer))

(cl:export 'gsl_eigen_gen_params)

(cffi:defcfun ("gsl_eigen_gen" gsl_eigen_gen) :int
  (A :pointer)
  (B :pointer)
  (alpha :pointer)
  (beta :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_gen)

(cffi:defcfun ("gsl_eigen_gen_QZ" gsl_eigen_gen_QZ) :int
  (A :pointer)
  (B :pointer)
  (alpha :pointer)
  (beta :pointer)
  (Q :pointer)
  (Z :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_gen_QZ)

(cffi:defcstruct gsl_eigen_genv_workspace
	(size :pointer)
	(work1 :pointer)
	(work2 :pointer)
	(work3 :pointer)
	(work4 :pointer)
	(work5 :pointer)
	(work6 :pointer)
	(Q :pointer)
	(Z :pointer)
	(gen_workspace_p :pointer))

(cl:export 'gsl_eigen_genv_workspace)

(cl:export 'size)

(cl:export 'work1)

(cl:export 'work2)

(cl:export 'work3)

(cl:export 'work4)

(cl:export 'work5)

(cl:export 'work6)

(cl:export 'Q)

(cl:export 'Z)

(cl:export 'gen_workspace_p)

(cffi:defcfun ("gsl_eigen_genv_alloc" gsl_eigen_genv_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_eigen_genv_alloc)

(cffi:defcfun ("gsl_eigen_genv_free" gsl_eigen_genv_free) :void
  (w :pointer))

(cl:export 'gsl_eigen_genv_free)

(cffi:defcfun ("gsl_eigen_genv" gsl_eigen_genv) :int
  (A :pointer)
  (B :pointer)
  (alpha :pointer)
  (beta :pointer)
  (evec :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_genv)

(cffi:defcfun ("gsl_eigen_genv_QZ" gsl_eigen_genv_QZ) :int
  (A :pointer)
  (B :pointer)
  (alpha :pointer)
  (beta :pointer)
  (evec :pointer)
  (Q :pointer)
  (Z :pointer)
  (w :pointer))

(cl:export 'gsl_eigen_genv_QZ)

(cffi:defcenum gsl_eigen_sort_t
	:GSL_EIGEN_SORT_VAL_ASC
	:GSL_EIGEN_SORT_VAL_DESC
	:GSL_EIGEN_SORT_ABS_ASC
	:GSL_EIGEN_SORT_ABS_DESC)

(cl:export 'gsl_eigen_sort_t)

(cffi:defcfun ("gsl_eigen_symmv_sort" gsl_eigen_symmv_sort) :int
  (eval :pointer)
  (evec :pointer)
  (sort_type gsl_eigen_sort_t))

(cl:export 'gsl_eigen_symmv_sort)

(cffi:defcfun ("gsl_eigen_hermv_sort" gsl_eigen_hermv_sort) :int
  (eval :pointer)
  (evec :pointer)
  (sort_type gsl_eigen_sort_t))

(cl:export 'gsl_eigen_hermv_sort)

(cffi:defcfun ("gsl_eigen_nonsymmv_sort" gsl_eigen_nonsymmv_sort) :int
  (eval :pointer)
  (evec :pointer)
  (sort_type gsl_eigen_sort_t))

(cl:export 'gsl_eigen_nonsymmv_sort)

(cffi:defcfun ("gsl_eigen_gensymmv_sort" gsl_eigen_gensymmv_sort) :int
  (eval :pointer)
  (evec :pointer)
  (sort_type gsl_eigen_sort_t))

(cl:export 'gsl_eigen_gensymmv_sort)

(cffi:defcfun ("gsl_eigen_genhermv_sort" gsl_eigen_genhermv_sort) :int
  (eval :pointer)
  (evec :pointer)
  (sort_type gsl_eigen_sort_t))

(cl:export 'gsl_eigen_genhermv_sort)

(cffi:defcfun ("gsl_eigen_genv_sort" gsl_eigen_genv_sort) :int
  (alpha :pointer)
  (beta :pointer)
  (evec :pointer)
  (sort_type gsl_eigen_sort_t))

(cl:export 'gsl_eigen_genv_sort)

(cffi:defcfun ("gsl_schur_gen_eigvals" gsl_schur_gen_eigvals) :int
  (A :pointer)
  (B :pointer)
  (wr1 :pointer)
  (wr2 :pointer)
  (wi :pointer)
  (scale1 :pointer)
  (scale2 :pointer))

(cl:export 'gsl_schur_gen_eigvals)

(cffi:defcfun ("gsl_schur_solve_equation" gsl_schur_solve_equation) :int
  (ca :double)
  (A :pointer)
  (z :double)
  (d1 :double)
  (d2 :double)
  (b :pointer)
  (x :pointer)
  (s :pointer)
  (xnorm :pointer)
  (smin :double))

(cl:export 'gsl_schur_solve_equation)

(cffi:defcfun ("gsl_schur_solve_equation_z" gsl_schur_solve_equation_z) :int
  (ca :double)
  (A :pointer)
  (z :pointer)
  (d1 :double)
  (d2 :double)
  (b :pointer)
  (x :pointer)
  (s :pointer)
  (xnorm :pointer)
  (smin :double))

(cl:export 'gsl_schur_solve_equation_z)

(cffi:defcfun ("gsl_eigen_jacobi" gsl_eigen_jacobi) :int
  (matrix :pointer)
  (eval :pointer)
  (evec :pointer)
  (max_rot :unsigned-int)
  (nrot :pointer))

(cl:export 'gsl_eigen_jacobi)

(cffi:defcfun ("gsl_eigen_invert_jacobi" gsl_eigen_invert_jacobi) :int
  (matrix :pointer)
  (ainv :pointer)
  (max_rot :unsigned-int))

(cl:export 'gsl_eigen_invert_jacobi)

(cffi:defcenum gsl_fft_direction
	(:gsl_fft_forward #.-1)
	(:gsl_fft_backward #.+1))

(cl:export 'gsl_fft_direction)

(cffi:defcfun ("gsl_fft_complex_radix2_forward" gsl_fft_complex_radix2_forward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_complex_radix2_forward)

(cffi:defcfun ("gsl_fft_complex_radix2_backward" gsl_fft_complex_radix2_backward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_complex_radix2_backward)

(cffi:defcfun ("gsl_fft_complex_radix2_inverse" gsl_fft_complex_radix2_inverse) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_complex_radix2_inverse)

(cffi:defcfun ("gsl_fft_complex_radix2_transform" gsl_fft_complex_radix2_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (sign gsl_fft_direction))

(cl:export 'gsl_fft_complex_radix2_transform)

(cffi:defcfun ("gsl_fft_complex_radix2_dif_forward" gsl_fft_complex_radix2_dif_forward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_complex_radix2_dif_forward)

(cffi:defcfun ("gsl_fft_complex_radix2_dif_backward" gsl_fft_complex_radix2_dif_backward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_complex_radix2_dif_backward)

(cffi:defcfun ("gsl_fft_complex_radix2_dif_inverse" gsl_fft_complex_radix2_dif_inverse) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_complex_radix2_dif_inverse)

(cffi:defcfun ("gsl_fft_complex_radix2_dif_transform" gsl_fft_complex_radix2_dif_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (sign gsl_fft_direction))

(cl:export 'gsl_fft_complex_radix2_dif_transform)

(cffi:defcstruct gsl_fft_complex_wavetable
	(n :pointer)
	(nf :pointer)
	(factor :pointer)
	(twiddle :pointer)
	(trig :pointer))

(cl:export 'gsl_fft_complex_wavetable)

(cl:export 'n)

(cl:export 'nf)

(cl:export 'factor)

(cl:export 'twiddle)

(cl:export 'trig)

(cffi:defcstruct gsl_fft_complex_workspace
	(n :pointer)
	(scratch :pointer))

(cl:export 'gsl_fft_complex_workspace)

(cl:export 'n)

(cl:export 'scratch)

(cffi:defcfun ("gsl_fft_complex_wavetable_alloc" gsl_fft_complex_wavetable_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_fft_complex_wavetable_alloc)

(cffi:defcfun ("gsl_fft_complex_wavetable_free" gsl_fft_complex_wavetable_free) :void
  (wavetable :pointer))

(cl:export 'gsl_fft_complex_wavetable_free)

(cffi:defcfun ("gsl_fft_complex_workspace_alloc" gsl_fft_complex_workspace_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_fft_complex_workspace_alloc)

(cffi:defcfun ("gsl_fft_complex_workspace_free" gsl_fft_complex_workspace_free) :void
  (workspace :pointer))

(cl:export 'gsl_fft_complex_workspace_free)

(cffi:defcfun ("gsl_fft_complex_memcpy" gsl_fft_complex_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_fft_complex_memcpy)

(cffi:defcfun ("gsl_fft_complex_forward" gsl_fft_complex_forward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_complex_forward)

(cffi:defcfun ("gsl_fft_complex_backward" gsl_fft_complex_backward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_complex_backward)

(cffi:defcfun ("gsl_fft_complex_inverse" gsl_fft_complex_inverse) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_complex_inverse)

(cffi:defcfun ("gsl_fft_complex_transform" gsl_fft_complex_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer)
  (sign gsl_fft_direction))

(cl:export 'gsl_fft_complex_transform)

(cffi:defcfun ("gsl_fft_complex_float_radix2_forward" gsl_fft_complex_float_radix2_forward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_complex_float_radix2_forward)

(cffi:defcfun ("gsl_fft_complex_float_radix2_backward" gsl_fft_complex_float_radix2_backward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_complex_float_radix2_backward)

(cffi:defcfun ("gsl_fft_complex_float_radix2_inverse" gsl_fft_complex_float_radix2_inverse) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_complex_float_radix2_inverse)

(cffi:defcfun ("gsl_fft_complex_float_radix2_transform" gsl_fft_complex_float_radix2_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (sign gsl_fft_direction))

(cl:export 'gsl_fft_complex_float_radix2_transform)

(cffi:defcfun ("gsl_fft_complex_float_radix2_dif_forward" gsl_fft_complex_float_radix2_dif_forward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_complex_float_radix2_dif_forward)

(cffi:defcfun ("gsl_fft_complex_float_radix2_dif_backward" gsl_fft_complex_float_radix2_dif_backward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_complex_float_radix2_dif_backward)

(cffi:defcfun ("gsl_fft_complex_float_radix2_dif_inverse" gsl_fft_complex_float_radix2_dif_inverse) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_complex_float_radix2_dif_inverse)

(cffi:defcfun ("gsl_fft_complex_float_radix2_dif_transform" gsl_fft_complex_float_radix2_dif_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (sign gsl_fft_direction))

(cl:export 'gsl_fft_complex_float_radix2_dif_transform)

(cffi:defcstruct gsl_fft_complex_wavetable_float
	(n :pointer)
	(nf :pointer)
	(factor :pointer)
	(twiddle :pointer)
	(trig :pointer))

(cl:export 'gsl_fft_complex_wavetable_float)

(cl:export 'n)

(cl:export 'nf)

(cl:export 'factor)

(cl:export 'twiddle)

(cl:export 'trig)

(cffi:defcstruct gsl_fft_complex_workspace_float
	(n :pointer)
	(scratch :pointer))

(cl:export 'gsl_fft_complex_workspace_float)

(cl:export 'n)

(cl:export 'scratch)

(cffi:defcfun ("gsl_fft_complex_wavetable_float_alloc" gsl_fft_complex_wavetable_float_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_fft_complex_wavetable_float_alloc)

(cffi:defcfun ("gsl_fft_complex_wavetable_float_free" gsl_fft_complex_wavetable_float_free) :void
  (wavetable :pointer))

(cl:export 'gsl_fft_complex_wavetable_float_free)

(cffi:defcfun ("gsl_fft_complex_workspace_float_alloc" gsl_fft_complex_workspace_float_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_fft_complex_workspace_float_alloc)

(cffi:defcfun ("gsl_fft_complex_workspace_float_free" gsl_fft_complex_workspace_float_free) :void
  (workspace :pointer))

(cl:export 'gsl_fft_complex_workspace_float_free)

(cffi:defcfun ("gsl_fft_complex_float_memcpy" gsl_fft_complex_float_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_fft_complex_float_memcpy)

(cffi:defcfun ("gsl_fft_complex_float_forward" gsl_fft_complex_float_forward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_complex_float_forward)

(cffi:defcfun ("gsl_fft_complex_float_backward" gsl_fft_complex_float_backward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_complex_float_backward)

(cffi:defcfun ("gsl_fft_complex_float_inverse" gsl_fft_complex_float_inverse) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_complex_float_inverse)

(cffi:defcfun ("gsl_fft_complex_float_transform" gsl_fft_complex_float_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer)
  (sign gsl_fft_direction))

(cl:export 'gsl_fft_complex_float_transform)

(cffi:defcfun ("gsl_fft_halfcomplex_radix2_backward" gsl_fft_halfcomplex_radix2_backward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_halfcomplex_radix2_backward)

(cffi:defcfun ("gsl_fft_halfcomplex_radix2_inverse" gsl_fft_halfcomplex_radix2_inverse) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_halfcomplex_radix2_inverse)

(cffi:defcfun ("gsl_fft_halfcomplex_radix2_transform" gsl_fft_halfcomplex_radix2_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_halfcomplex_radix2_transform)

(cffi:defcstruct gsl_fft_halfcomplex_wavetable
	(n :pointer)
	(nf :pointer)
	(factor :pointer)
	(twiddle :pointer)
	(trig :pointer))

(cl:export 'gsl_fft_halfcomplex_wavetable)

(cl:export 'n)

(cl:export 'nf)

(cl:export 'factor)

(cl:export 'twiddle)

(cl:export 'trig)

(cffi:defcfun ("gsl_fft_halfcomplex_wavetable_alloc" gsl_fft_halfcomplex_wavetable_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_fft_halfcomplex_wavetable_alloc)

(cffi:defcfun ("gsl_fft_halfcomplex_wavetable_free" gsl_fft_halfcomplex_wavetable_free) :void
  (wavetable :pointer))

(cl:export 'gsl_fft_halfcomplex_wavetable_free)

(cffi:defcfun ("gsl_fft_halfcomplex_backward" gsl_fft_halfcomplex_backward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_halfcomplex_backward)

(cffi:defcfun ("gsl_fft_halfcomplex_inverse" gsl_fft_halfcomplex_inverse) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_halfcomplex_inverse)

(cffi:defcfun ("gsl_fft_halfcomplex_transform" gsl_fft_halfcomplex_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_halfcomplex_transform)

(cffi:defcfun ("gsl_fft_halfcomplex_unpack" gsl_fft_halfcomplex_unpack) :int
  (halfcomplex_coefficient :pointer)
  (complex_coefficient :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_halfcomplex_unpack)

(cffi:defcfun ("gsl_fft_halfcomplex_radix2_unpack" gsl_fft_halfcomplex_radix2_unpack) :int
  (halfcomplex_coefficient :pointer)
  (complex_coefficient :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_halfcomplex_radix2_unpack)

(cffi:defcfun ("gsl_fft_halfcomplex_float_radix2_backward" gsl_fft_halfcomplex_float_radix2_backward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_halfcomplex_float_radix2_backward)

(cffi:defcfun ("gsl_fft_halfcomplex_float_radix2_inverse" gsl_fft_halfcomplex_float_radix2_inverse) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_halfcomplex_float_radix2_inverse)

(cffi:defcfun ("gsl_fft_halfcomplex_float_radix2_transform" gsl_fft_halfcomplex_float_radix2_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_halfcomplex_float_radix2_transform)

(cffi:defcstruct gsl_fft_halfcomplex_wavetable_float
	(n :pointer)
	(nf :pointer)
	(factor :pointer)
	(twiddle :pointer)
	(trig :pointer))

(cl:export 'gsl_fft_halfcomplex_wavetable_float)

(cl:export 'n)

(cl:export 'nf)

(cl:export 'factor)

(cl:export 'twiddle)

(cl:export 'trig)

(cffi:defcfun ("gsl_fft_halfcomplex_wavetable_float_alloc" gsl_fft_halfcomplex_wavetable_float_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_fft_halfcomplex_wavetable_float_alloc)

(cffi:defcfun ("gsl_fft_halfcomplex_wavetable_float_free" gsl_fft_halfcomplex_wavetable_float_free) :void
  (wavetable :pointer))

(cl:export 'gsl_fft_halfcomplex_wavetable_float_free)

(cffi:defcfun ("gsl_fft_halfcomplex_float_backward" gsl_fft_halfcomplex_float_backward) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_halfcomplex_float_backward)

(cffi:defcfun ("gsl_fft_halfcomplex_float_inverse" gsl_fft_halfcomplex_float_inverse) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_halfcomplex_float_inverse)

(cffi:defcfun ("gsl_fft_halfcomplex_float_transform" gsl_fft_halfcomplex_float_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_halfcomplex_float_transform)

(cffi:defcfun ("gsl_fft_halfcomplex_float_unpack" gsl_fft_halfcomplex_float_unpack) :int
  (halfcomplex_coefficient :pointer)
  (complex_coefficient :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_halfcomplex_float_unpack)

(cffi:defcfun ("gsl_fft_halfcomplex_float_radix2_unpack" gsl_fft_halfcomplex_float_radix2_unpack) :int
  (halfcomplex_coefficient :pointer)
  (complex_coefficient :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_halfcomplex_float_radix2_unpack)

(cffi:defcfun ("gsl_fft_real_radix2_transform" gsl_fft_real_radix2_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_real_radix2_transform)

(cffi:defcstruct gsl_fft_real_wavetable
	(n :pointer)
	(nf :pointer)
	(factor :pointer)
	(twiddle :pointer)
	(trig :pointer))

(cl:export 'gsl_fft_real_wavetable)

(cl:export 'n)

(cl:export 'nf)

(cl:export 'factor)

(cl:export 'twiddle)

(cl:export 'trig)

(cffi:defcstruct gsl_fft_real_workspace
	(n :pointer)
	(scratch :pointer))

(cl:export 'gsl_fft_real_workspace)

(cl:export 'n)

(cl:export 'scratch)

(cffi:defcfun ("gsl_fft_real_wavetable_alloc" gsl_fft_real_wavetable_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_fft_real_wavetable_alloc)

(cffi:defcfun ("gsl_fft_real_wavetable_free" gsl_fft_real_wavetable_free) :void
  (wavetable :pointer))

(cl:export 'gsl_fft_real_wavetable_free)

(cffi:defcfun ("gsl_fft_real_workspace_alloc" gsl_fft_real_workspace_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_fft_real_workspace_alloc)

(cffi:defcfun ("gsl_fft_real_workspace_free" gsl_fft_real_workspace_free) :void
  (workspace :pointer))

(cl:export 'gsl_fft_real_workspace_free)

(cffi:defcfun ("gsl_fft_real_transform" gsl_fft_real_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_real_transform)

(cffi:defcfun ("gsl_fft_real_unpack" gsl_fft_real_unpack) :int
  (real_coefficient :pointer)
  (complex_coefficient :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_real_unpack)

(cffi:defcfun ("gsl_fft_real_float_radix2_transform" gsl_fft_real_float_radix2_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_real_float_radix2_transform)

(cffi:defcstruct gsl_fft_real_wavetable_float
	(n :pointer)
	(nf :pointer)
	(factor :pointer)
	(twiddle :pointer)
	(trig :pointer))

(cl:export 'gsl_fft_real_wavetable_float)

(cl:export 'n)

(cl:export 'nf)

(cl:export 'factor)

(cl:export 'twiddle)

(cl:export 'trig)

(cffi:defcstruct gsl_fft_real_workspace_float
	(n :pointer)
	(scratch :pointer))

(cl:export 'gsl_fft_real_workspace_float)

(cl:export 'n)

(cl:export 'scratch)

(cffi:defcfun ("gsl_fft_real_wavetable_float_alloc" gsl_fft_real_wavetable_float_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_fft_real_wavetable_float_alloc)

(cffi:defcfun ("gsl_fft_real_wavetable_float_free" gsl_fft_real_wavetable_float_free) :void
  (wavetable :pointer))

(cl:export 'gsl_fft_real_wavetable_float_free)

(cffi:defcfun ("gsl_fft_real_workspace_float_alloc" gsl_fft_real_workspace_float_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_fft_real_workspace_float_alloc)

(cffi:defcfun ("gsl_fft_real_workspace_float_free" gsl_fft_real_workspace_float_free) :void
  (workspace :pointer))

(cl:export 'gsl_fft_real_workspace_float_free)

(cffi:defcfun ("gsl_fft_real_float_transform" gsl_fft_real_float_transform) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wavetable :pointer)
  (work :pointer))

(cl:export 'gsl_fft_real_float_transform)

(cffi:defcfun ("gsl_fft_real_float_unpack" gsl_fft_real_float_unpack) :int
  (real_float_coefficient :pointer)
  (complex_coefficient :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_fft_real_float_unpack)

(cffi:defcfun ("gsl_fit_linear" gsl_fit_linear) :int
  (x :pointer)
  (xstride :pointer)
  (y :pointer)
  (ystride :pointer)
  (n :pointer)
  (c0 :pointer)
  (c1 :pointer)
  (cov00 :pointer)
  (cov01 :pointer)
  (cov11 :pointer)
  (sumsq :pointer))

(cl:export 'gsl_fit_linear)

(cffi:defcfun ("gsl_fit_wlinear" gsl_fit_wlinear) :int
  (x :pointer)
  (xstride :pointer)
  (w :pointer)
  (wstride :pointer)
  (y :pointer)
  (ystride :pointer)
  (n :pointer)
  (c0 :pointer)
  (c1 :pointer)
  (cov00 :pointer)
  (cov01 :pointer)
  (cov11 :pointer)
  (chisq :pointer))

(cl:export 'gsl_fit_wlinear)

(cffi:defcfun ("gsl_fit_linear_est" gsl_fit_linear_est) :int
  (x :double)
  (c0 :double)
  (c1 :double)
  (cov00 :double)
  (cov01 :double)
  (cov11 :double)
  (y :pointer)
  (y_err :pointer))

(cl:export 'gsl_fit_linear_est)

(cffi:defcfun ("gsl_fit_mul" gsl_fit_mul) :int
  (x :pointer)
  (xstride :pointer)
  (y :pointer)
  (ystride :pointer)
  (n :pointer)
  (c1 :pointer)
  (cov11 :pointer)
  (sumsq :pointer))

(cl:export 'gsl_fit_mul)

(cffi:defcfun ("gsl_fit_wmul" gsl_fit_wmul) :int
  (x :pointer)
  (xstride :pointer)
  (w :pointer)
  (wstride :pointer)
  (y :pointer)
  (ystride :pointer)
  (n :pointer)
  (c1 :pointer)
  (cov11 :pointer)
  (sumsq :pointer))

(cl:export 'gsl_fit_wmul)

(cffi:defcfun ("gsl_fit_mul_est" gsl_fit_mul_est) :int
  (x :double)
  (c1 :double)
  (cov11 :double)
  (y :pointer)
  (y_err :pointer))

(cl:export 'gsl_fit_mul_est)

(cffi:defcfun ("gsl_heapsort" gsl_heapsort) :void
  (array :pointer)
  (count :pointer)
  (size :pointer)
  (compare :pointer))

(cl:export 'gsl_heapsort)

(cffi:defcfun ("gsl_heapsort_index" gsl_heapsort_index) :int
  (p :pointer)
  (array :pointer)
  (count :pointer)
  (size :pointer)
  (compare :pointer))

(cl:export 'gsl_heapsort_index)

(cffi:defcstruct gsl_histogram
	(n :pointer)
	(range :pointer)
	(bin :pointer))

(cl:export 'gsl_histogram)

(cl:export 'n)

(cl:export 'range)

(cl:export 'bin)

(cffi:defcstruct gsl_histogram_pdf
	(n :pointer)
	(range :pointer)
	(sum :pointer))

(cl:export 'gsl_histogram_pdf)

(cl:export 'n)

(cl:export 'range)

(cl:export 'sum)

(cffi:defcfun ("gsl_histogram_alloc" gsl_histogram_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_histogram_alloc)

(cffi:defcfun ("gsl_histogram_calloc" gsl_histogram_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_histogram_calloc)

(cffi:defcfun ("gsl_histogram_calloc_uniform" gsl_histogram_calloc_uniform) :pointer
  (n :pointer)
  (xmin :double)
  (xmax :double))

(cl:export 'gsl_histogram_calloc_uniform)

(cffi:defcfun ("gsl_histogram_free" gsl_histogram_free) :void
  (h :pointer))

(cl:export 'gsl_histogram_free)

(cffi:defcfun ("gsl_histogram_increment" gsl_histogram_increment) :int
  (h :pointer)
  (x :double))

(cl:export 'gsl_histogram_increment)

(cffi:defcfun ("gsl_histogram_accumulate" gsl_histogram_accumulate) :int
  (h :pointer)
  (x :double)
  (weight :double))

(cl:export 'gsl_histogram_accumulate)

(cffi:defcfun ("gsl_histogram_find" gsl_histogram_find) :int
  (h :pointer)
  (x :double)
  (i :pointer))

(cl:export 'gsl_histogram_find)

(cffi:defcfun ("gsl_histogram_get" gsl_histogram_get) :double
  (h :pointer)
  (i :pointer))

(cl:export 'gsl_histogram_get)

(cffi:defcfun ("gsl_histogram_get_range" gsl_histogram_get_range) :int
  (h :pointer)
  (i :pointer)
  (lower :pointer)
  (upper :pointer))

(cl:export 'gsl_histogram_get_range)

(cffi:defcfun ("gsl_histogram_max" gsl_histogram_max) :double
  (h :pointer))

(cl:export 'gsl_histogram_max)

(cffi:defcfun ("gsl_histogram_min" gsl_histogram_min) :double
  (h :pointer))

(cl:export 'gsl_histogram_min)

(cffi:defcfun ("gsl_histogram_bins" gsl_histogram_bins) :pointer
  (h :pointer))

(cl:export 'gsl_histogram_bins)

(cffi:defcfun ("gsl_histogram_reset" gsl_histogram_reset) :void
  (h :pointer))

(cl:export 'gsl_histogram_reset)

(cffi:defcfun ("gsl_histogram_calloc_range" gsl_histogram_calloc_range) :pointer
  (n :pointer)
  (range :pointer))

(cl:export 'gsl_histogram_calloc_range)

(cffi:defcfun ("gsl_histogram_set_ranges" gsl_histogram_set_ranges) :int
  (h :pointer)
  (range :pointer)
  (size :pointer))

(cl:export 'gsl_histogram_set_ranges)

(cffi:defcfun ("gsl_histogram_set_ranges_uniform" gsl_histogram_set_ranges_uniform) :int
  (h :pointer)
  (xmin :double)
  (xmax :double))

(cl:export 'gsl_histogram_set_ranges_uniform)

(cffi:defcfun ("gsl_histogram_memcpy" gsl_histogram_memcpy) :int
  (dest :pointer)
  (source :pointer))

(cl:export 'gsl_histogram_memcpy)

(cffi:defcfun ("gsl_histogram_clone" gsl_histogram_clone) :pointer
  (source :pointer))

(cl:export 'gsl_histogram_clone)

(cffi:defcfun ("gsl_histogram_max_val" gsl_histogram_max_val) :double
  (h :pointer))

(cl:export 'gsl_histogram_max_val)

(cffi:defcfun ("gsl_histogram_max_bin" gsl_histogram_max_bin) :pointer
  (h :pointer))

(cl:export 'gsl_histogram_max_bin)

(cffi:defcfun ("gsl_histogram_min_val" gsl_histogram_min_val) :double
  (h :pointer))

(cl:export 'gsl_histogram_min_val)

(cffi:defcfun ("gsl_histogram_min_bin" gsl_histogram_min_bin) :pointer
  (h :pointer))

(cl:export 'gsl_histogram_min_bin)

(cffi:defcfun ("gsl_histogram_equal_bins_p" gsl_histogram_equal_bins_p) :int
  (h1 :pointer)
  (h2 :pointer))

(cl:export 'gsl_histogram_equal_bins_p)

(cffi:defcfun ("gsl_histogram_add" gsl_histogram_add) :int
  (h1 :pointer)
  (h2 :pointer))

(cl:export 'gsl_histogram_add)

(cffi:defcfun ("gsl_histogram_sub" gsl_histogram_sub) :int
  (h1 :pointer)
  (h2 :pointer))

(cl:export 'gsl_histogram_sub)

(cffi:defcfun ("gsl_histogram_mul" gsl_histogram_mul) :int
  (h1 :pointer)
  (h2 :pointer))

(cl:export 'gsl_histogram_mul)

(cffi:defcfun ("gsl_histogram_div" gsl_histogram_div) :int
  (h1 :pointer)
  (h2 :pointer))

(cl:export 'gsl_histogram_div)

(cffi:defcfun ("gsl_histogram_scale" gsl_histogram_scale) :int
  (h :pointer)
  (scale :double))

(cl:export 'gsl_histogram_scale)

(cffi:defcfun ("gsl_histogram_shift" gsl_histogram_shift) :int
  (h :pointer)
  (shift :double))

(cl:export 'gsl_histogram_shift)

(cffi:defcfun ("gsl_histogram_sigma" gsl_histogram_sigma) :double
  (h :pointer))

(cl:export 'gsl_histogram_sigma)

(cffi:defcfun ("gsl_histogram_mean" gsl_histogram_mean) :double
  (h :pointer))

(cl:export 'gsl_histogram_mean)

(cffi:defcfun ("gsl_histogram_sum" gsl_histogram_sum) :double
  (h :pointer))

(cl:export 'gsl_histogram_sum)

(cffi:defcfun ("gsl_histogram_fwrite" gsl_histogram_fwrite) :int
  (stream :pointer)
  (h :pointer))

(cl:export 'gsl_histogram_fwrite)

(cffi:defcfun ("gsl_histogram_fread" gsl_histogram_fread) :int
  (stream :pointer)
  (h :pointer))

(cl:export 'gsl_histogram_fread)

(cffi:defcfun ("gsl_histogram_fprintf" gsl_histogram_fprintf) :int
  (stream :pointer)
  (h :pointer)
  (range_format :string)
  (bin_format :string))

(cl:export 'gsl_histogram_fprintf)

(cffi:defcfun ("gsl_histogram_fscanf" gsl_histogram_fscanf) :int
  (stream :pointer)
  (h :pointer))

(cl:export 'gsl_histogram_fscanf)

(cffi:defcfun ("gsl_histogram_pdf_alloc" gsl_histogram_pdf_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_histogram_pdf_alloc)

(cffi:defcfun ("gsl_histogram_pdf_init" gsl_histogram_pdf_init) :int
  (p :pointer)
  (h :pointer))

(cl:export 'gsl_histogram_pdf_init)

(cffi:defcfun ("gsl_histogram_pdf_free" gsl_histogram_pdf_free) :void
  (p :pointer))

(cl:export 'gsl_histogram_pdf_free)

(cffi:defcfun ("gsl_histogram_pdf_sample" gsl_histogram_pdf_sample) :double
  (p :pointer)
  (r :double))

(cl:export 'gsl_histogram_pdf_sample)

(cffi:defcstruct gsl_histogram2d
	(nx :pointer)
	(ny :pointer)
	(xrange :pointer)
	(yrange :pointer)
	(bin :pointer))

(cl:export 'gsl_histogram2d)

(cl:export 'nx)

(cl:export 'ny)

(cl:export 'xrange)

(cl:export 'yrange)

(cl:export 'bin)

(cffi:defcstruct gsl_histogram2d_pdf
	(nx :pointer)
	(ny :pointer)
	(xrange :pointer)
	(yrange :pointer)
	(sum :pointer))

(cl:export 'gsl_histogram2d_pdf)

(cl:export 'nx)

(cl:export 'ny)

(cl:export 'xrange)

(cl:export 'yrange)

(cl:export 'sum)

(cffi:defcfun ("gsl_histogram2d_alloc" gsl_histogram2d_alloc) :pointer
  (nx :pointer)
  (ny :pointer))

(cl:export 'gsl_histogram2d_alloc)

(cffi:defcfun ("gsl_histogram2d_calloc" gsl_histogram2d_calloc) :pointer
  (nx :pointer)
  (ny :pointer))

(cl:export 'gsl_histogram2d_calloc)

(cffi:defcfun ("gsl_histogram2d_calloc_uniform" gsl_histogram2d_calloc_uniform) :pointer
  (nx :pointer)
  (ny :pointer)
  (xmin :double)
  (xmax :double)
  (ymin :double)
  (ymax :double))

(cl:export 'gsl_histogram2d_calloc_uniform)

(cffi:defcfun ("gsl_histogram2d_free" gsl_histogram2d_free) :void
  (h :pointer))

(cl:export 'gsl_histogram2d_free)

(cffi:defcfun ("gsl_histogram2d_increment" gsl_histogram2d_increment) :int
  (h :pointer)
  (x :double)
  (y :double))

(cl:export 'gsl_histogram2d_increment)

(cffi:defcfun ("gsl_histogram2d_accumulate" gsl_histogram2d_accumulate) :int
  (h :pointer)
  (x :double)
  (y :double)
  (weight :double))

(cl:export 'gsl_histogram2d_accumulate)

(cffi:defcfun ("gsl_histogram2d_find" gsl_histogram2d_find) :int
  (h :pointer)
  (x :double)
  (y :double)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_histogram2d_find)

(cffi:defcfun ("gsl_histogram2d_get" gsl_histogram2d_get) :double
  (h :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_histogram2d_get)

(cffi:defcfun ("gsl_histogram2d_get_xrange" gsl_histogram2d_get_xrange) :int
  (h :pointer)
  (i :pointer)
  (xlower :pointer)
  (xupper :pointer))

(cl:export 'gsl_histogram2d_get_xrange)

(cffi:defcfun ("gsl_histogram2d_get_yrange" gsl_histogram2d_get_yrange) :int
  (h :pointer)
  (j :pointer)
  (ylower :pointer)
  (yupper :pointer))

(cl:export 'gsl_histogram2d_get_yrange)

(cffi:defcfun ("gsl_histogram2d_xmax" gsl_histogram2d_xmax) :double
  (h :pointer))

(cl:export 'gsl_histogram2d_xmax)

(cffi:defcfun ("gsl_histogram2d_xmin" gsl_histogram2d_xmin) :double
  (h :pointer))

(cl:export 'gsl_histogram2d_xmin)

(cffi:defcfun ("gsl_histogram2d_nx" gsl_histogram2d_nx) :pointer
  (h :pointer))

(cl:export 'gsl_histogram2d_nx)

(cffi:defcfun ("gsl_histogram2d_ymax" gsl_histogram2d_ymax) :double
  (h :pointer))

(cl:export 'gsl_histogram2d_ymax)

(cffi:defcfun ("gsl_histogram2d_ymin" gsl_histogram2d_ymin) :double
  (h :pointer))

(cl:export 'gsl_histogram2d_ymin)

(cffi:defcfun ("gsl_histogram2d_ny" gsl_histogram2d_ny) :pointer
  (h :pointer))

(cl:export 'gsl_histogram2d_ny)

(cffi:defcfun ("gsl_histogram2d_reset" gsl_histogram2d_reset) :void
  (h :pointer))

(cl:export 'gsl_histogram2d_reset)

(cffi:defcfun ("gsl_histogram2d_calloc_range" gsl_histogram2d_calloc_range) :pointer
  (nx :pointer)
  (ny :pointer)
  (xrange :pointer)
  (yrange :pointer))

(cl:export 'gsl_histogram2d_calloc_range)

(cffi:defcfun ("gsl_histogram2d_set_ranges_uniform" gsl_histogram2d_set_ranges_uniform) :int
  (h :pointer)
  (xmin :double)
  (xmax :double)
  (ymin :double)
  (ymax :double))

(cl:export 'gsl_histogram2d_set_ranges_uniform)

(cffi:defcfun ("gsl_histogram2d_set_ranges" gsl_histogram2d_set_ranges) :int
  (h :pointer)
  (xrange :pointer)
  (xsize :pointer)
  (yrange :pointer)
  (ysize :pointer))

(cl:export 'gsl_histogram2d_set_ranges)

(cffi:defcfun ("gsl_histogram2d_memcpy" gsl_histogram2d_memcpy) :int
  (dest :pointer)
  (source :pointer))

(cl:export 'gsl_histogram2d_memcpy)

(cffi:defcfun ("gsl_histogram2d_clone" gsl_histogram2d_clone) :pointer
  (source :pointer))

(cl:export 'gsl_histogram2d_clone)

(cffi:defcfun ("gsl_histogram2d_max_val" gsl_histogram2d_max_val) :double
  (h :pointer))

(cl:export 'gsl_histogram2d_max_val)

(cffi:defcfun ("gsl_histogram2d_max_bin" gsl_histogram2d_max_bin) :void
  (h :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_histogram2d_max_bin)

(cffi:defcfun ("gsl_histogram2d_min_val" gsl_histogram2d_min_val) :double
  (h :pointer))

(cl:export 'gsl_histogram2d_min_val)

(cffi:defcfun ("gsl_histogram2d_min_bin" gsl_histogram2d_min_bin) :void
  (h :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_histogram2d_min_bin)

(cffi:defcfun ("gsl_histogram2d_xmean" gsl_histogram2d_xmean) :double
  (h :pointer))

(cl:export 'gsl_histogram2d_xmean)

(cffi:defcfun ("gsl_histogram2d_ymean" gsl_histogram2d_ymean) :double
  (h :pointer))

(cl:export 'gsl_histogram2d_ymean)

(cffi:defcfun ("gsl_histogram2d_xsigma" gsl_histogram2d_xsigma) :double
  (h :pointer))

(cl:export 'gsl_histogram2d_xsigma)

(cffi:defcfun ("gsl_histogram2d_ysigma" gsl_histogram2d_ysigma) :double
  (h :pointer))

(cl:export 'gsl_histogram2d_ysigma)

(cffi:defcfun ("gsl_histogram2d_cov" gsl_histogram2d_cov) :double
  (h :pointer))

(cl:export 'gsl_histogram2d_cov)

(cffi:defcfun ("gsl_histogram2d_sum" gsl_histogram2d_sum) :double
  (h :pointer))

(cl:export 'gsl_histogram2d_sum)

(cffi:defcfun ("gsl_histogram2d_equal_bins_p" gsl_histogram2d_equal_bins_p) :int
  (h1 :pointer)
  (h2 :pointer))

(cl:export 'gsl_histogram2d_equal_bins_p)

(cffi:defcfun ("gsl_histogram2d_add" gsl_histogram2d_add) :int
  (h1 :pointer)
  (h2 :pointer))

(cl:export 'gsl_histogram2d_add)

(cffi:defcfun ("gsl_histogram2d_sub" gsl_histogram2d_sub) :int
  (h1 :pointer)
  (h2 :pointer))

(cl:export 'gsl_histogram2d_sub)

(cffi:defcfun ("gsl_histogram2d_mul" gsl_histogram2d_mul) :int
  (h1 :pointer)
  (h2 :pointer))

(cl:export 'gsl_histogram2d_mul)

(cffi:defcfun ("gsl_histogram2d_div" gsl_histogram2d_div) :int
  (h1 :pointer)
  (h2 :pointer))

(cl:export 'gsl_histogram2d_div)

(cffi:defcfun ("gsl_histogram2d_scale" gsl_histogram2d_scale) :int
  (h :pointer)
  (scale :double))

(cl:export 'gsl_histogram2d_scale)

(cffi:defcfun ("gsl_histogram2d_shift" gsl_histogram2d_shift) :int
  (h :pointer)
  (shift :double))

(cl:export 'gsl_histogram2d_shift)

(cffi:defcfun ("gsl_histogram2d_fwrite" gsl_histogram2d_fwrite) :int
  (stream :pointer)
  (h :pointer))

(cl:export 'gsl_histogram2d_fwrite)

(cffi:defcfun ("gsl_histogram2d_fread" gsl_histogram2d_fread) :int
  (stream :pointer)
  (h :pointer))

(cl:export 'gsl_histogram2d_fread)

(cffi:defcfun ("gsl_histogram2d_fprintf" gsl_histogram2d_fprintf) :int
  (stream :pointer)
  (h :pointer)
  (range_format :string)
  (bin_format :string))

(cl:export 'gsl_histogram2d_fprintf)

(cffi:defcfun ("gsl_histogram2d_fscanf" gsl_histogram2d_fscanf) :int
  (stream :pointer)
  (h :pointer))

(cl:export 'gsl_histogram2d_fscanf)

(cffi:defcfun ("gsl_histogram2d_pdf_alloc" gsl_histogram2d_pdf_alloc) :pointer
  (nx :pointer)
  (ny :pointer))

(cl:export 'gsl_histogram2d_pdf_alloc)

(cffi:defcfun ("gsl_histogram2d_pdf_init" gsl_histogram2d_pdf_init) :int
  (p :pointer)
  (h :pointer))

(cl:export 'gsl_histogram2d_pdf_init)

(cffi:defcfun ("gsl_histogram2d_pdf_free" gsl_histogram2d_pdf_free) :void
  (p :pointer))

(cl:export 'gsl_histogram2d_pdf_free)

(cffi:defcfun ("gsl_histogram2d_pdf_sample" gsl_histogram2d_pdf_sample) :int
  (p :pointer)
  (r1 :double)
  (r2 :double)
  (x :pointer)
  (y :pointer))

(cl:export 'gsl_histogram2d_pdf_sample)

(defanonenum 
	(GSL_IEEE_TYPE_NAN #.1)
	(GSL_IEEE_TYPE_INF #.2)
	(GSL_IEEE_TYPE_NORMAL #.3)
	(GSL_IEEE_TYPE_DENORMAL #.4)
	(GSL_IEEE_TYPE_ZERO #.5))

(cl:export 'GSL_IEEE_TYPE_NAN)

(cl:export 'GSL_IEEE_TYPE_INF)

(cl:export 'GSL_IEEE_TYPE_NORMAL)

(cl:export 'GSL_IEEE_TYPE_DENORMAL)

(cl:export 'GSL_IEEE_TYPE_ZERO)

(cffi:defcstruct gsl_ieee_float_rep
	(sign :int)
	(mantissa :pointer)
	(exponent :int)
	(type :int))

(cl:export 'gsl_ieee_float_rep)

(cl:export 'sign)

(cl:export 'mantissa)

(cl:export 'exponent)

(cl:export 'type)

(cffi:defcstruct gsl_ieee_double_rep
	(sign :int)
	(mantissa :pointer)
	(exponent :int)
	(type :int))

(cl:export 'gsl_ieee_double_rep)

(cl:export 'sign)

(cl:export 'mantissa)

(cl:export 'exponent)

(cl:export 'type)

(cffi:defcfun ("gsl_ieee_printf_float" gsl_ieee_printf_float) :void
  (x :pointer))

(cl:export 'gsl_ieee_printf_float)

(cffi:defcfun ("gsl_ieee_printf_double" gsl_ieee_printf_double) :void
  (x :pointer))

(cl:export 'gsl_ieee_printf_double)

(cffi:defcfun ("gsl_ieee_fprintf_float" gsl_ieee_fprintf_float) :void
  (stream :pointer)
  (x :pointer))

(cl:export 'gsl_ieee_fprintf_float)

(cffi:defcfun ("gsl_ieee_fprintf_double" gsl_ieee_fprintf_double) :void
  (stream :pointer)
  (x :pointer))

(cl:export 'gsl_ieee_fprintf_double)

(cffi:defcfun ("gsl_ieee_float_to_rep" gsl_ieee_float_to_rep) :void
  (x :pointer)
  (r :pointer))

(cl:export 'gsl_ieee_float_to_rep)

(cffi:defcfun ("gsl_ieee_double_to_rep" gsl_ieee_double_to_rep) :void
  (x :pointer)
  (r :pointer))

(cl:export 'gsl_ieee_double_to_rep)

(defanonenum 
	(GSL_IEEE_SINGLE_PRECISION #.1)
	(GSL_IEEE_DOUBLE_PRECISION #.2)
	(GSL_IEEE_EXTENDED_PRECISION #.3))

(cl:export 'GSL_IEEE_SINGLE_PRECISION)

(cl:export 'GSL_IEEE_DOUBLE_PRECISION)

(cl:export 'GSL_IEEE_EXTENDED_PRECISION)

(defanonenum 
	(GSL_IEEE_ROUND_TO_NEAREST #.1)
	(GSL_IEEE_ROUND_DOWN #.2)
	(GSL_IEEE_ROUND_UP #.3)
	(GSL_IEEE_ROUND_TO_ZERO #.4))

(cl:export 'GSL_IEEE_ROUND_TO_NEAREST)

(cl:export 'GSL_IEEE_ROUND_DOWN)

(cl:export 'GSL_IEEE_ROUND_UP)

(cl:export 'GSL_IEEE_ROUND_TO_ZERO)

(defanonenum 
	(GSL_IEEE_MASK_INVALID #.1)
	(GSL_IEEE_MASK_DENORMALIZED #.2)
	(GSL_IEEE_MASK_DIVISION_BY_ZERO #.4)
	(GSL_IEEE_MASK_OVERFLOW #.8)
	(GSL_IEEE_MASK_UNDERFLOW #.16)
	(GSL_IEEE_MASK_ALL #.31)
	(GSL_IEEE_TRAP_INEXACT #.32))

(cl:export 'GSL_IEEE_MASK_INVALID)

(cl:export 'GSL_IEEE_MASK_DENORMALIZED)

(cl:export 'GSL_IEEE_MASK_DIVISION_BY_ZERO)

(cl:export 'GSL_IEEE_MASK_OVERFLOW)

(cl:export 'GSL_IEEE_MASK_UNDERFLOW)

(cl:export 'GSL_IEEE_MASK_ALL)

(cl:export 'GSL_IEEE_TRAP_INEXACT)

(cffi:defcfun ("gsl_ieee_env_setup" gsl_ieee_env_setup) :void)

(cl:export 'gsl_ieee_env_setup)

(cffi:defcfun ("gsl_ieee_read_mode_string" gsl_ieee_read_mode_string) :int
  (description :string)
  (precision :pointer)
  (rounding :pointer)
  (exception_mask :pointer))

(cl:export 'gsl_ieee_read_mode_string)

(cffi:defcfun ("gsl_ieee_set_mode" gsl_ieee_set_mode) :int
  (precision :int)
  (rounding :int)
  (exception_mask :int))

(cl:export 'gsl_ieee_set_mode)

(cffi:defcstruct gsl_integration_workspace
	(limit :pointer)
	(size :pointer)
	(nrmax :pointer)
	(i :pointer)
	(maximum_level :pointer)
	(alist :pointer)
	(blist :pointer)
	(rlist :pointer)
	(elist :pointer)
	(order :pointer)
	(level :pointer))

(cl:export 'gsl_integration_workspace)

(cl:export 'limit)

(cl:export 'size)

(cl:export 'nrmax)

(cl:export 'i)

(cl:export 'maximum_level)

(cl:export 'alist)

(cl:export 'blist)

(cl:export 'rlist)

(cl:export 'elist)

(cl:export 'order)

(cl:export 'level)

(cffi:defcfun ("gsl_integration_workspace_alloc" gsl_integration_workspace_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_integration_workspace_alloc)

(cffi:defcfun ("gsl_integration_workspace_free" gsl_integration_workspace_free) :void
  (w :pointer))

(cl:export 'gsl_integration_workspace_free)

(cffi:defcstruct gsl_integration_qaws_table
	(alpha :double)
	(beta :double)
	(mu :int)
	(nu :int)
	(ri :pointer)
	(rj :pointer)
	(rg :pointer)
	(rh :pointer))

(cl:export 'gsl_integration_qaws_table)

(cl:export 'alpha)

(cl:export 'beta)

(cl:export 'mu)

(cl:export 'nu)

(cl:export 'ri)

(cl:export 'rj)

(cl:export 'rg)

(cl:export 'rh)

(cffi:defcfun ("gsl_integration_qaws_table_alloc" gsl_integration_qaws_table_alloc) :pointer
  (alpha :double)
  (beta :double)
  (mu :int)
  (nu :int))

(cl:export 'gsl_integration_qaws_table_alloc)

(cffi:defcfun ("gsl_integration_qaws_table_set" gsl_integration_qaws_table_set) :int
  (t_arg0 :pointer)
  (alpha :double)
  (beta :double)
  (mu :int)
  (nu :int))

(cl:export 'gsl_integration_qaws_table_set)

(cffi:defcfun ("gsl_integration_qaws_table_free" gsl_integration_qaws_table_free) :void
  (t_arg0 :pointer))

(cl:export 'gsl_integration_qaws_table_free)

(cffi:defcenum gsl_integration_qawo_enum
	:GSL_INTEG_COSINE
	:GSL_INTEG_SINE)

(cl:export 'gsl_integration_qawo_enum)

(cffi:defcstruct gsl_integration_qawo_table
	(n :pointer)
	(omega :double)
	(L :double)
	(par :double)
	(sine gsl_integration_qawo_enum)
	(chebmo :pointer))

(cl:export 'gsl_integration_qawo_table)

(cl:export 'n)

(cl:export 'omega)

(cl:export 'L)

(cl:export 'par)

(cl:export 'sine)

(cl:export 'chebmo)

(cffi:defcfun ("gsl_integration_qawo_table_alloc" gsl_integration_qawo_table_alloc) :pointer
  (omega :double)
  (L :double)
  (sine gsl_integration_qawo_enum)
  (n :pointer))

(cl:export 'gsl_integration_qawo_table_alloc)

(cffi:defcfun ("gsl_integration_qawo_table_set" gsl_integration_qawo_table_set) :int
  (t_arg0 :pointer)
  (omega :double)
  (L :double)
  (sine gsl_integration_qawo_enum))

(cl:export 'gsl_integration_qawo_table_set)

(cffi:defcfun ("gsl_integration_qawo_table_set_length" gsl_integration_qawo_table_set_length) :int
  (t_arg0 :pointer)
  (L :double))

(cl:export 'gsl_integration_qawo_table_set_length)

(cffi:defcfun ("gsl_integration_qawo_table_free" gsl_integration_qawo_table_free) :void
  (t_arg0 :pointer))

(cl:export 'gsl_integration_qawo_table_free)

(cffi:defcfun ("gsl_integration_qk15" gsl_integration_qk15) :void
  (f :pointer)
  (a :double)
  (b :double)
  (result :pointer)
  (abserr :pointer)
  (resabs :pointer)
  (resasc :pointer))

(cl:export 'gsl_integration_qk15)

(cffi:defcfun ("gsl_integration_qk21" gsl_integration_qk21) :void
  (f :pointer)
  (a :double)
  (b :double)
  (result :pointer)
  (abserr :pointer)
  (resabs :pointer)
  (resasc :pointer))

(cl:export 'gsl_integration_qk21)

(cffi:defcfun ("gsl_integration_qk31" gsl_integration_qk31) :void
  (f :pointer)
  (a :double)
  (b :double)
  (result :pointer)
  (abserr :pointer)
  (resabs :pointer)
  (resasc :pointer))

(cl:export 'gsl_integration_qk31)

(cffi:defcfun ("gsl_integration_qk41" gsl_integration_qk41) :void
  (f :pointer)
  (a :double)
  (b :double)
  (result :pointer)
  (abserr :pointer)
  (resabs :pointer)
  (resasc :pointer))

(cl:export 'gsl_integration_qk41)

(cffi:defcfun ("gsl_integration_qk51" gsl_integration_qk51) :void
  (f :pointer)
  (a :double)
  (b :double)
  (result :pointer)
  (abserr :pointer)
  (resabs :pointer)
  (resasc :pointer))

(cl:export 'gsl_integration_qk51)

(cffi:defcfun ("gsl_integration_qk61" gsl_integration_qk61) :void
  (f :pointer)
  (a :double)
  (b :double)
  (result :pointer)
  (abserr :pointer)
  (resabs :pointer)
  (resasc :pointer))

(cl:export 'gsl_integration_qk61)

(cffi:defcfun ("gsl_integration_qcheb" gsl_integration_qcheb) :void
  (f :pointer)
  (a :double)
  (b :double)
  (cheb12 :pointer)
  (cheb24 :pointer))

(cl:export 'gsl_integration_qcheb)

(defanonenum 
	(GSL_INTEG_GAUSS15 #.1)
	(GSL_INTEG_GAUSS21 #.2)
	(GSL_INTEG_GAUSS31 #.3)
	(GSL_INTEG_GAUSS41 #.4)
	(GSL_INTEG_GAUSS51 #.5)
	(GSL_INTEG_GAUSS61 #.6))

(cl:export 'GSL_INTEG_GAUSS15)

(cl:export 'GSL_INTEG_GAUSS21)

(cl:export 'GSL_INTEG_GAUSS31)

(cl:export 'GSL_INTEG_GAUSS41)

(cl:export 'GSL_INTEG_GAUSS51)

(cl:export 'GSL_INTEG_GAUSS61)

(cffi:defcfun ("gsl_integration_qk" gsl_integration_qk) :void
  (n :int)
  (xgk :pointer)
  (wg :pointer)
  (wgk :pointer)
  (fv1 :pointer)
  (fv2 :pointer)
  (f :pointer)
  (a :double)
  (b :double)
  (result :pointer)
  (abserr :pointer)
  (resabs :pointer)
  (resasc :pointer))

(cl:export 'gsl_integration_qk)

(cffi:defcfun ("gsl_integration_qng" gsl_integration_qng) :int
  (f :pointer)
  (a :double)
  (b :double)
  (epsabs :double)
  (epsrel :double)
  (result :pointer)
  (abserr :pointer)
  (neval :pointer))

(cl:export 'gsl_integration_qng)

(cffi:defcfun ("gsl_integration_qag" gsl_integration_qag) :int
  (f :pointer)
  (a :double)
  (b :double)
  (epsabs :double)
  (epsrel :double)
  (limit :pointer)
  (key :int)
  (workspace :pointer)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_integration_qag)

(cffi:defcfun ("gsl_integration_qagi" gsl_integration_qagi) :int
  (f :pointer)
  (epsabs :double)
  (epsrel :double)
  (limit :pointer)
  (workspace :pointer)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_integration_qagi)

(cffi:defcfun ("gsl_integration_qagiu" gsl_integration_qagiu) :int
  (f :pointer)
  (a :double)
  (epsabs :double)
  (epsrel :double)
  (limit :pointer)
  (workspace :pointer)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_integration_qagiu)

(cffi:defcfun ("gsl_integration_qagil" gsl_integration_qagil) :int
  (f :pointer)
  (b :double)
  (epsabs :double)
  (epsrel :double)
  (limit :pointer)
  (workspace :pointer)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_integration_qagil)

(cffi:defcfun ("gsl_integration_qags" gsl_integration_qags) :int
  (f :pointer)
  (a :double)
  (b :double)
  (epsabs :double)
  (epsrel :double)
  (limit :pointer)
  (workspace :pointer)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_integration_qags)

(cffi:defcfun ("gsl_integration_qagp" gsl_integration_qagp) :int
  (f :pointer)
  (pts :pointer)
  (npts :pointer)
  (epsabs :double)
  (epsrel :double)
  (limit :pointer)
  (workspace :pointer)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_integration_qagp)

(cffi:defcfun ("gsl_integration_qawc" gsl_integration_qawc) :int
  (f :pointer)
  (a :double)
  (b :double)
  (c :double)
  (epsabs :double)
  (epsrel :double)
  (limit :pointer)
  (workspace :pointer)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_integration_qawc)

(cffi:defcfun ("gsl_integration_qaws" gsl_integration_qaws) :int
  (f :pointer)
  (a :double)
  (b :double)
  (t_arg3 :pointer)
  (epsabs :double)
  (epsrel :double)
  (limit :pointer)
  (workspace :pointer)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_integration_qaws)

(cffi:defcfun ("gsl_integration_qawo" gsl_integration_qawo) :int
  (f :pointer)
  (a :double)
  (epsabs :double)
  (epsrel :double)
  (limit :pointer)
  (workspace :pointer)
  (wf :pointer)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_integration_qawo)

(cffi:defcfun ("gsl_integration_qawf" gsl_integration_qawf) :int
  (f :pointer)
  (a :double)
  (epsabs :double)
  (limit :pointer)
  (workspace :pointer)
  (cycle_workspace :pointer)
  (wf :pointer)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_integration_qawf)

(cffi:defcstruct gsl_integration_glfixed_table
	(n :pointer)
	(x :pointer)
	(w :pointer)
	(precomputed :int))

(cl:export 'gsl_integration_glfixed_table)

(cl:export 'n)

(cl:export 'x)

(cl:export 'w)

(cl:export 'precomputed)

(cffi:defcfun ("gsl_integration_glfixed_table_alloc" gsl_integration_glfixed_table_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_integration_glfixed_table_alloc)

(cffi:defcfun ("gsl_integration_glfixed_table_free" gsl_integration_glfixed_table_free) :void
  (t_arg0 :pointer))

(cl:export 'gsl_integration_glfixed_table_free)

(cffi:defcfun ("gsl_integration_glfixed" gsl_integration_glfixed) :double
  (f :pointer)
  (a :double)
  (b :double)
  (t_arg3 :pointer))

(cl:export 'gsl_integration_glfixed)

(cffi:defcfun ("gsl_integration_glfixed_point" gsl_integration_glfixed_point) :int
  (a :double)
  (b :double)
  (i :pointer)
  (xi :pointer)
  (wi :pointer)
  (t_arg5 :pointer))

(cl:export 'gsl_integration_glfixed_point)

(cffi:defcstruct gsl_integration_cquad_ival
	(a :double)
	(b :double)
	(c :pointer)
	(fx :pointer)
	(igral :double)
	(err :double)
	(depth :int)
	(rdepth :int)
	(ndiv :int))

(cl:export 'gsl_integration_cquad_ival)

(cl:export 'a)

(cl:export 'b)

(cl:export 'c)

(cl:export 'fx)

(cl:export 'igral)

(cl:export 'err)

(cl:export 'depth)

(cl:export 'rdepth)

(cl:export 'ndiv)

(cffi:defcstruct gsl_integration_cquad_workspace
	(size :pointer)
	(ivals :pointer)
	(heap :pointer))

(cl:export 'gsl_integration_cquad_workspace)

(cl:export 'size)

(cl:export 'ivals)

(cl:export 'heap)

(cffi:defcfun ("gsl_integration_cquad_workspace_alloc" gsl_integration_cquad_workspace_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_integration_cquad_workspace_alloc)

(cffi:defcfun ("gsl_integration_cquad_workspace_free" gsl_integration_cquad_workspace_free) :void
  (w :pointer))

(cl:export 'gsl_integration_cquad_workspace_free)

(cffi:defcfun ("gsl_integration_cquad" gsl_integration_cquad) :int
  (f :pointer)
  (a :double)
  (b :double)
  (epsabs :double)
  (epsrel :double)
  (ws :pointer)
  (result :pointer)
  (abserr :pointer)
  (nevals :pointer))

(cl:export 'gsl_integration_cquad)

(cffi:defcstruct gsl_interp_accel
	(cache :pointer)
	(miss_count :pointer)
	(hit_count :pointer))

(cl:export 'gsl_interp_accel)

(cl:export 'cache)

(cl:export 'miss_count)

(cl:export 'hit_count)

(cffi:defcstruct gsl_interp_type
	(name :string)
	(min_size :unsigned-int)
	(alloc :pointer)
	(init :pointer)
	(eval :pointer)
	(eval_deriv :pointer)
	(eval_deriv2 :pointer)
	(eval_integ :pointer)
	(free :pointer))

(cl:export 'gsl_interp_type)

(cl:export 'name)

(cl:export 'min_size)

(cl:export 'alloc)

(cl:export 'init)

(cl:export 'eval)

(cl:export 'eval_deriv)

(cl:export 'eval_deriv2)

(cl:export 'eval_integ)

(cl:export 'free)

(cffi:defcstruct gsl_interp
	(type :pointer)
	(xmin :double)
	(xmax :double)
	(size :pointer)
	(state :pointer))

(cl:export 'gsl_interp)

(cl:export 'type)

(cl:export 'xmin)

(cl:export 'xmax)

(cl:export 'size)

(cl:export 'state)

(cffi:defcvar ("gsl_interp_linear" gsl_interp_linear)
 :pointer)

(cl:export 'gsl_interp_linear)

(cffi:defcvar ("gsl_interp_polynomial" gsl_interp_polynomial)
 :pointer)

(cl:export 'gsl_interp_polynomial)

(cffi:defcvar ("gsl_interp_cspline" gsl_interp_cspline)
 :pointer)

(cl:export 'gsl_interp_cspline)

(cffi:defcvar ("gsl_interp_cspline_periodic" gsl_interp_cspline_periodic)
 :pointer)

(cl:export 'gsl_interp_cspline_periodic)

(cffi:defcvar ("gsl_interp_akima" gsl_interp_akima)
 :pointer)

(cl:export 'gsl_interp_akima)

(cffi:defcvar ("gsl_interp_akima_periodic" gsl_interp_akima_periodic)
 :pointer)

(cl:export 'gsl_interp_akima_periodic)

(cffi:defcfun ("gsl_interp_accel_alloc" gsl_interp_accel_alloc) :pointer)

(cl:export 'gsl_interp_accel_alloc)

(cffi:defcfun ("gsl_interp_accel_reset" gsl_interp_accel_reset) :int
  (a :pointer))

(cl:export 'gsl_interp_accel_reset)

(cffi:defcfun ("gsl_interp_accel_free" gsl_interp_accel_free) :void
  (a :pointer))

(cl:export 'gsl_interp_accel_free)

(cffi:defcfun ("gsl_interp_alloc" gsl_interp_alloc) :pointer
  (t_arg0 :pointer)
  (n :pointer))

(cl:export 'gsl_interp_alloc)

(cffi:defcfun ("gsl_interp_init" gsl_interp_init) :int
  (obj :pointer)
  (xa :pointer)
  (ya :pointer)
  (size :pointer))

(cl:export 'gsl_interp_init)

(cffi:defcfun ("gsl_interp_name" gsl_interp_name) :string
  (interp :pointer))

(cl:export 'gsl_interp_name)

(cffi:defcfun ("gsl_interp_min_size" gsl_interp_min_size) :unsigned-int
  (interp :pointer))

(cl:export 'gsl_interp_min_size)

(cffi:defcfun ("gsl_interp_type_min_size" gsl_interp_type_min_size) :unsigned-int
  (t_arg0 :pointer))

(cl:export 'gsl_interp_type_min_size)

(cffi:defcfun ("gsl_interp_eval_e" gsl_interp_eval_e) :int
  (obj :pointer)
  (xa :pointer)
  (ya :pointer)
  (x :double)
  (a :pointer)
  (y :pointer))

(cl:export 'gsl_interp_eval_e)

(cffi:defcfun ("gsl_interp_eval" gsl_interp_eval) :double
  (obj :pointer)
  (xa :pointer)
  (ya :pointer)
  (x :double)
  (a :pointer))

(cl:export 'gsl_interp_eval)

(cffi:defcfun ("gsl_interp_eval_deriv_e" gsl_interp_eval_deriv_e) :int
  (obj :pointer)
  (xa :pointer)
  (ya :pointer)
  (x :double)
  (a :pointer)
  (d :pointer))

(cl:export 'gsl_interp_eval_deriv_e)

(cffi:defcfun ("gsl_interp_eval_deriv" gsl_interp_eval_deriv) :double
  (obj :pointer)
  (xa :pointer)
  (ya :pointer)
  (x :double)
  (a :pointer))

(cl:export 'gsl_interp_eval_deriv)

(cffi:defcfun ("gsl_interp_eval_deriv2_e" gsl_interp_eval_deriv2_e) :int
  (obj :pointer)
  (xa :pointer)
  (ya :pointer)
  (x :double)
  (a :pointer)
  (d2 :pointer))

(cl:export 'gsl_interp_eval_deriv2_e)

(cffi:defcfun ("gsl_interp_eval_deriv2" gsl_interp_eval_deriv2) :double
  (obj :pointer)
  (xa :pointer)
  (ya :pointer)
  (x :double)
  (a :pointer))

(cl:export 'gsl_interp_eval_deriv2)

(cffi:defcfun ("gsl_interp_eval_integ_e" gsl_interp_eval_integ_e) :int
  (obj :pointer)
  (xa :pointer)
  (ya :pointer)
  (a :double)
  (b :double)
  (acc :pointer)
  (result :pointer))

(cl:export 'gsl_interp_eval_integ_e)

(cffi:defcfun ("gsl_interp_eval_integ" gsl_interp_eval_integ) :double
  (obj :pointer)
  (xa :pointer)
  (ya :pointer)
  (a :double)
  (b :double)
  (acc :pointer))

(cl:export 'gsl_interp_eval_integ)

(cffi:defcfun ("gsl_interp_free" gsl_interp_free) :void
  (interp :pointer))

(cl:export 'gsl_interp_free)

(cffi:defcfun ("gsl_interp_bsearch" gsl_interp_bsearch) :pointer
  (x_array :pointer)
  (x :double)
  (index_lo :pointer)
  (index_hi :pointer))

(cl:export 'gsl_interp_bsearch)

(cffi:defcfun ("gsl_interp_accel_find" gsl_interp_accel_find) :pointer
  (a :pointer)
  (x_array :pointer)
  (size :pointer)
  (x :double))

(cl:export 'gsl_interp_accel_find)

(cffi:defcenum gsl_linalg_matrix_mod_t
	(:GSL_LINALG_MOD_NONE #.0)
	(:GSL_LINALG_MOD_TRANSPOSE #.1)
	(:GSL_LINALG_MOD_CONJUGATE #.2))

(cl:export 'gsl_linalg_matrix_mod_t)

(cffi:defcfun ("gsl_linalg_matmult" gsl_linalg_matmult) :int
  (A :pointer)
  (B :pointer)
  (C :pointer))

(cl:export 'gsl_linalg_matmult)

(cffi:defcfun ("gsl_linalg_matmult_mod" gsl_linalg_matmult_mod) :int
  (A :pointer)
  (modA gsl_linalg_matrix_mod_t)
  (B :pointer)
  (modB gsl_linalg_matrix_mod_t)
  (C :pointer))

(cl:export 'gsl_linalg_matmult_mod)

(cffi:defcfun ("gsl_linalg_exponential_ss" gsl_linalg_exponential_ss) :int
  (A :pointer)
  (eA :pointer)
  (mode :unsigned-int))

(cl:export 'gsl_linalg_exponential_ss)

(cffi:defcfun ("gsl_linalg_householder_transform" gsl_linalg_householder_transform) :double
  (v :pointer))

(cl:export 'gsl_linalg_householder_transform)

(cffi:defcfun ("gsl_linalg_complex_householder_transform" gsl_linalg_complex_householder_transform) gsl_complex
  (v :pointer))

(cl:export 'gsl_linalg_complex_householder_transform)

(cffi:defcfun ("gsl_linalg_householder_hm" gsl_linalg_householder_hm) :int
  (tau :double)
  (v :pointer)
  (A :pointer))

(cl:export 'gsl_linalg_householder_hm)

(cffi:defcfun ("gsl_linalg_householder_mh" gsl_linalg_householder_mh) :int
  (tau :double)
  (v :pointer)
  (A :pointer))

(cl:export 'gsl_linalg_householder_mh)

(cffi:defcfun ("gsl_linalg_householder_hv" gsl_linalg_householder_hv) :int
  (tau :double)
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_linalg_householder_hv)

(cffi:defcfun ("gsl_linalg_householder_hm1" gsl_linalg_householder_hm1) :int
  (tau :double)
  (A :pointer))

(cl:export 'gsl_linalg_householder_hm1)

(cffi:defcfun ("gsl_linalg_complex_householder_hm" gsl_linalg_complex_householder_hm) :int
  (tau gsl_complex)
  (v :pointer)
  (A :pointer))

(cl:export 'gsl_linalg_complex_householder_hm)

(cffi:defcfun ("gsl_linalg_complex_householder_mh" gsl_linalg_complex_householder_mh) :int
  (tau gsl_complex)
  (v :pointer)
  (A :pointer))

(cl:export 'gsl_linalg_complex_householder_mh)

(cffi:defcfun ("gsl_linalg_complex_householder_hv" gsl_linalg_complex_householder_hv) :int
  (tau gsl_complex)
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_linalg_complex_householder_hv)

(cffi:defcfun ("gsl_linalg_hessenberg_decomp" gsl_linalg_hessenberg_decomp) :int
  (A :pointer)
  (tau :pointer))

(cl:export 'gsl_linalg_hessenberg_decomp)

(cffi:defcfun ("gsl_linalg_hessenberg_unpack" gsl_linalg_hessenberg_unpack) :int
  (H :pointer)
  (tau :pointer)
  (U :pointer))

(cl:export 'gsl_linalg_hessenberg_unpack)

(cffi:defcfun ("gsl_linalg_hessenberg_unpack_accum" gsl_linalg_hessenberg_unpack_accum) :int
  (H :pointer)
  (tau :pointer)
  (U :pointer))

(cl:export 'gsl_linalg_hessenberg_unpack_accum)

(cffi:defcfun ("gsl_linalg_hessenberg_set_zero" gsl_linalg_hessenberg_set_zero) :int
  (H :pointer))

(cl:export 'gsl_linalg_hessenberg_set_zero)

(cffi:defcfun ("gsl_linalg_hessenberg_submatrix" gsl_linalg_hessenberg_submatrix) :int
  (M :pointer)
  (A :pointer)
  (top :pointer)
  (tau :pointer))

(cl:export 'gsl_linalg_hessenberg_submatrix)

(cffi:defcfun ("gsl_linalg_hessenberg" gsl_linalg_hessenberg) :int
  (A :pointer)
  (tau :pointer))

(cl:export 'gsl_linalg_hessenberg)

(cffi:defcfun ("gsl_linalg_hesstri_decomp" gsl_linalg_hesstri_decomp) :int
  (A :pointer)
  (B :pointer)
  (U :pointer)
  (V :pointer)
  (work :pointer))

(cl:export 'gsl_linalg_hesstri_decomp)

(cffi:defcfun ("gsl_linalg_SV_decomp" gsl_linalg_SV_decomp) :int
  (A :pointer)
  (V :pointer)
  (S :pointer)
  (work :pointer))

(cl:export 'gsl_linalg_SV_decomp)

(cffi:defcfun ("gsl_linalg_SV_decomp_mod" gsl_linalg_SV_decomp_mod) :int
  (A :pointer)
  (X :pointer)
  (V :pointer)
  (S :pointer)
  (work :pointer))

(cl:export 'gsl_linalg_SV_decomp_mod)

(cffi:defcfun ("gsl_linalg_SV_decomp_jacobi" gsl_linalg_SV_decomp_jacobi) :int
  (A :pointer)
  (Q :pointer)
  (S :pointer))

(cl:export 'gsl_linalg_SV_decomp_jacobi)

(cffi:defcfun ("gsl_linalg_SV_solve" gsl_linalg_SV_solve) :int
  (U :pointer)
  (Q :pointer)
  (S :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_SV_solve)

(cffi:defcfun ("gsl_linalg_SV_leverage" gsl_linalg_SV_leverage) :int
  (U :pointer)
  (h :pointer))

(cl:export 'gsl_linalg_SV_leverage)

(cffi:defcfun ("gsl_linalg_LU_decomp" gsl_linalg_LU_decomp) :int
  (A :pointer)
  (p :pointer)
  (signum :pointer))

(cl:export 'gsl_linalg_LU_decomp)

(cffi:defcfun ("gsl_linalg_LU_solve" gsl_linalg_LU_solve) :int
  (LU :pointer)
  (p :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_LU_solve)

(cffi:defcfun ("gsl_linalg_LU_svx" gsl_linalg_LU_svx) :int
  (LU :pointer)
  (p :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_LU_svx)

(cffi:defcfun ("gsl_linalg_LU_refine" gsl_linalg_LU_refine) :int
  (A :pointer)
  (LU :pointer)
  (p :pointer)
  (b :pointer)
  (x :pointer)
  (residual :pointer))

(cl:export 'gsl_linalg_LU_refine)

(cffi:defcfun ("gsl_linalg_LU_invert" gsl_linalg_LU_invert) :int
  (LU :pointer)
  (p :pointer)
  (inverse :pointer))

(cl:export 'gsl_linalg_LU_invert)

(cffi:defcfun ("gsl_linalg_LU_det" gsl_linalg_LU_det) :double
  (LU :pointer)
  (signum :int))

(cl:export 'gsl_linalg_LU_det)

(cffi:defcfun ("gsl_linalg_LU_lndet" gsl_linalg_LU_lndet) :double
  (LU :pointer))

(cl:export 'gsl_linalg_LU_lndet)

(cffi:defcfun ("gsl_linalg_LU_sgndet" gsl_linalg_LU_sgndet) :int
  (lu :pointer)
  (signum :int))

(cl:export 'gsl_linalg_LU_sgndet)

(cffi:defcfun ("gsl_linalg_complex_LU_decomp" gsl_linalg_complex_LU_decomp) :int
  (A :pointer)
  (p :pointer)
  (signum :pointer))

(cl:export 'gsl_linalg_complex_LU_decomp)

(cffi:defcfun ("gsl_linalg_complex_LU_solve" gsl_linalg_complex_LU_solve) :int
  (LU :pointer)
  (p :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_complex_LU_solve)

(cffi:defcfun ("gsl_linalg_complex_LU_svx" gsl_linalg_complex_LU_svx) :int
  (LU :pointer)
  (p :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_complex_LU_svx)

(cffi:defcfun ("gsl_linalg_complex_LU_refine" gsl_linalg_complex_LU_refine) :int
  (A :pointer)
  (LU :pointer)
  (p :pointer)
  (b :pointer)
  (x :pointer)
  (residual :pointer))

(cl:export 'gsl_linalg_complex_LU_refine)

(cffi:defcfun ("gsl_linalg_complex_LU_invert" gsl_linalg_complex_LU_invert) :int
  (LU :pointer)
  (p :pointer)
  (inverse :pointer))

(cl:export 'gsl_linalg_complex_LU_invert)

(cffi:defcfun ("gsl_linalg_complex_LU_det" gsl_linalg_complex_LU_det) gsl_complex
  (LU :pointer)
  (signum :int))

(cl:export 'gsl_linalg_complex_LU_det)

(cffi:defcfun ("gsl_linalg_complex_LU_lndet" gsl_linalg_complex_LU_lndet) :double
  (LU :pointer))

(cl:export 'gsl_linalg_complex_LU_lndet)

(cffi:defcfun ("gsl_linalg_complex_LU_sgndet" gsl_linalg_complex_LU_sgndet) gsl_complex
  (LU :pointer)
  (signum :int))

(cl:export 'gsl_linalg_complex_LU_sgndet)

(cffi:defcfun ("gsl_linalg_QR_decomp" gsl_linalg_QR_decomp) :int
  (A :pointer)
  (tau :pointer))

(cl:export 'gsl_linalg_QR_decomp)

(cffi:defcfun ("gsl_linalg_QR_solve" gsl_linalg_QR_solve) :int
  (QR :pointer)
  (tau :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_QR_solve)

(cffi:defcfun ("gsl_linalg_QR_svx" gsl_linalg_QR_svx) :int
  (QR :pointer)
  (tau :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_QR_svx)

(cffi:defcfun ("gsl_linalg_QR_lssolve" gsl_linalg_QR_lssolve) :int
  (QR :pointer)
  (tau :pointer)
  (b :pointer)
  (x :pointer)
  (residual :pointer))

(cl:export 'gsl_linalg_QR_lssolve)

(cffi:defcfun ("gsl_linalg_QR_QRsolve" gsl_linalg_QR_QRsolve) :int
  (Q :pointer)
  (R :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_QR_QRsolve)

(cffi:defcfun ("gsl_linalg_QR_Rsolve" gsl_linalg_QR_Rsolve) :int
  (QR :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_QR_Rsolve)

(cffi:defcfun ("gsl_linalg_QR_Rsvx" gsl_linalg_QR_Rsvx) :int
  (QR :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_QR_Rsvx)

(cffi:defcfun ("gsl_linalg_QR_update" gsl_linalg_QR_update) :int
  (Q :pointer)
  (R :pointer)
  (w :pointer)
  (v :pointer))

(cl:export 'gsl_linalg_QR_update)

(cffi:defcfun ("gsl_linalg_QR_QTvec" gsl_linalg_QR_QTvec) :int
  (QR :pointer)
  (tau :pointer)
  (v :pointer))

(cl:export 'gsl_linalg_QR_QTvec)

(cffi:defcfun ("gsl_linalg_QR_Qvec" gsl_linalg_QR_Qvec) :int
  (QR :pointer)
  (tau :pointer)
  (v :pointer))

(cl:export 'gsl_linalg_QR_Qvec)

(cffi:defcfun ("gsl_linalg_QR_QTmat" gsl_linalg_QR_QTmat) :int
  (QR :pointer)
  (tau :pointer)
  (A :pointer))

(cl:export 'gsl_linalg_QR_QTmat)

(cffi:defcfun ("gsl_linalg_QR_unpack" gsl_linalg_QR_unpack) :int
  (QR :pointer)
  (tau :pointer)
  (Q :pointer)
  (R :pointer))

(cl:export 'gsl_linalg_QR_unpack)

(cffi:defcfun ("gsl_linalg_R_solve" gsl_linalg_R_solve) :int
  (R :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_R_solve)

(cffi:defcfun ("gsl_linalg_R_svx" gsl_linalg_R_svx) :int
  (R :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_R_svx)

(cffi:defcfun ("gsl_linalg_QRPT_decomp" gsl_linalg_QRPT_decomp) :int
  (A :pointer)
  (tau :pointer)
  (p :pointer)
  (signum :pointer)
  (norm :pointer))

(cl:export 'gsl_linalg_QRPT_decomp)

(cffi:defcfun ("gsl_linalg_QRPT_decomp2" gsl_linalg_QRPT_decomp2) :int
  (A :pointer)
  (q :pointer)
  (r :pointer)
  (tau :pointer)
  (p :pointer)
  (signum :pointer)
  (norm :pointer))

(cl:export 'gsl_linalg_QRPT_decomp2)

(cffi:defcfun ("gsl_linalg_QRPT_solve" gsl_linalg_QRPT_solve) :int
  (QR :pointer)
  (tau :pointer)
  (p :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_QRPT_solve)

(cffi:defcfun ("gsl_linalg_QRPT_svx" gsl_linalg_QRPT_svx) :int
  (QR :pointer)
  (tau :pointer)
  (p :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_QRPT_svx)

(cffi:defcfun ("gsl_linalg_QRPT_QRsolve" gsl_linalg_QRPT_QRsolve) :int
  (Q :pointer)
  (R :pointer)
  (p :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_QRPT_QRsolve)

(cffi:defcfun ("gsl_linalg_QRPT_Rsolve" gsl_linalg_QRPT_Rsolve) :int
  (QR :pointer)
  (p :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_QRPT_Rsolve)

(cffi:defcfun ("gsl_linalg_QRPT_Rsvx" gsl_linalg_QRPT_Rsvx) :int
  (QR :pointer)
  (p :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_QRPT_Rsvx)

(cffi:defcfun ("gsl_linalg_QRPT_update" gsl_linalg_QRPT_update) :int
  (Q :pointer)
  (R :pointer)
  (p :pointer)
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_linalg_QRPT_update)

(cffi:defcfun ("gsl_linalg_LQ_decomp" gsl_linalg_LQ_decomp) :int
  (A :pointer)
  (tau :pointer))

(cl:export 'gsl_linalg_LQ_decomp)

(cffi:defcfun ("gsl_linalg_LQ_solve_T" gsl_linalg_LQ_solve_T) :int
  (LQ :pointer)
  (tau :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_LQ_solve_T)

(cffi:defcfun ("gsl_linalg_LQ_svx_T" gsl_linalg_LQ_svx_T) :int
  (LQ :pointer)
  (tau :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_LQ_svx_T)

(cffi:defcfun ("gsl_linalg_LQ_lssolve_T" gsl_linalg_LQ_lssolve_T) :int
  (LQ :pointer)
  (tau :pointer)
  (b :pointer)
  (x :pointer)
  (residual :pointer))

(cl:export 'gsl_linalg_LQ_lssolve_T)

(cffi:defcfun ("gsl_linalg_LQ_Lsolve_T" gsl_linalg_LQ_Lsolve_T) :int
  (LQ :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_LQ_Lsolve_T)

(cffi:defcfun ("gsl_linalg_LQ_Lsvx_T" gsl_linalg_LQ_Lsvx_T) :int
  (LQ :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_LQ_Lsvx_T)

(cffi:defcfun ("gsl_linalg_L_solve_T" gsl_linalg_L_solve_T) :int
  (L :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_L_solve_T)

(cffi:defcfun ("gsl_linalg_LQ_vecQ" gsl_linalg_LQ_vecQ) :int
  (LQ :pointer)
  (tau :pointer)
  (v :pointer))

(cl:export 'gsl_linalg_LQ_vecQ)

(cffi:defcfun ("gsl_linalg_LQ_vecQT" gsl_linalg_LQ_vecQT) :int
  (LQ :pointer)
  (tau :pointer)
  (v :pointer))

(cl:export 'gsl_linalg_LQ_vecQT)

(cffi:defcfun ("gsl_linalg_LQ_unpack" gsl_linalg_LQ_unpack) :int
  (LQ :pointer)
  (tau :pointer)
  (Q :pointer)
  (L :pointer))

(cl:export 'gsl_linalg_LQ_unpack)

(cffi:defcfun ("gsl_linalg_LQ_update" gsl_linalg_LQ_update) :int
  (Q :pointer)
  (R :pointer)
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_linalg_LQ_update)

(cffi:defcfun ("gsl_linalg_LQ_LQsolve" gsl_linalg_LQ_LQsolve) :int
  (Q :pointer)
  (L :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_LQ_LQsolve)

(cffi:defcfun ("gsl_linalg_PTLQ_decomp" gsl_linalg_PTLQ_decomp) :int
  (A :pointer)
  (tau :pointer)
  (p :pointer)
  (signum :pointer)
  (norm :pointer))

(cl:export 'gsl_linalg_PTLQ_decomp)

(cffi:defcfun ("gsl_linalg_PTLQ_decomp2" gsl_linalg_PTLQ_decomp2) :int
  (A :pointer)
  (q :pointer)
  (r :pointer)
  (tau :pointer)
  (p :pointer)
  (signum :pointer)
  (norm :pointer))

(cl:export 'gsl_linalg_PTLQ_decomp2)

(cffi:defcfun ("gsl_linalg_PTLQ_solve_T" gsl_linalg_PTLQ_solve_T) :int
  (QR :pointer)
  (tau :pointer)
  (p :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_PTLQ_solve_T)

(cffi:defcfun ("gsl_linalg_PTLQ_svx_T" gsl_linalg_PTLQ_svx_T) :int
  (LQ :pointer)
  (tau :pointer)
  (p :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_PTLQ_svx_T)

(cffi:defcfun ("gsl_linalg_PTLQ_LQsolve_T" gsl_linalg_PTLQ_LQsolve_T) :int
  (Q :pointer)
  (L :pointer)
  (p :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_PTLQ_LQsolve_T)

(cffi:defcfun ("gsl_linalg_PTLQ_Lsolve_T" gsl_linalg_PTLQ_Lsolve_T) :int
  (LQ :pointer)
  (p :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_PTLQ_Lsolve_T)

(cffi:defcfun ("gsl_linalg_PTLQ_Lsvx_T" gsl_linalg_PTLQ_Lsvx_T) :int
  (LQ :pointer)
  (p :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_PTLQ_Lsvx_T)

(cffi:defcfun ("gsl_linalg_PTLQ_update" gsl_linalg_PTLQ_update) :int
  (Q :pointer)
  (L :pointer)
  (p :pointer)
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_linalg_PTLQ_update)

(cffi:defcfun ("gsl_linalg_cholesky_decomp" gsl_linalg_cholesky_decomp) :int
  (A :pointer))

(cl:export 'gsl_linalg_cholesky_decomp)

(cffi:defcfun ("gsl_linalg_cholesky_solve" gsl_linalg_cholesky_solve) :int
  (cholesky :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_cholesky_solve)

(cffi:defcfun ("gsl_linalg_cholesky_svx" gsl_linalg_cholesky_svx) :int
  (cholesky :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_cholesky_svx)

(cffi:defcfun ("gsl_linalg_cholesky_invert" gsl_linalg_cholesky_invert) :int
  (cholesky :pointer))

(cl:export 'gsl_linalg_cholesky_invert)

(cffi:defcfun ("gsl_linalg_cholesky_decomp_unit" gsl_linalg_cholesky_decomp_unit) :int
  (A :pointer)
  (D :pointer))

(cl:export 'gsl_linalg_cholesky_decomp_unit)

(cffi:defcfun ("gsl_linalg_complex_cholesky_decomp" gsl_linalg_complex_cholesky_decomp) :int
  (A :pointer))

(cl:export 'gsl_linalg_complex_cholesky_decomp)

(cffi:defcfun ("gsl_linalg_complex_cholesky_solve" gsl_linalg_complex_cholesky_solve) :int
  (cholesky :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_complex_cholesky_solve)

(cffi:defcfun ("gsl_linalg_complex_cholesky_svx" gsl_linalg_complex_cholesky_svx) :int
  (cholesky :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_complex_cholesky_svx)

(cffi:defcfun ("gsl_linalg_complex_cholesky_invert" gsl_linalg_complex_cholesky_invert) :int
  (cholesky :pointer))

(cl:export 'gsl_linalg_complex_cholesky_invert)

(cffi:defcfun ("gsl_linalg_symmtd_decomp" gsl_linalg_symmtd_decomp) :int
  (A :pointer)
  (tau :pointer))

(cl:export 'gsl_linalg_symmtd_decomp)

(cffi:defcfun ("gsl_linalg_symmtd_unpack" gsl_linalg_symmtd_unpack) :int
  (A :pointer)
  (tau :pointer)
  (Q :pointer)
  (diag :pointer)
  (subdiag :pointer))

(cl:export 'gsl_linalg_symmtd_unpack)

(cffi:defcfun ("gsl_linalg_symmtd_unpack_T" gsl_linalg_symmtd_unpack_T) :int
  (A :pointer)
  (diag :pointer)
  (subdiag :pointer))

(cl:export 'gsl_linalg_symmtd_unpack_T)

(cffi:defcfun ("gsl_linalg_hermtd_decomp" gsl_linalg_hermtd_decomp) :int
  (A :pointer)
  (tau :pointer))

(cl:export 'gsl_linalg_hermtd_decomp)

(cffi:defcfun ("gsl_linalg_hermtd_unpack" gsl_linalg_hermtd_unpack) :int
  (A :pointer)
  (tau :pointer)
  (U :pointer)
  (diag :pointer)
  (sudiag :pointer))

(cl:export 'gsl_linalg_hermtd_unpack)

(cffi:defcfun ("gsl_linalg_hermtd_unpack_T" gsl_linalg_hermtd_unpack_T) :int
  (A :pointer)
  (diag :pointer)
  (subdiag :pointer))

(cl:export 'gsl_linalg_hermtd_unpack_T)

(cffi:defcfun ("gsl_linalg_HH_solve" gsl_linalg_HH_solve) :int
  (A :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_HH_solve)

(cffi:defcfun ("gsl_linalg_HH_svx" gsl_linalg_HH_svx) :int
  (A :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_HH_svx)

(cffi:defcfun ("gsl_linalg_solve_symm_tridiag" gsl_linalg_solve_symm_tridiag) :int
  (diag :pointer)
  (offdiag :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_solve_symm_tridiag)

(cffi:defcfun ("gsl_linalg_solve_tridiag" gsl_linalg_solve_tridiag) :int
  (diag :pointer)
  (abovediag :pointer)
  (belowdiag :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_solve_tridiag)

(cffi:defcfun ("gsl_linalg_solve_symm_cyc_tridiag" gsl_linalg_solve_symm_cyc_tridiag) :int
  (diag :pointer)
  (offdiag :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_solve_symm_cyc_tridiag)

(cffi:defcfun ("gsl_linalg_solve_cyc_tridiag" gsl_linalg_solve_cyc_tridiag) :int
  (diag :pointer)
  (abovediag :pointer)
  (belowdiag :pointer)
  (b :pointer)
  (x :pointer))

(cl:export 'gsl_linalg_solve_cyc_tridiag)

(cffi:defcfun ("gsl_linalg_bidiag_decomp" gsl_linalg_bidiag_decomp) :int
  (A :pointer)
  (tau_U :pointer)
  (tau_V :pointer))

(cl:export 'gsl_linalg_bidiag_decomp)

(cffi:defcfun ("gsl_linalg_bidiag_unpack" gsl_linalg_bidiag_unpack) :int
  (A :pointer)
  (tau_U :pointer)
  (U :pointer)
  (tau_V :pointer)
  (V :pointer)
  (diag :pointer)
  (superdiag :pointer))

(cl:export 'gsl_linalg_bidiag_unpack)

(cffi:defcfun ("gsl_linalg_bidiag_unpack2" gsl_linalg_bidiag_unpack2) :int
  (A :pointer)
  (tau_U :pointer)
  (tau_V :pointer)
  (V :pointer))

(cl:export 'gsl_linalg_bidiag_unpack2)

(cffi:defcfun ("gsl_linalg_bidiag_unpack_B" gsl_linalg_bidiag_unpack_B) :int
  (A :pointer)
  (diag :pointer)
  (superdiag :pointer))

(cl:export 'gsl_linalg_bidiag_unpack_B)

(cffi:defcfun ("gsl_linalg_balance_matrix" gsl_linalg_balance_matrix) :int
  (A :pointer)
  (D :pointer))

(cl:export 'gsl_linalg_balance_matrix)

(cffi:defcfun ("gsl_linalg_balance_accum" gsl_linalg_balance_accum) :int
  (A :pointer)
  (D :pointer))

(cl:export 'gsl_linalg_balance_accum)

(cffi:defcfun ("gsl_linalg_balance_columns" gsl_linalg_balance_columns) :int
  (A :pointer)
  (D :pointer))

(cl:export 'gsl_linalg_balance_columns)

(cl:defconstant GSL_DBL_EPSILON 2.2204460492503131d-16)

(cl:export 'GSL_DBL_EPSILON)

(cl:defconstant GSL_SQRT_DBL_EPSILON 1.4901161193847656d-08)

(cl:export 'GSL_SQRT_DBL_EPSILON)

(cl:defconstant GSL_ROOT3_DBL_EPSILON 6.0554544523933429d-06)

(cl:export 'GSL_ROOT3_DBL_EPSILON)

(cl:defconstant GSL_ROOT4_DBL_EPSILON 1.2207031250000000d-04)

(cl:export 'GSL_ROOT4_DBL_EPSILON)

(cl:defconstant GSL_ROOT5_DBL_EPSILON 7.4009597974140505d-04)

(cl:export 'GSL_ROOT5_DBL_EPSILON)

(cl:defconstant GSL_ROOT6_DBL_EPSILON 2.4607833005759251d-03)

(cl:export 'GSL_ROOT6_DBL_EPSILON)

(cl:defconstant GSL_LOG_DBL_EPSILON -3.6043653389117154d+01)

(cl:export 'GSL_LOG_DBL_EPSILON)

(cl:defconstant GSL_DBL_MIN 2.2250738585072014d-308)

(cl:export 'GSL_DBL_MIN)

(cl:defconstant GSL_SQRT_DBL_MIN 1.4916681462400413d-154)

(cl:export 'GSL_SQRT_DBL_MIN)

(cl:defconstant GSL_ROOT3_DBL_MIN 2.8126442852362996d-103)

(cl:export 'GSL_ROOT3_DBL_MIN)

(cl:defconstant GSL_ROOT4_DBL_MIN 1.2213386697554620d-77)

(cl:export 'GSL_ROOT4_DBL_MIN)

(cl:defconstant GSL_ROOT5_DBL_MIN 2.9476022969691763d-62)

(cl:export 'GSL_ROOT5_DBL_MIN)

(cl:defconstant GSL_ROOT6_DBL_MIN 5.3034368905798218d-52)

(cl:export 'GSL_ROOT6_DBL_MIN)

(cl:defconstant GSL_LOG_DBL_MIN -7.0839641853226408d+02)

(cl:export 'GSL_LOG_DBL_MIN)

(cl:defconstant GSL_DBL_MAX 1.7976931348623157d+308)

(cl:export 'GSL_DBL_MAX)

(cl:defconstant GSL_SQRT_DBL_MAX 1.3407807929942596d+154)

(cl:export 'GSL_SQRT_DBL_MAX)

(cl:defconstant GSL_ROOT3_DBL_MAX 5.6438030941222897d+102)

(cl:export 'GSL_ROOT3_DBL_MAX)

(cl:defconstant GSL_ROOT4_DBL_MAX 1.1579208923731620d+77)

(cl:export 'GSL_ROOT4_DBL_MAX)

(cl:defconstant GSL_ROOT5_DBL_MAX 4.4765466227572707d+61)

(cl:export 'GSL_ROOT5_DBL_MAX)

(cl:defconstant GSL_ROOT6_DBL_MAX 2.3756689782295612d+51)

(cl:export 'GSL_ROOT6_DBL_MAX)

(cl:defconstant GSL_LOG_DBL_MAX 7.0978271289338397d+02)

(cl:export 'GSL_LOG_DBL_MAX)

(cl:defconstant GSL_FLT_EPSILON 1.1920928955078125d-07)

(cl:export 'GSL_FLT_EPSILON)

(cl:defconstant GSL_SQRT_FLT_EPSILON 3.4526698300124393d-04)

(cl:export 'GSL_SQRT_FLT_EPSILON)

(cl:defconstant GSL_ROOT3_FLT_EPSILON 4.9215666011518501d-03)

(cl:export 'GSL_ROOT3_FLT_EPSILON)

(cl:defconstant GSL_ROOT4_FLT_EPSILON 1.8581361171917516d-02)

(cl:export 'GSL_ROOT4_FLT_EPSILON)

(cl:defconstant GSL_ROOT5_FLT_EPSILON 4.1234622211652937d-02)

(cl:export 'GSL_ROOT5_FLT_EPSILON)

(cl:defconstant GSL_ROOT6_FLT_EPSILON 7.0153878019335827d-02)

(cl:export 'GSL_ROOT6_FLT_EPSILON)

(cl:defconstant GSL_LOG_FLT_EPSILON -1.5942385152878742d+01)

(cl:export 'GSL_LOG_FLT_EPSILON)

(cl:defconstant GSL_FLT_MIN 1.1754943508222875d-38)

(cl:export 'GSL_FLT_MIN)

(cl:defconstant GSL_SQRT_FLT_MIN 1.0842021724855044d-19)

(cl:export 'GSL_SQRT_FLT_MIN)

(cl:defconstant GSL_ROOT3_FLT_MIN 2.2737367544323241d-13)

(cl:export 'GSL_ROOT3_FLT_MIN)

(cl:defconstant GSL_ROOT4_FLT_MIN 3.2927225399135965d-10)

(cl:export 'GSL_ROOT4_FLT_MIN)

(cl:defconstant GSL_ROOT5_FLT_MIN 2.5944428542140822d-08)

(cl:export 'GSL_ROOT5_FLT_MIN)

(cl:defconstant GSL_ROOT6_FLT_MIN 4.7683715820312542d-07)

(cl:export 'GSL_ROOT6_FLT_MIN)

(cl:defconstant GSL_LOG_FLT_MIN -8.7336544750553102d+01)

(cl:export 'GSL_LOG_FLT_MIN)

(cl:defconstant GSL_FLT_MAX 3.4028234663852886d+38)

(cl:export 'GSL_FLT_MAX)

(cl:defconstant GSL_SQRT_FLT_MAX 1.8446743523953730d+19)

(cl:export 'GSL_SQRT_FLT_MAX)

(cl:defconstant GSL_ROOT3_FLT_MAX 6.9814635196223242d+12)

(cl:export 'GSL_ROOT3_FLT_MAX)

(cl:defconstant GSL_ROOT4_FLT_MAX 4.2949672319999986d+09)

(cl:export 'GSL_ROOT4_FLT_MAX)

(cl:defconstant GSL_ROOT5_FLT_MAX 5.0859007855960041d+07)

(cl:export 'GSL_ROOT5_FLT_MAX)

(cl:defconstant GSL_ROOT6_FLT_MAX 2.6422459233807749d+06)

(cl:export 'GSL_ROOT6_FLT_MAX)

(cl:defconstant GSL_LOG_FLT_MAX 8.8722839052068352d+01)

(cl:export 'GSL_LOG_FLT_MAX)

(cl:defconstant GSL_SFLT_EPSILON 4.8828125000000000d-04)

(cl:export 'GSL_SFLT_EPSILON)

(cl:defconstant GSL_SQRT_SFLT_EPSILON 2.2097086912079612d-02)

(cl:export 'GSL_SQRT_SFLT_EPSILON)

(cl:defconstant GSL_ROOT3_SFLT_EPSILON 7.8745065618429588d-02)

(cl:export 'GSL_ROOT3_SFLT_EPSILON)

(cl:defconstant GSL_ROOT4_SFLT_EPSILON 1.4865088937534013d-01)

(cl:export 'GSL_ROOT4_SFLT_EPSILON)

(cl:defconstant GSL_ROOT5_SFLT_EPSILON 2.1763764082403100d-01)

(cl:export 'GSL_ROOT5_SFLT_EPSILON)

(cl:defconstant GSL_ROOT6_SFLT_EPSILON 2.8061551207734325d-01)

(cl:export 'GSL_ROOT6_SFLT_EPSILON)

(cl:defconstant GSL_LOG_SFLT_EPSILON -7.6246189861593985d+00)

(cl:export 'GSL_LOG_SFLT_EPSILON)

(cl:defconstant GSL_MACH_EPS 2.2204460492503131d-16)

(cl:export 'GSL_MACH_EPS)

(cl:defconstant GSL_SQRT_MACH_EPS 3.2d-08)

(cl:export 'GSL_SQRT_MACH_EPS)

(cl:defconstant GSL_ROOT3_MACH_EPS 1.0d-05)

(cl:export 'GSL_ROOT3_MACH_EPS)

(cl:defconstant GSL_ROOT4_MACH_EPS 0.000178d0)

(cl:export 'GSL_ROOT4_MACH_EPS)

(cl:defconstant GSL_ROOT5_MACH_EPS 0.00100d0)

(cl:export 'GSL_ROOT5_MACH_EPS)

(cl:defconstant GSL_ROOT6_MACH_EPS 0.00316d0)

(cl:export 'GSL_ROOT6_MACH_EPS)

(cl:defconstant GSL_LOG_MACH_EPS -34.54d0)

(cl:export 'GSL_LOG_MACH_EPS)

(cl:defconstant M_E 2.71828182845904523536028747135d0)

(cl:export 'M_E)

(cl:defconstant M_LOG2E 1.44269504088896340735992468100d0)

(cl:export 'M_LOG2E)

(cl:defconstant M_LOG10E 0.43429448190325182765112891892d0)

(cl:export 'M_LOG10E)

(cl:defconstant M_SQRT2 1.41421356237309504880168872421d0)

(cl:export 'M_SQRT2)

(cl:defconstant M_SQRT1_2 0.70710678118654752440084436210d0)

(cl:export 'M_SQRT1_2)

(cl:defconstant M_SQRT3 1.73205080756887729352744634151d0)

(cl:export 'M_SQRT3)

(cl:defconstant M_PI 3.14159265358979323846264338328d0)

(cl:export 'M_PI)

(cl:defconstant M_PI_2 1.57079632679489661923132169164d0)

(cl:export 'M_PI_2)

(cl:defconstant M_PI_4 0.78539816339744830961566084582d0)

(cl:export 'M_PI_4)

(cl:defconstant M_SQRTPI 1.77245385090551602729816748334d0)

(cl:export 'M_SQRTPI)

(cl:defconstant M_2_SQRTPI 1.12837916709551257389615890312d0)

(cl:export 'M_2_SQRTPI)

(cl:defconstant M_1_PI 0.31830988618379067153776752675d0)

(cl:export 'M_1_PI)

(cl:defconstant M_2_PI 0.63661977236758134307553505349d0)

(cl:export 'M_2_PI)

(cl:defconstant M_LN10 2.30258509299404568401799145468d0)

(cl:export 'M_LN10)

(cl:defconstant M_LN2 0.69314718055994530941723212146d0)

(cl:export 'M_LN2)

(cl:defconstant M_LNPI 1.14472988584940017414342735135d0)

(cl:export 'M_LNPI)

(cl:defconstant M_EULER 0.57721566490153286060651209008d0)

(cl:export 'M_EULER)

(cffi:defcstruct gsl_function_struct
	(function :pointer)
	(params :pointer))

(cl:export 'gsl_function_struct)

(cl:export 'function)

(cl:export 'params)

(cffi:defcstruct gsl_function_fdf_struct
	(f :pointer)
	(df :pointer)
	(fdf :pointer)
	(params :pointer))

(cl:export 'gsl_function_fdf_struct)

(cl:export 'f)

(cl:export 'df)

(cl:export 'fdf)

(cl:export 'params)

(cffi:defcstruct gsl_function_vec_struct
	(function :pointer)
	(params :pointer))

(cl:export 'gsl_function_vec_struct)

(cl:export 'function)

(cl:export 'params)

(cffi:defcstruct gsl_matrix_char
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :string)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix_char)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_char_view
	(matrix gsl_matrix_char))

(cl:export '_gsl_matrix_char_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_char_const_view
	(matrix gsl_matrix_char))

(cl:export '_gsl_matrix_char_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_char_alloc" gsl_matrix_char_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_char_alloc)

(cffi:defcfun ("gsl_matrix_char_calloc" gsl_matrix_char_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_char_calloc)

(cffi:defcfun ("gsl_matrix_char_alloc_from_block" gsl_matrix_char_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_char_alloc_from_block)

(cffi:defcfun ("gsl_matrix_char_alloc_from_matrix" gsl_matrix_char_alloc_from_matrix) :pointer
  (m :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_char_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_char_alloc_row_from_matrix" gsl_vector_char_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_char_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_char_alloc_col_from_matrix" gsl_vector_char_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_char_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_char_free" gsl_matrix_char_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_char_free)

(cffi:defcfun ("gsl_matrix_char_submatrix" gsl_matrix_char_submatrix) _gsl_matrix_char_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_char_submatrix)

(cffi:defcfun ("gsl_matrix_char_row" gsl_matrix_char_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_char_row)

(cffi:defcfun ("gsl_matrix_char_column" gsl_matrix_char_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_char_column)

(cffi:defcfun ("gsl_matrix_char_diagonal" gsl_matrix_char_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_char_diagonal)

(cffi:defcfun ("gsl_matrix_char_subdiagonal" gsl_matrix_char_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_char_subdiagonal)

(cffi:defcfun ("gsl_matrix_char_superdiagonal" gsl_matrix_char_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_char_superdiagonal)

(cffi:defcfun ("gsl_matrix_char_subrow" gsl_matrix_char_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_char_subrow)

(cffi:defcfun ("gsl_matrix_char_subcolumn" gsl_matrix_char_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_char_subcolumn)

(cffi:defcfun ("gsl_matrix_char_view_array" gsl_matrix_char_view_array) _gsl_matrix_char_view
  (base :string)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_char_view_array)

(cffi:defcfun ("gsl_matrix_char_view_array_with_tda" gsl_matrix_char_view_array_with_tda) _gsl_matrix_char_view
  (base :string)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_char_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_char_view_vector" gsl_matrix_char_view_vector) _gsl_matrix_char_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_char_view_vector)

(cffi:defcfun ("gsl_matrix_char_view_vector_with_tda" gsl_matrix_char_view_vector_with_tda) _gsl_matrix_char_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_char_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_char_const_submatrix" gsl_matrix_char_const_submatrix) _gsl_matrix_char_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_char_const_submatrix)

(cffi:defcfun ("gsl_matrix_char_const_row" gsl_matrix_char_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_char_const_row)

(cffi:defcfun ("gsl_matrix_char_const_column" gsl_matrix_char_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_char_const_column)

(cffi:defcfun ("gsl_matrix_char_const_diagonal" gsl_matrix_char_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_char_const_diagonal)

(cffi:defcfun ("gsl_matrix_char_const_subdiagonal" gsl_matrix_char_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_char_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_char_const_superdiagonal" gsl_matrix_char_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_char_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_char_const_subrow" gsl_matrix_char_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_char_const_subrow)

(cffi:defcfun ("gsl_matrix_char_const_subcolumn" gsl_matrix_char_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_char_const_subcolumn)

(cffi:defcfun ("gsl_matrix_char_const_view_array" gsl_matrix_char_const_view_array) _gsl_matrix_char_const_view
  (base :string)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_char_const_view_array)

(cffi:defcfun ("gsl_matrix_char_const_view_array_with_tda" gsl_matrix_char_const_view_array_with_tda) _gsl_matrix_char_const_view
  (base :string)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_char_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_char_const_view_vector" gsl_matrix_char_const_view_vector) _gsl_matrix_char_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_char_const_view_vector)

(cffi:defcfun ("gsl_matrix_char_const_view_vector_with_tda" gsl_matrix_char_const_view_vector_with_tda) _gsl_matrix_char_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_char_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_char_set_zero" gsl_matrix_char_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_char_set_zero)

(cffi:defcfun ("gsl_matrix_char_set_identity" gsl_matrix_char_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_char_set_identity)

(cffi:defcfun ("gsl_matrix_char_set_all" gsl_matrix_char_set_all) :void
  (m :pointer)
  (x :char))

(cl:export 'gsl_matrix_char_set_all)

(cffi:defcfun ("gsl_matrix_char_fread" gsl_matrix_char_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_char_fread)

(cffi:defcfun ("gsl_matrix_char_fwrite" gsl_matrix_char_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_char_fwrite)

(cffi:defcfun ("gsl_matrix_char_fscanf" gsl_matrix_char_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_char_fscanf)

(cffi:defcfun ("gsl_matrix_char_fprintf" gsl_matrix_char_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_char_fprintf)

(cffi:defcfun ("gsl_matrix_char_memcpy" gsl_matrix_char_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_char_memcpy)

(cffi:defcfun ("gsl_matrix_char_swap" gsl_matrix_char_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_char_swap)

(cffi:defcfun ("gsl_matrix_char_swap_rows" gsl_matrix_char_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_char_swap_rows)

(cffi:defcfun ("gsl_matrix_char_swap_columns" gsl_matrix_char_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_char_swap_columns)

(cffi:defcfun ("gsl_matrix_char_swap_rowcol" gsl_matrix_char_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_char_swap_rowcol)

(cffi:defcfun ("gsl_matrix_char_transpose" gsl_matrix_char_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_char_transpose)

(cffi:defcfun ("gsl_matrix_char_transpose_memcpy" gsl_matrix_char_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_char_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_char_max" gsl_matrix_char_max) :char
  (m :pointer))

(cl:export 'gsl_matrix_char_max)

(cffi:defcfun ("gsl_matrix_char_min" gsl_matrix_char_min) :char
  (m :pointer))

(cl:export 'gsl_matrix_char_min)

(cffi:defcfun ("gsl_matrix_char_minmax" gsl_matrix_char_minmax) :void
  (m :pointer)
  (min_out :string)
  (max_out :string))

(cl:export 'gsl_matrix_char_minmax)

(cffi:defcfun ("gsl_matrix_char_max_index" gsl_matrix_char_max_index) :void
  (m :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_char_max_index)

(cffi:defcfun ("gsl_matrix_char_min_index" gsl_matrix_char_min_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer))

(cl:export 'gsl_matrix_char_min_index)

(cffi:defcfun ("gsl_matrix_char_minmax_index" gsl_matrix_char_minmax_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_char_minmax_index)

(cffi:defcfun ("gsl_matrix_char_equal" gsl_matrix_char_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_char_equal)

(cffi:defcfun ("gsl_matrix_char_isnull" gsl_matrix_char_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_char_isnull)

(cffi:defcfun ("gsl_matrix_char_ispos" gsl_matrix_char_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_char_ispos)

(cffi:defcfun ("gsl_matrix_char_isneg" gsl_matrix_char_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_char_isneg)

(cffi:defcfun ("gsl_matrix_char_isnonneg" gsl_matrix_char_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_char_isnonneg)

(cffi:defcfun ("gsl_matrix_char_add" gsl_matrix_char_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_char_add)

(cffi:defcfun ("gsl_matrix_char_sub" gsl_matrix_char_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_char_sub)

(cffi:defcfun ("gsl_matrix_char_mul_elements" gsl_matrix_char_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_char_mul_elements)

(cffi:defcfun ("gsl_matrix_char_div_elements" gsl_matrix_char_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_char_div_elements)

(cffi:defcfun ("gsl_matrix_char_scale" gsl_matrix_char_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_char_scale)

(cffi:defcfun ("gsl_matrix_char_add_constant" gsl_matrix_char_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_char_add_constant)

(cffi:defcfun ("gsl_matrix_char_add_diagonal" gsl_matrix_char_add_diagonal) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_char_add_diagonal)

(cffi:defcfun ("gsl_matrix_char_get_row" gsl_matrix_char_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_char_get_row)

(cffi:defcfun ("gsl_matrix_char_get_col" gsl_matrix_char_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_char_get_col)

(cffi:defcfun ("gsl_matrix_char_set_row" gsl_matrix_char_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_char_set_row)

(cffi:defcfun ("gsl_matrix_char_set_col" gsl_matrix_char_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_char_set_col)

(cffi:defcfun ("gsl_matrix_char_get" gsl_matrix_char_get) :char
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_char_get)

(cffi:defcfun ("gsl_matrix_char_set" gsl_matrix_char_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x :char))

(cl:export 'gsl_matrix_char_set)

(cffi:defcfun ("gsl_matrix_char_ptr" gsl_matrix_char_ptr) :string
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_char_ptr)

(cffi:defcfun ("gsl_matrix_char_const_ptr" gsl_matrix_char_const_ptr) :string
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_char_const_ptr)

(cffi:defcstruct gsl_matrix_complex
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix_complex)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_complex_view
	(matrix gsl_matrix_complex))

(cl:export '_gsl_matrix_complex_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_complex_const_view
	(matrix gsl_matrix_complex))

(cl:export '_gsl_matrix_complex_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_complex_alloc" gsl_matrix_complex_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_alloc)

(cffi:defcfun ("gsl_matrix_complex_calloc" gsl_matrix_complex_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_calloc)

(cffi:defcfun ("gsl_matrix_complex_alloc_from_block" gsl_matrix_complex_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_complex_alloc_from_block)

(cffi:defcfun ("gsl_matrix_complex_alloc_from_matrix" gsl_matrix_complex_alloc_from_matrix) :pointer
  (b :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_complex_alloc_row_from_matrix" gsl_vector_complex_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_complex_alloc_col_from_matrix" gsl_vector_complex_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_complex_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_complex_free" gsl_matrix_complex_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_complex_free)

(cffi:defcfun ("gsl_matrix_complex_submatrix" gsl_matrix_complex_submatrix) _gsl_matrix_complex_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_submatrix)

(cffi:defcfun ("gsl_matrix_complex_row" gsl_matrix_complex_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_complex_row)

(cffi:defcfun ("gsl_matrix_complex_column" gsl_matrix_complex_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_column)

(cffi:defcfun ("gsl_matrix_complex_diagonal" gsl_matrix_complex_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_complex_diagonal)

(cffi:defcfun ("gsl_matrix_complex_subdiagonal" gsl_matrix_complex_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_complex_subdiagonal)

(cffi:defcfun ("gsl_matrix_complex_superdiagonal" gsl_matrix_complex_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_complex_superdiagonal)

(cffi:defcfun ("gsl_matrix_complex_subrow" gsl_matrix_complex_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_complex_subrow)

(cffi:defcfun ("gsl_matrix_complex_subcolumn" gsl_matrix_complex_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_complex_subcolumn)

(cffi:defcfun ("gsl_matrix_complex_view_array" gsl_matrix_complex_view_array) _gsl_matrix_complex_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_view_array)

(cffi:defcfun ("gsl_matrix_complex_view_array_with_tda" gsl_matrix_complex_view_array_with_tda) _gsl_matrix_complex_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_complex_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_complex_view_vector" gsl_matrix_complex_view_vector) _gsl_matrix_complex_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_view_vector)

(cffi:defcfun ("gsl_matrix_complex_view_vector_with_tda" gsl_matrix_complex_view_vector_with_tda) _gsl_matrix_complex_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_complex_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_complex_const_submatrix" gsl_matrix_complex_const_submatrix) _gsl_matrix_complex_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_const_submatrix)

(cffi:defcfun ("gsl_matrix_complex_const_row" gsl_matrix_complex_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_complex_const_row)

(cffi:defcfun ("gsl_matrix_complex_const_column" gsl_matrix_complex_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_const_column)

(cffi:defcfun ("gsl_matrix_complex_const_diagonal" gsl_matrix_complex_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_complex_const_diagonal)

(cffi:defcfun ("gsl_matrix_complex_const_subdiagonal" gsl_matrix_complex_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_complex_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_complex_const_superdiagonal" gsl_matrix_complex_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_complex_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_complex_const_subrow" gsl_matrix_complex_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_complex_const_subrow)

(cffi:defcfun ("gsl_matrix_complex_const_subcolumn" gsl_matrix_complex_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_complex_const_subcolumn)

(cffi:defcfun ("gsl_matrix_complex_const_view_array" gsl_matrix_complex_const_view_array) _gsl_matrix_complex_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_const_view_array)

(cffi:defcfun ("gsl_matrix_complex_const_view_array_with_tda" gsl_matrix_complex_const_view_array_with_tda) _gsl_matrix_complex_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_complex_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_complex_const_view_vector" gsl_matrix_complex_const_view_vector) _gsl_matrix_complex_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_const_view_vector)

(cffi:defcfun ("gsl_matrix_complex_const_view_vector_with_tda" gsl_matrix_complex_const_view_vector_with_tda) _gsl_matrix_complex_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_complex_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_complex_set_zero" gsl_matrix_complex_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_complex_set_zero)

(cffi:defcfun ("gsl_matrix_complex_set_identity" gsl_matrix_complex_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_complex_set_identity)

(cffi:defcfun ("gsl_matrix_complex_set_all" gsl_matrix_complex_set_all) :void
  (m :pointer)
  (x gsl_complex))

(cl:export 'gsl_matrix_complex_set_all)

(cffi:defcfun ("gsl_matrix_complex_fread" gsl_matrix_complex_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_complex_fread)

(cffi:defcfun ("gsl_matrix_complex_fwrite" gsl_matrix_complex_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_complex_fwrite)

(cffi:defcfun ("gsl_matrix_complex_fscanf" gsl_matrix_complex_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_complex_fscanf)

(cffi:defcfun ("gsl_matrix_complex_fprintf" gsl_matrix_complex_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_complex_fprintf)

(cffi:defcfun ("gsl_matrix_complex_memcpy" gsl_matrix_complex_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_complex_memcpy)

(cffi:defcfun ("gsl_matrix_complex_swap" gsl_matrix_complex_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_complex_swap)

(cffi:defcfun ("gsl_matrix_complex_swap_rows" gsl_matrix_complex_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_swap_rows)

(cffi:defcfun ("gsl_matrix_complex_swap_columns" gsl_matrix_complex_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_swap_columns)

(cffi:defcfun ("gsl_matrix_complex_swap_rowcol" gsl_matrix_complex_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_swap_rowcol)

(cffi:defcfun ("gsl_matrix_complex_transpose" gsl_matrix_complex_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_transpose)

(cffi:defcfun ("gsl_matrix_complex_transpose_memcpy" gsl_matrix_complex_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_complex_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_complex_equal" gsl_matrix_complex_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_equal)

(cffi:defcfun ("gsl_matrix_complex_isnull" gsl_matrix_complex_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_isnull)

(cffi:defcfun ("gsl_matrix_complex_ispos" gsl_matrix_complex_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_ispos)

(cffi:defcfun ("gsl_matrix_complex_isneg" gsl_matrix_complex_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_isneg)

(cffi:defcfun ("gsl_matrix_complex_isnonneg" gsl_matrix_complex_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_isnonneg)

(cffi:defcfun ("gsl_matrix_complex_add" gsl_matrix_complex_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_add)

(cffi:defcfun ("gsl_matrix_complex_sub" gsl_matrix_complex_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_sub)

(cffi:defcfun ("gsl_matrix_complex_mul_elements" gsl_matrix_complex_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_mul_elements)

(cffi:defcfun ("gsl_matrix_complex_div_elements" gsl_matrix_complex_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_div_elements)

(cffi:defcfun ("gsl_matrix_complex_scale" gsl_matrix_complex_scale) :int
  (a :pointer)
  (x gsl_complex))

(cl:export 'gsl_matrix_complex_scale)

(cffi:defcfun ("gsl_matrix_complex_add_constant" gsl_matrix_complex_add_constant) :int
  (a :pointer)
  (x gsl_complex))

(cl:export 'gsl_matrix_complex_add_constant)

(cffi:defcfun ("gsl_matrix_complex_add_diagonal" gsl_matrix_complex_add_diagonal) :int
  (a :pointer)
  (x gsl_complex))

(cl:export 'gsl_matrix_complex_add_diagonal)

(cffi:defcfun ("gsl_matrix_complex_get_row" gsl_matrix_complex_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_complex_get_row)

(cffi:defcfun ("gsl_matrix_complex_get_col" gsl_matrix_complex_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_get_col)

(cffi:defcfun ("gsl_matrix_complex_set_row" gsl_matrix_complex_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_complex_set_row)

(cffi:defcfun ("gsl_matrix_complex_set_col" gsl_matrix_complex_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_complex_set_col)

(cffi:defcfun ("gsl_matrix_complex_get" gsl_matrix_complex_get) gsl_complex
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_get)

(cffi:defcfun ("gsl_matrix_complex_set" gsl_matrix_complex_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x gsl_complex))

(cl:export 'gsl_matrix_complex_set)

(cffi:defcfun ("gsl_matrix_complex_ptr" gsl_matrix_complex_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_ptr)

(cffi:defcfun ("gsl_matrix_complex_const_ptr" gsl_matrix_complex_const_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_const_ptr)

(cffi:defcstruct gsl_matrix_complex_float
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix_complex_float)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_complex_float_view
	(matrix gsl_matrix_complex_float))

(cl:export '_gsl_matrix_complex_float_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_complex_float_const_view
	(matrix gsl_matrix_complex_float))

(cl:export '_gsl_matrix_complex_float_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_complex_float_alloc" gsl_matrix_complex_float_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_float_alloc)

(cffi:defcfun ("gsl_matrix_complex_float_calloc" gsl_matrix_complex_float_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_float_calloc)

(cffi:defcfun ("gsl_matrix_complex_float_alloc_from_block" gsl_matrix_complex_float_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_complex_float_alloc_from_block)

(cffi:defcfun ("gsl_matrix_complex_float_alloc_from_matrix" gsl_matrix_complex_float_alloc_from_matrix) :pointer
  (b :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_float_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_complex_float_alloc_row_from_matrix" gsl_vector_complex_float_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_float_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_complex_float_alloc_col_from_matrix" gsl_vector_complex_float_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_complex_float_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_complex_float_free" gsl_matrix_complex_float_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_complex_float_free)

(cffi:defcfun ("gsl_matrix_complex_float_submatrix" gsl_matrix_complex_float_submatrix) _gsl_matrix_complex_float_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_float_submatrix)

(cffi:defcfun ("gsl_matrix_complex_float_row" gsl_matrix_complex_float_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_complex_float_row)

(cffi:defcfun ("gsl_matrix_complex_float_column" gsl_matrix_complex_float_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_float_column)

(cffi:defcfun ("gsl_matrix_complex_float_diagonal" gsl_matrix_complex_float_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_complex_float_diagonal)

(cffi:defcfun ("gsl_matrix_complex_float_subdiagonal" gsl_matrix_complex_float_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_complex_float_subdiagonal)

(cffi:defcfun ("gsl_matrix_complex_float_superdiagonal" gsl_matrix_complex_float_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_complex_float_superdiagonal)

(cffi:defcfun ("gsl_matrix_complex_float_subrow" gsl_matrix_complex_float_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_complex_float_subrow)

(cffi:defcfun ("gsl_matrix_complex_float_subcolumn" gsl_matrix_complex_float_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_complex_float_subcolumn)

(cffi:defcfun ("gsl_matrix_complex_float_view_array" gsl_matrix_complex_float_view_array) _gsl_matrix_complex_float_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_float_view_array)

(cffi:defcfun ("gsl_matrix_complex_float_view_array_with_tda" gsl_matrix_complex_float_view_array_with_tda) _gsl_matrix_complex_float_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_complex_float_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_complex_float_view_vector" gsl_matrix_complex_float_view_vector) _gsl_matrix_complex_float_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_float_view_vector)

(cffi:defcfun ("gsl_matrix_complex_float_view_vector_with_tda" gsl_matrix_complex_float_view_vector_with_tda) _gsl_matrix_complex_float_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_complex_float_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_complex_float_const_submatrix" gsl_matrix_complex_float_const_submatrix) _gsl_matrix_complex_float_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_float_const_submatrix)

(cffi:defcfun ("gsl_matrix_complex_float_const_row" gsl_matrix_complex_float_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_complex_float_const_row)

(cffi:defcfun ("gsl_matrix_complex_float_const_column" gsl_matrix_complex_float_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_float_const_column)

(cffi:defcfun ("gsl_matrix_complex_float_const_diagonal" gsl_matrix_complex_float_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_complex_float_const_diagonal)

(cffi:defcfun ("gsl_matrix_complex_float_const_subdiagonal" gsl_matrix_complex_float_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_complex_float_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_complex_float_const_superdiagonal" gsl_matrix_complex_float_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_complex_float_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_complex_float_const_subrow" gsl_matrix_complex_float_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_complex_float_const_subrow)

(cffi:defcfun ("gsl_matrix_complex_float_const_subcolumn" gsl_matrix_complex_float_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_complex_float_const_subcolumn)

(cffi:defcfun ("gsl_matrix_complex_float_const_view_array" gsl_matrix_complex_float_const_view_array) _gsl_matrix_complex_float_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_float_const_view_array)

(cffi:defcfun ("gsl_matrix_complex_float_const_view_array_with_tda" gsl_matrix_complex_float_const_view_array_with_tda) _gsl_matrix_complex_float_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_complex_float_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_complex_float_const_view_vector" gsl_matrix_complex_float_const_view_vector) _gsl_matrix_complex_float_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_float_const_view_vector)

(cffi:defcfun ("gsl_matrix_complex_float_const_view_vector_with_tda" gsl_matrix_complex_float_const_view_vector_with_tda) _gsl_matrix_complex_float_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_complex_float_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_complex_float_set_zero" gsl_matrix_complex_float_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_complex_float_set_zero)

(cffi:defcfun ("gsl_matrix_complex_float_set_identity" gsl_matrix_complex_float_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_complex_float_set_identity)

(cffi:defcfun ("gsl_matrix_complex_float_set_all" gsl_matrix_complex_float_set_all) :void
  (m :pointer)
  (x gsl_complex_float))

(cl:export 'gsl_matrix_complex_float_set_all)

(cffi:defcfun ("gsl_matrix_complex_float_fread" gsl_matrix_complex_float_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_complex_float_fread)

(cffi:defcfun ("gsl_matrix_complex_float_fwrite" gsl_matrix_complex_float_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_complex_float_fwrite)

(cffi:defcfun ("gsl_matrix_complex_float_fscanf" gsl_matrix_complex_float_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_complex_float_fscanf)

(cffi:defcfun ("gsl_matrix_complex_float_fprintf" gsl_matrix_complex_float_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_complex_float_fprintf)

(cffi:defcfun ("gsl_matrix_complex_float_memcpy" gsl_matrix_complex_float_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_complex_float_memcpy)

(cffi:defcfun ("gsl_matrix_complex_float_swap" gsl_matrix_complex_float_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_complex_float_swap)

(cffi:defcfun ("gsl_matrix_complex_float_swap_rows" gsl_matrix_complex_float_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_float_swap_rows)

(cffi:defcfun ("gsl_matrix_complex_float_swap_columns" gsl_matrix_complex_float_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_float_swap_columns)

(cffi:defcfun ("gsl_matrix_complex_float_swap_rowcol" gsl_matrix_complex_float_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_float_swap_rowcol)

(cffi:defcfun ("gsl_matrix_complex_float_transpose" gsl_matrix_complex_float_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_float_transpose)

(cffi:defcfun ("gsl_matrix_complex_float_transpose_memcpy" gsl_matrix_complex_float_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_complex_float_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_complex_float_equal" gsl_matrix_complex_float_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_float_equal)

(cffi:defcfun ("gsl_matrix_complex_float_isnull" gsl_matrix_complex_float_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_float_isnull)

(cffi:defcfun ("gsl_matrix_complex_float_ispos" gsl_matrix_complex_float_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_float_ispos)

(cffi:defcfun ("gsl_matrix_complex_float_isneg" gsl_matrix_complex_float_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_float_isneg)

(cffi:defcfun ("gsl_matrix_complex_float_isnonneg" gsl_matrix_complex_float_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_float_isnonneg)

(cffi:defcfun ("gsl_matrix_complex_float_add" gsl_matrix_complex_float_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_float_add)

(cffi:defcfun ("gsl_matrix_complex_float_sub" gsl_matrix_complex_float_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_float_sub)

(cffi:defcfun ("gsl_matrix_complex_float_mul_elements" gsl_matrix_complex_float_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_float_mul_elements)

(cffi:defcfun ("gsl_matrix_complex_float_div_elements" gsl_matrix_complex_float_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_float_div_elements)

(cffi:defcfun ("gsl_matrix_complex_float_scale" gsl_matrix_complex_float_scale) :int
  (a :pointer)
  (x gsl_complex_float))

(cl:export 'gsl_matrix_complex_float_scale)

(cffi:defcfun ("gsl_matrix_complex_float_add_constant" gsl_matrix_complex_float_add_constant) :int
  (a :pointer)
  (x gsl_complex_float))

(cl:export 'gsl_matrix_complex_float_add_constant)

(cffi:defcfun ("gsl_matrix_complex_float_add_diagonal" gsl_matrix_complex_float_add_diagonal) :int
  (a :pointer)
  (x gsl_complex_float))

(cl:export 'gsl_matrix_complex_float_add_diagonal)

(cffi:defcfun ("gsl_matrix_complex_float_get_row" gsl_matrix_complex_float_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_complex_float_get_row)

(cffi:defcfun ("gsl_matrix_complex_float_get_col" gsl_matrix_complex_float_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_float_get_col)

(cffi:defcfun ("gsl_matrix_complex_float_set_row" gsl_matrix_complex_float_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_complex_float_set_row)

(cffi:defcfun ("gsl_matrix_complex_float_set_col" gsl_matrix_complex_float_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_complex_float_set_col)

(cffi:defcfun ("gsl_matrix_complex_float_get" gsl_matrix_complex_float_get) gsl_complex_float
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_float_get)

(cffi:defcfun ("gsl_matrix_complex_float_set" gsl_matrix_complex_float_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x gsl_complex_float))

(cl:export 'gsl_matrix_complex_float_set)

(cffi:defcfun ("gsl_matrix_complex_float_ptr" gsl_matrix_complex_float_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_float_ptr)

(cffi:defcfun ("gsl_matrix_complex_float_const_ptr" gsl_matrix_complex_float_const_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_float_const_ptr)

(cffi:defcstruct gsl_matrix_complex_long_double
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix_complex_long_double)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_complex_long_double_view
	(matrix gsl_matrix_complex_long_double))

(cl:export '_gsl_matrix_complex_long_double_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_complex_long_double_const_view
	(matrix gsl_matrix_complex_long_double))

(cl:export '_gsl_matrix_complex_long_double_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_complex_long_double_alloc" gsl_matrix_complex_long_double_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_long_double_alloc)

(cffi:defcfun ("gsl_matrix_complex_long_double_calloc" gsl_matrix_complex_long_double_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_long_double_calloc)

(cffi:defcfun ("gsl_matrix_complex_long_double_alloc_from_block" gsl_matrix_complex_long_double_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_complex_long_double_alloc_from_block)

(cffi:defcfun ("gsl_matrix_complex_long_double_alloc_from_matrix" gsl_matrix_complex_long_double_alloc_from_matrix) :pointer
  (b :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_long_double_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_complex_long_double_alloc_row_from_matrix" gsl_vector_complex_long_double_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_long_double_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_complex_long_double_alloc_col_from_matrix" gsl_vector_complex_long_double_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_complex_long_double_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_complex_long_double_free" gsl_matrix_complex_long_double_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_complex_long_double_free)

(cffi:defcfun ("gsl_matrix_complex_long_double_submatrix" gsl_matrix_complex_long_double_submatrix) _gsl_matrix_complex_long_double_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_long_double_submatrix)

(cffi:defcfun ("gsl_matrix_complex_long_double_row" gsl_matrix_complex_long_double_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_complex_long_double_row)

(cffi:defcfun ("gsl_matrix_complex_long_double_column" gsl_matrix_complex_long_double_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_long_double_column)

(cffi:defcfun ("gsl_matrix_complex_long_double_diagonal" gsl_matrix_complex_long_double_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_complex_long_double_diagonal)

(cffi:defcfun ("gsl_matrix_complex_long_double_subdiagonal" gsl_matrix_complex_long_double_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_complex_long_double_subdiagonal)

(cffi:defcfun ("gsl_matrix_complex_long_double_superdiagonal" gsl_matrix_complex_long_double_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_complex_long_double_superdiagonal)

(cffi:defcfun ("gsl_matrix_complex_long_double_subrow" gsl_matrix_complex_long_double_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_complex_long_double_subrow)

(cffi:defcfun ("gsl_matrix_complex_long_double_subcolumn" gsl_matrix_complex_long_double_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_complex_long_double_subcolumn)

(cffi:defcfun ("gsl_matrix_complex_long_double_view_array" gsl_matrix_complex_long_double_view_array) _gsl_matrix_complex_long_double_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_long_double_view_array)

(cffi:defcfun ("gsl_matrix_complex_long_double_view_array_with_tda" gsl_matrix_complex_long_double_view_array_with_tda) _gsl_matrix_complex_long_double_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_complex_long_double_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_complex_long_double_view_vector" gsl_matrix_complex_long_double_view_vector) _gsl_matrix_complex_long_double_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_long_double_view_vector)

(cffi:defcfun ("gsl_matrix_complex_long_double_view_vector_with_tda" gsl_matrix_complex_long_double_view_vector_with_tda) _gsl_matrix_complex_long_double_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_complex_long_double_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_complex_long_double_const_submatrix" gsl_matrix_complex_long_double_const_submatrix) _gsl_matrix_complex_long_double_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_long_double_const_submatrix)

(cffi:defcfun ("gsl_matrix_complex_long_double_const_row" gsl_matrix_complex_long_double_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_complex_long_double_const_row)

(cffi:defcfun ("gsl_matrix_complex_long_double_const_column" gsl_matrix_complex_long_double_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_long_double_const_column)

(cffi:defcfun ("gsl_matrix_complex_long_double_const_diagonal" gsl_matrix_complex_long_double_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_complex_long_double_const_diagonal)

(cffi:defcfun ("gsl_matrix_complex_long_double_const_subdiagonal" gsl_matrix_complex_long_double_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_complex_long_double_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_complex_long_double_const_superdiagonal" gsl_matrix_complex_long_double_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_complex_long_double_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_complex_long_double_const_subrow" gsl_matrix_complex_long_double_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_complex_long_double_const_subrow)

(cffi:defcfun ("gsl_matrix_complex_long_double_const_subcolumn" gsl_matrix_complex_long_double_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_complex_long_double_const_subcolumn)

(cffi:defcfun ("gsl_matrix_complex_long_double_const_view_array" gsl_matrix_complex_long_double_const_view_array) _gsl_matrix_complex_long_double_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_long_double_const_view_array)

(cffi:defcfun ("gsl_matrix_complex_long_double_const_view_array_with_tda" gsl_matrix_complex_long_double_const_view_array_with_tda) _gsl_matrix_complex_long_double_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_complex_long_double_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_complex_long_double_const_view_vector" gsl_matrix_complex_long_double_const_view_vector) _gsl_matrix_complex_long_double_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_complex_long_double_const_view_vector)

(cffi:defcfun ("gsl_matrix_complex_long_double_const_view_vector_with_tda" gsl_matrix_complex_long_double_const_view_vector_with_tda) _gsl_matrix_complex_long_double_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_complex_long_double_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_complex_long_double_set_zero" gsl_matrix_complex_long_double_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_complex_long_double_set_zero)

(cffi:defcfun ("gsl_matrix_complex_long_double_set_identity" gsl_matrix_complex_long_double_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_complex_long_double_set_identity)

(cffi:defcfun ("gsl_matrix_complex_long_double_set_all" gsl_matrix_complex_long_double_set_all) :void
  (m :pointer)
  (x gsl_complex_long_double))

(cl:export 'gsl_matrix_complex_long_double_set_all)

(cffi:defcfun ("gsl_matrix_complex_long_double_fread" gsl_matrix_complex_long_double_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_complex_long_double_fread)

(cffi:defcfun ("gsl_matrix_complex_long_double_fwrite" gsl_matrix_complex_long_double_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_complex_long_double_fwrite)

(cffi:defcfun ("gsl_matrix_complex_long_double_fscanf" gsl_matrix_complex_long_double_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_complex_long_double_fscanf)

(cffi:defcfun ("gsl_matrix_complex_long_double_fprintf" gsl_matrix_complex_long_double_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_complex_long_double_fprintf)

(cffi:defcfun ("gsl_matrix_complex_long_double_memcpy" gsl_matrix_complex_long_double_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_complex_long_double_memcpy)

(cffi:defcfun ("gsl_matrix_complex_long_double_swap" gsl_matrix_complex_long_double_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_complex_long_double_swap)

(cffi:defcfun ("gsl_matrix_complex_long_double_swap_rows" gsl_matrix_complex_long_double_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_long_double_swap_rows)

(cffi:defcfun ("gsl_matrix_complex_long_double_swap_columns" gsl_matrix_complex_long_double_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_long_double_swap_columns)

(cffi:defcfun ("gsl_matrix_complex_long_double_swap_rowcol" gsl_matrix_complex_long_double_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_long_double_swap_rowcol)

(cffi:defcfun ("gsl_matrix_complex_long_double_transpose" gsl_matrix_complex_long_double_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_long_double_transpose)

(cffi:defcfun ("gsl_matrix_complex_long_double_transpose_memcpy" gsl_matrix_complex_long_double_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_complex_long_double_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_complex_long_double_equal" gsl_matrix_complex_long_double_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_long_double_equal)

(cffi:defcfun ("gsl_matrix_complex_long_double_isnull" gsl_matrix_complex_long_double_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_long_double_isnull)

(cffi:defcfun ("gsl_matrix_complex_long_double_ispos" gsl_matrix_complex_long_double_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_long_double_ispos)

(cffi:defcfun ("gsl_matrix_complex_long_double_isneg" gsl_matrix_complex_long_double_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_long_double_isneg)

(cffi:defcfun ("gsl_matrix_complex_long_double_isnonneg" gsl_matrix_complex_long_double_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_complex_long_double_isnonneg)

(cffi:defcfun ("gsl_matrix_complex_long_double_add" gsl_matrix_complex_long_double_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_long_double_add)

(cffi:defcfun ("gsl_matrix_complex_long_double_sub" gsl_matrix_complex_long_double_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_long_double_sub)

(cffi:defcfun ("gsl_matrix_complex_long_double_mul_elements" gsl_matrix_complex_long_double_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_long_double_mul_elements)

(cffi:defcfun ("gsl_matrix_complex_long_double_div_elements" gsl_matrix_complex_long_double_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_complex_long_double_div_elements)

(cffi:defcfun ("gsl_matrix_complex_long_double_scale" gsl_matrix_complex_long_double_scale) :int
  (a :pointer)
  (x gsl_complex_long_double))

(cl:export 'gsl_matrix_complex_long_double_scale)

(cffi:defcfun ("gsl_matrix_complex_long_double_add_constant" gsl_matrix_complex_long_double_add_constant) :int
  (a :pointer)
  (x gsl_complex_long_double))

(cl:export 'gsl_matrix_complex_long_double_add_constant)

(cffi:defcfun ("gsl_matrix_complex_long_double_add_diagonal" gsl_matrix_complex_long_double_add_diagonal) :int
  (a :pointer)
  (x gsl_complex_long_double))

(cl:export 'gsl_matrix_complex_long_double_add_diagonal)

(cffi:defcfun ("gsl_matrix_complex_long_double_get_row" gsl_matrix_complex_long_double_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_complex_long_double_get_row)

(cffi:defcfun ("gsl_matrix_complex_long_double_get_col" gsl_matrix_complex_long_double_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_long_double_get_col)

(cffi:defcfun ("gsl_matrix_complex_long_double_set_row" gsl_matrix_complex_long_double_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_complex_long_double_set_row)

(cffi:defcfun ("gsl_matrix_complex_long_double_set_col" gsl_matrix_complex_long_double_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_complex_long_double_set_col)

(cffi:defcfun ("gsl_matrix_complex_long_double_get" gsl_matrix_complex_long_double_get) gsl_complex_long_double
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_long_double_get)

(cffi:defcfun ("gsl_matrix_complex_long_double_set" gsl_matrix_complex_long_double_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x gsl_complex_long_double))

(cl:export 'gsl_matrix_complex_long_double_set)

(cffi:defcfun ("gsl_matrix_complex_long_double_ptr" gsl_matrix_complex_long_double_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_long_double_ptr)

(cffi:defcfun ("gsl_matrix_complex_long_double_const_ptr" gsl_matrix_complex_long_double_const_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_complex_long_double_const_ptr)

(cffi:defcstruct gsl_matrix
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_view
	(matrix gsl_matrix))

(cl:export '_gsl_matrix_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_const_view
	(matrix gsl_matrix))

(cl:export '_gsl_matrix_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_alloc" gsl_matrix_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_alloc)

(cffi:defcfun ("gsl_matrix_calloc" gsl_matrix_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_calloc)

(cffi:defcfun ("gsl_matrix_alloc_from_block" gsl_matrix_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_alloc_from_block)

(cffi:defcfun ("gsl_matrix_alloc_from_matrix" gsl_matrix_alloc_from_matrix) :pointer
  (m :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_alloc_row_from_matrix" gsl_vector_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_alloc_col_from_matrix" gsl_vector_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_free" gsl_matrix_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_free)

(cffi:defcfun ("gsl_matrix_submatrix" gsl_matrix_submatrix) _gsl_matrix_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_submatrix)

(cffi:defcfun ("gsl_matrix_row" gsl_matrix_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_row)

(cffi:defcfun ("gsl_matrix_column" gsl_matrix_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_column)

(cffi:defcfun ("gsl_matrix_diagonal" gsl_matrix_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_diagonal)

(cffi:defcfun ("gsl_matrix_subdiagonal" gsl_matrix_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_subdiagonal)

(cffi:defcfun ("gsl_matrix_superdiagonal" gsl_matrix_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_superdiagonal)

(cffi:defcfun ("gsl_matrix_subrow" gsl_matrix_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_subrow)

(cffi:defcfun ("gsl_matrix_subcolumn" gsl_matrix_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_subcolumn)

(cffi:defcfun ("gsl_matrix_view_array" gsl_matrix_view_array) _gsl_matrix_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_view_array)

(cffi:defcfun ("gsl_matrix_view_array_with_tda" gsl_matrix_view_array_with_tda) _gsl_matrix_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_view_vector" gsl_matrix_view_vector) _gsl_matrix_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_view_vector)

(cffi:defcfun ("gsl_matrix_view_vector_with_tda" gsl_matrix_view_vector_with_tda) _gsl_matrix_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_const_submatrix" gsl_matrix_const_submatrix) _gsl_matrix_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_const_submatrix)

(cffi:defcfun ("gsl_matrix_const_row" gsl_matrix_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_const_row)

(cffi:defcfun ("gsl_matrix_const_column" gsl_matrix_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_const_column)

(cffi:defcfun ("gsl_matrix_const_diagonal" gsl_matrix_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_const_diagonal)

(cffi:defcfun ("gsl_matrix_const_subdiagonal" gsl_matrix_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_const_superdiagonal" gsl_matrix_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_const_subrow" gsl_matrix_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_const_subrow)

(cffi:defcfun ("gsl_matrix_const_subcolumn" gsl_matrix_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_const_subcolumn)

(cffi:defcfun ("gsl_matrix_const_view_array" gsl_matrix_const_view_array) _gsl_matrix_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_const_view_array)

(cffi:defcfun ("gsl_matrix_const_view_array_with_tda" gsl_matrix_const_view_array_with_tda) _gsl_matrix_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_const_view_vector" gsl_matrix_const_view_vector) _gsl_matrix_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_const_view_vector)

(cffi:defcfun ("gsl_matrix_const_view_vector_with_tda" gsl_matrix_const_view_vector_with_tda) _gsl_matrix_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_set_zero" gsl_matrix_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_set_zero)

(cffi:defcfun ("gsl_matrix_set_identity" gsl_matrix_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_set_identity)

(cffi:defcfun ("gsl_matrix_set_all" gsl_matrix_set_all) :void
  (m :pointer)
  (x :double))

(cl:export 'gsl_matrix_set_all)

(cffi:defcfun ("gsl_matrix_fread" gsl_matrix_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_fread)

(cffi:defcfun ("gsl_matrix_fwrite" gsl_matrix_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_fwrite)

(cffi:defcfun ("gsl_matrix_fscanf" gsl_matrix_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_fscanf)

(cffi:defcfun ("gsl_matrix_fprintf" gsl_matrix_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_fprintf)

(cffi:defcfun ("gsl_matrix_memcpy" gsl_matrix_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_memcpy)

(cffi:defcfun ("gsl_matrix_swap" gsl_matrix_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_swap)

(cffi:defcfun ("gsl_matrix_swap_rows" gsl_matrix_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_swap_rows)

(cffi:defcfun ("gsl_matrix_swap_columns" gsl_matrix_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_swap_columns)

(cffi:defcfun ("gsl_matrix_swap_rowcol" gsl_matrix_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_swap_rowcol)

(cffi:defcfun ("gsl_matrix_transpose" gsl_matrix_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_transpose)

(cffi:defcfun ("gsl_matrix_transpose_memcpy" gsl_matrix_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_max" gsl_matrix_max) :double
  (m :pointer))

(cl:export 'gsl_matrix_max)

(cffi:defcfun ("gsl_matrix_min" gsl_matrix_min) :double
  (m :pointer))

(cl:export 'gsl_matrix_min)

(cffi:defcfun ("gsl_matrix_minmax" gsl_matrix_minmax) :void
  (m :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_matrix_minmax)

(cffi:defcfun ("gsl_matrix_max_index" gsl_matrix_max_index) :void
  (m :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_max_index)

(cffi:defcfun ("gsl_matrix_min_index" gsl_matrix_min_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer))

(cl:export 'gsl_matrix_min_index)

(cffi:defcfun ("gsl_matrix_minmax_index" gsl_matrix_minmax_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_minmax_index)

(cffi:defcfun ("gsl_matrix_equal" gsl_matrix_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_equal)

(cffi:defcfun ("gsl_matrix_isnull" gsl_matrix_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_isnull)

(cffi:defcfun ("gsl_matrix_ispos" gsl_matrix_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_ispos)

(cffi:defcfun ("gsl_matrix_isneg" gsl_matrix_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_isneg)

(cffi:defcfun ("gsl_matrix_isnonneg" gsl_matrix_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_isnonneg)

(cffi:defcfun ("gsl_matrix_add" gsl_matrix_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_add)

(cffi:defcfun ("gsl_matrix_sub" gsl_matrix_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_sub)

(cffi:defcfun ("gsl_matrix_mul_elements" gsl_matrix_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_mul_elements)

(cffi:defcfun ("gsl_matrix_div_elements" gsl_matrix_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_div_elements)

(cffi:defcfun ("gsl_matrix_scale" gsl_matrix_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_scale)

(cffi:defcfun ("gsl_matrix_add_constant" gsl_matrix_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_add_constant)

(cffi:defcfun ("gsl_matrix_add_diagonal" gsl_matrix_add_diagonal) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_add_diagonal)

(cffi:defcfun ("gsl_matrix_get_row" gsl_matrix_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_get_row)

(cffi:defcfun ("gsl_matrix_get_col" gsl_matrix_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_get_col)

(cffi:defcfun ("gsl_matrix_set_row" gsl_matrix_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_set_row)

(cffi:defcfun ("gsl_matrix_set_col" gsl_matrix_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_set_col)

(cffi:defcfun ("gsl_matrix_get" gsl_matrix_get) :double
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_get)

(cffi:defcfun ("gsl_matrix_set" gsl_matrix_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x :double))

(cl:export 'gsl_matrix_set)

(cffi:defcfun ("gsl_matrix_ptr" gsl_matrix_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ptr)

(cffi:defcfun ("gsl_matrix_const_ptr" gsl_matrix_const_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_const_ptr)

(cffi:defcstruct gsl_matrix_float
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix_float)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_float_view
	(matrix gsl_matrix_float))

(cl:export '_gsl_matrix_float_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_float_const_view
	(matrix gsl_matrix_float))

(cl:export '_gsl_matrix_float_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_float_alloc" gsl_matrix_float_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_float_alloc)

(cffi:defcfun ("gsl_matrix_float_calloc" gsl_matrix_float_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_float_calloc)

(cffi:defcfun ("gsl_matrix_float_alloc_from_block" gsl_matrix_float_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_float_alloc_from_block)

(cffi:defcfun ("gsl_matrix_float_alloc_from_matrix" gsl_matrix_float_alloc_from_matrix) :pointer
  (m :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_float_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_float_alloc_row_from_matrix" gsl_vector_float_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_float_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_float_alloc_col_from_matrix" gsl_vector_float_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_float_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_float_free" gsl_matrix_float_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_float_free)

(cffi:defcfun ("gsl_matrix_float_submatrix" gsl_matrix_float_submatrix) _gsl_matrix_float_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_float_submatrix)

(cffi:defcfun ("gsl_matrix_float_row" gsl_matrix_float_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_float_row)

(cffi:defcfun ("gsl_matrix_float_column" gsl_matrix_float_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_float_column)

(cffi:defcfun ("gsl_matrix_float_diagonal" gsl_matrix_float_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_float_diagonal)

(cffi:defcfun ("gsl_matrix_float_subdiagonal" gsl_matrix_float_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_float_subdiagonal)

(cffi:defcfun ("gsl_matrix_float_superdiagonal" gsl_matrix_float_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_float_superdiagonal)

(cffi:defcfun ("gsl_matrix_float_subrow" gsl_matrix_float_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_float_subrow)

(cffi:defcfun ("gsl_matrix_float_subcolumn" gsl_matrix_float_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_float_subcolumn)

(cffi:defcfun ("gsl_matrix_float_view_array" gsl_matrix_float_view_array) _gsl_matrix_float_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_float_view_array)

(cffi:defcfun ("gsl_matrix_float_view_array_with_tda" gsl_matrix_float_view_array_with_tda) _gsl_matrix_float_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_float_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_float_view_vector" gsl_matrix_float_view_vector) _gsl_matrix_float_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_float_view_vector)

(cffi:defcfun ("gsl_matrix_float_view_vector_with_tda" gsl_matrix_float_view_vector_with_tda) _gsl_matrix_float_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_float_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_float_const_submatrix" gsl_matrix_float_const_submatrix) _gsl_matrix_float_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_float_const_submatrix)

(cffi:defcfun ("gsl_matrix_float_const_row" gsl_matrix_float_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_float_const_row)

(cffi:defcfun ("gsl_matrix_float_const_column" gsl_matrix_float_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_float_const_column)

(cffi:defcfun ("gsl_matrix_float_const_diagonal" gsl_matrix_float_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_float_const_diagonal)

(cffi:defcfun ("gsl_matrix_float_const_subdiagonal" gsl_matrix_float_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_float_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_float_const_superdiagonal" gsl_matrix_float_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_float_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_float_const_subrow" gsl_matrix_float_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_float_const_subrow)

(cffi:defcfun ("gsl_matrix_float_const_subcolumn" gsl_matrix_float_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_float_const_subcolumn)

(cffi:defcfun ("gsl_matrix_float_const_view_array" gsl_matrix_float_const_view_array) _gsl_matrix_float_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_float_const_view_array)

(cffi:defcfun ("gsl_matrix_float_const_view_array_with_tda" gsl_matrix_float_const_view_array_with_tda) _gsl_matrix_float_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_float_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_float_const_view_vector" gsl_matrix_float_const_view_vector) _gsl_matrix_float_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_float_const_view_vector)

(cffi:defcfun ("gsl_matrix_float_const_view_vector_with_tda" gsl_matrix_float_const_view_vector_with_tda) _gsl_matrix_float_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_float_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_float_set_zero" gsl_matrix_float_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_float_set_zero)

(cffi:defcfun ("gsl_matrix_float_set_identity" gsl_matrix_float_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_float_set_identity)

(cffi:defcfun ("gsl_matrix_float_set_all" gsl_matrix_float_set_all) :void
  (m :pointer)
  (x :float))

(cl:export 'gsl_matrix_float_set_all)

(cffi:defcfun ("gsl_matrix_float_fread" gsl_matrix_float_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_float_fread)

(cffi:defcfun ("gsl_matrix_float_fwrite" gsl_matrix_float_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_float_fwrite)

(cffi:defcfun ("gsl_matrix_float_fscanf" gsl_matrix_float_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_float_fscanf)

(cffi:defcfun ("gsl_matrix_float_fprintf" gsl_matrix_float_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_float_fprintf)

(cffi:defcfun ("gsl_matrix_float_memcpy" gsl_matrix_float_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_float_memcpy)

(cffi:defcfun ("gsl_matrix_float_swap" gsl_matrix_float_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_float_swap)

(cffi:defcfun ("gsl_matrix_float_swap_rows" gsl_matrix_float_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_float_swap_rows)

(cffi:defcfun ("gsl_matrix_float_swap_columns" gsl_matrix_float_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_float_swap_columns)

(cffi:defcfun ("gsl_matrix_float_swap_rowcol" gsl_matrix_float_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_float_swap_rowcol)

(cffi:defcfun ("gsl_matrix_float_transpose" gsl_matrix_float_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_float_transpose)

(cffi:defcfun ("gsl_matrix_float_transpose_memcpy" gsl_matrix_float_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_float_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_float_max" gsl_matrix_float_max) :float
  (m :pointer))

(cl:export 'gsl_matrix_float_max)

(cffi:defcfun ("gsl_matrix_float_min" gsl_matrix_float_min) :float
  (m :pointer))

(cl:export 'gsl_matrix_float_min)

(cffi:defcfun ("gsl_matrix_float_minmax" gsl_matrix_float_minmax) :void
  (m :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_matrix_float_minmax)

(cffi:defcfun ("gsl_matrix_float_max_index" gsl_matrix_float_max_index) :void
  (m :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_float_max_index)

(cffi:defcfun ("gsl_matrix_float_min_index" gsl_matrix_float_min_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer))

(cl:export 'gsl_matrix_float_min_index)

(cffi:defcfun ("gsl_matrix_float_minmax_index" gsl_matrix_float_minmax_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_float_minmax_index)

(cffi:defcfun ("gsl_matrix_float_equal" gsl_matrix_float_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_float_equal)

(cffi:defcfun ("gsl_matrix_float_isnull" gsl_matrix_float_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_float_isnull)

(cffi:defcfun ("gsl_matrix_float_ispos" gsl_matrix_float_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_float_ispos)

(cffi:defcfun ("gsl_matrix_float_isneg" gsl_matrix_float_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_float_isneg)

(cffi:defcfun ("gsl_matrix_float_isnonneg" gsl_matrix_float_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_float_isnonneg)

(cffi:defcfun ("gsl_matrix_float_add" gsl_matrix_float_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_float_add)

(cffi:defcfun ("gsl_matrix_float_sub" gsl_matrix_float_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_float_sub)

(cffi:defcfun ("gsl_matrix_float_mul_elements" gsl_matrix_float_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_float_mul_elements)

(cffi:defcfun ("gsl_matrix_float_div_elements" gsl_matrix_float_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_float_div_elements)

(cffi:defcfun ("gsl_matrix_float_scale" gsl_matrix_float_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_float_scale)

(cffi:defcfun ("gsl_matrix_float_add_constant" gsl_matrix_float_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_float_add_constant)

(cffi:defcfun ("gsl_matrix_float_add_diagonal" gsl_matrix_float_add_diagonal) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_float_add_diagonal)

(cffi:defcfun ("gsl_matrix_float_get_row" gsl_matrix_float_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_float_get_row)

(cffi:defcfun ("gsl_matrix_float_get_col" gsl_matrix_float_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_float_get_col)

(cffi:defcfun ("gsl_matrix_float_set_row" gsl_matrix_float_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_float_set_row)

(cffi:defcfun ("gsl_matrix_float_set_col" gsl_matrix_float_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_float_set_col)

(cffi:defcfun ("gsl_matrix_float_get" gsl_matrix_float_get) :float
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_float_get)

(cffi:defcfun ("gsl_matrix_float_set" gsl_matrix_float_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x :float))

(cl:export 'gsl_matrix_float_set)

(cffi:defcfun ("gsl_matrix_float_ptr" gsl_matrix_float_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_float_ptr)

(cffi:defcfun ("gsl_matrix_float_const_ptr" gsl_matrix_float_const_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_float_const_ptr)

(cffi:defcstruct gsl_matrix_int
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix_int)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_int_view
	(matrix gsl_matrix_int))

(cl:export '_gsl_matrix_int_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_int_const_view
	(matrix gsl_matrix_int))

(cl:export '_gsl_matrix_int_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_int_alloc" gsl_matrix_int_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_int_alloc)

(cffi:defcfun ("gsl_matrix_int_calloc" gsl_matrix_int_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_int_calloc)

(cffi:defcfun ("gsl_matrix_int_alloc_from_block" gsl_matrix_int_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_int_alloc_from_block)

(cffi:defcfun ("gsl_matrix_int_alloc_from_matrix" gsl_matrix_int_alloc_from_matrix) :pointer
  (m :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_int_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_int_alloc_row_from_matrix" gsl_vector_int_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_int_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_int_alloc_col_from_matrix" gsl_vector_int_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_int_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_int_free" gsl_matrix_int_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_int_free)

(cffi:defcfun ("gsl_matrix_int_submatrix" gsl_matrix_int_submatrix) _gsl_matrix_int_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_int_submatrix)

(cffi:defcfun ("gsl_matrix_int_row" gsl_matrix_int_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_int_row)

(cffi:defcfun ("gsl_matrix_int_column" gsl_matrix_int_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_int_column)

(cffi:defcfun ("gsl_matrix_int_diagonal" gsl_matrix_int_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_int_diagonal)

(cffi:defcfun ("gsl_matrix_int_subdiagonal" gsl_matrix_int_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_int_subdiagonal)

(cffi:defcfun ("gsl_matrix_int_superdiagonal" gsl_matrix_int_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_int_superdiagonal)

(cffi:defcfun ("gsl_matrix_int_subrow" gsl_matrix_int_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_int_subrow)

(cffi:defcfun ("gsl_matrix_int_subcolumn" gsl_matrix_int_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_int_subcolumn)

(cffi:defcfun ("gsl_matrix_int_view_array" gsl_matrix_int_view_array) _gsl_matrix_int_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_int_view_array)

(cffi:defcfun ("gsl_matrix_int_view_array_with_tda" gsl_matrix_int_view_array_with_tda) _gsl_matrix_int_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_int_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_int_view_vector" gsl_matrix_int_view_vector) _gsl_matrix_int_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_int_view_vector)

(cffi:defcfun ("gsl_matrix_int_view_vector_with_tda" gsl_matrix_int_view_vector_with_tda) _gsl_matrix_int_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_int_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_int_const_submatrix" gsl_matrix_int_const_submatrix) _gsl_matrix_int_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_int_const_submatrix)

(cffi:defcfun ("gsl_matrix_int_const_row" gsl_matrix_int_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_int_const_row)

(cffi:defcfun ("gsl_matrix_int_const_column" gsl_matrix_int_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_int_const_column)

(cffi:defcfun ("gsl_matrix_int_const_diagonal" gsl_matrix_int_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_int_const_diagonal)

(cffi:defcfun ("gsl_matrix_int_const_subdiagonal" gsl_matrix_int_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_int_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_int_const_superdiagonal" gsl_matrix_int_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_int_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_int_const_subrow" gsl_matrix_int_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_int_const_subrow)

(cffi:defcfun ("gsl_matrix_int_const_subcolumn" gsl_matrix_int_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_int_const_subcolumn)

(cffi:defcfun ("gsl_matrix_int_const_view_array" gsl_matrix_int_const_view_array) _gsl_matrix_int_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_int_const_view_array)

(cffi:defcfun ("gsl_matrix_int_const_view_array_with_tda" gsl_matrix_int_const_view_array_with_tda) _gsl_matrix_int_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_int_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_int_const_view_vector" gsl_matrix_int_const_view_vector) _gsl_matrix_int_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_int_const_view_vector)

(cffi:defcfun ("gsl_matrix_int_const_view_vector_with_tda" gsl_matrix_int_const_view_vector_with_tda) _gsl_matrix_int_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_int_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_int_set_zero" gsl_matrix_int_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_int_set_zero)

(cffi:defcfun ("gsl_matrix_int_set_identity" gsl_matrix_int_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_int_set_identity)

(cffi:defcfun ("gsl_matrix_int_set_all" gsl_matrix_int_set_all) :void
  (m :pointer)
  (x :int))

(cl:export 'gsl_matrix_int_set_all)

(cffi:defcfun ("gsl_matrix_int_fread" gsl_matrix_int_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_int_fread)

(cffi:defcfun ("gsl_matrix_int_fwrite" gsl_matrix_int_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_int_fwrite)

(cffi:defcfun ("gsl_matrix_int_fscanf" gsl_matrix_int_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_int_fscanf)

(cffi:defcfun ("gsl_matrix_int_fprintf" gsl_matrix_int_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_int_fprintf)

(cffi:defcfun ("gsl_matrix_int_memcpy" gsl_matrix_int_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_int_memcpy)

(cffi:defcfun ("gsl_matrix_int_swap" gsl_matrix_int_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_int_swap)

(cffi:defcfun ("gsl_matrix_int_swap_rows" gsl_matrix_int_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_int_swap_rows)

(cffi:defcfun ("gsl_matrix_int_swap_columns" gsl_matrix_int_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_int_swap_columns)

(cffi:defcfun ("gsl_matrix_int_swap_rowcol" gsl_matrix_int_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_int_swap_rowcol)

(cffi:defcfun ("gsl_matrix_int_transpose" gsl_matrix_int_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_int_transpose)

(cffi:defcfun ("gsl_matrix_int_transpose_memcpy" gsl_matrix_int_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_int_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_int_max" gsl_matrix_int_max) :int
  (m :pointer))

(cl:export 'gsl_matrix_int_max)

(cffi:defcfun ("gsl_matrix_int_min" gsl_matrix_int_min) :int
  (m :pointer))

(cl:export 'gsl_matrix_int_min)

(cffi:defcfun ("gsl_matrix_int_minmax" gsl_matrix_int_minmax) :void
  (m :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_matrix_int_minmax)

(cffi:defcfun ("gsl_matrix_int_max_index" gsl_matrix_int_max_index) :void
  (m :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_int_max_index)

(cffi:defcfun ("gsl_matrix_int_min_index" gsl_matrix_int_min_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer))

(cl:export 'gsl_matrix_int_min_index)

(cffi:defcfun ("gsl_matrix_int_minmax_index" gsl_matrix_int_minmax_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_int_minmax_index)

(cffi:defcfun ("gsl_matrix_int_equal" gsl_matrix_int_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_int_equal)

(cffi:defcfun ("gsl_matrix_int_isnull" gsl_matrix_int_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_int_isnull)

(cffi:defcfun ("gsl_matrix_int_ispos" gsl_matrix_int_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_int_ispos)

(cffi:defcfun ("gsl_matrix_int_isneg" gsl_matrix_int_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_int_isneg)

(cffi:defcfun ("gsl_matrix_int_isnonneg" gsl_matrix_int_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_int_isnonneg)

(cffi:defcfun ("gsl_matrix_int_add" gsl_matrix_int_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_int_add)

(cffi:defcfun ("gsl_matrix_int_sub" gsl_matrix_int_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_int_sub)

(cffi:defcfun ("gsl_matrix_int_mul_elements" gsl_matrix_int_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_int_mul_elements)

(cffi:defcfun ("gsl_matrix_int_div_elements" gsl_matrix_int_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_int_div_elements)

(cffi:defcfun ("gsl_matrix_int_scale" gsl_matrix_int_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_int_scale)

(cffi:defcfun ("gsl_matrix_int_add_constant" gsl_matrix_int_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_int_add_constant)

(cffi:defcfun ("gsl_matrix_int_add_diagonal" gsl_matrix_int_add_diagonal) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_int_add_diagonal)

(cffi:defcfun ("gsl_matrix_int_get_row" gsl_matrix_int_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_int_get_row)

(cffi:defcfun ("gsl_matrix_int_get_col" gsl_matrix_int_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_int_get_col)

(cffi:defcfun ("gsl_matrix_int_set_row" gsl_matrix_int_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_int_set_row)

(cffi:defcfun ("gsl_matrix_int_set_col" gsl_matrix_int_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_int_set_col)

(cffi:defcfun ("gsl_matrix_int_get" gsl_matrix_int_get) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_int_get)

(cffi:defcfun ("gsl_matrix_int_set" gsl_matrix_int_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x :int))

(cl:export 'gsl_matrix_int_set)

(cffi:defcfun ("gsl_matrix_int_ptr" gsl_matrix_int_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_int_ptr)

(cffi:defcfun ("gsl_matrix_int_const_ptr" gsl_matrix_int_const_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_int_const_ptr)

(cffi:defcstruct gsl_matrix_long
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix_long)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_long_view
	(matrix gsl_matrix_long))

(cl:export '_gsl_matrix_long_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_long_const_view
	(matrix gsl_matrix_long))

(cl:export '_gsl_matrix_long_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_long_alloc" gsl_matrix_long_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_alloc)

(cffi:defcfun ("gsl_matrix_long_calloc" gsl_matrix_long_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_calloc)

(cffi:defcfun ("gsl_matrix_long_alloc_from_block" gsl_matrix_long_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_long_alloc_from_block)

(cffi:defcfun ("gsl_matrix_long_alloc_from_matrix" gsl_matrix_long_alloc_from_matrix) :pointer
  (m :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_long_alloc_row_from_matrix" gsl_vector_long_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_long_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_long_alloc_col_from_matrix" gsl_vector_long_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_long_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_long_free" gsl_matrix_long_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_long_free)

(cffi:defcfun ("gsl_matrix_long_submatrix" gsl_matrix_long_submatrix) _gsl_matrix_long_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_submatrix)

(cffi:defcfun ("gsl_matrix_long_row" gsl_matrix_long_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_long_row)

(cffi:defcfun ("gsl_matrix_long_column" gsl_matrix_long_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_column)

(cffi:defcfun ("gsl_matrix_long_diagonal" gsl_matrix_long_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_long_diagonal)

(cffi:defcfun ("gsl_matrix_long_subdiagonal" gsl_matrix_long_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_long_subdiagonal)

(cffi:defcfun ("gsl_matrix_long_superdiagonal" gsl_matrix_long_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_long_superdiagonal)

(cffi:defcfun ("gsl_matrix_long_subrow" gsl_matrix_long_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_long_subrow)

(cffi:defcfun ("gsl_matrix_long_subcolumn" gsl_matrix_long_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_long_subcolumn)

(cffi:defcfun ("gsl_matrix_long_view_array" gsl_matrix_long_view_array) _gsl_matrix_long_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_view_array)

(cffi:defcfun ("gsl_matrix_long_view_array_with_tda" gsl_matrix_long_view_array_with_tda) _gsl_matrix_long_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_long_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_long_view_vector" gsl_matrix_long_view_vector) _gsl_matrix_long_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_view_vector)

(cffi:defcfun ("gsl_matrix_long_view_vector_with_tda" gsl_matrix_long_view_vector_with_tda) _gsl_matrix_long_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_long_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_long_const_submatrix" gsl_matrix_long_const_submatrix) _gsl_matrix_long_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_const_submatrix)

(cffi:defcfun ("gsl_matrix_long_const_row" gsl_matrix_long_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_long_const_row)

(cffi:defcfun ("gsl_matrix_long_const_column" gsl_matrix_long_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_const_column)

(cffi:defcfun ("gsl_matrix_long_const_diagonal" gsl_matrix_long_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_long_const_diagonal)

(cffi:defcfun ("gsl_matrix_long_const_subdiagonal" gsl_matrix_long_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_long_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_long_const_superdiagonal" gsl_matrix_long_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_long_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_long_const_subrow" gsl_matrix_long_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_long_const_subrow)

(cffi:defcfun ("gsl_matrix_long_const_subcolumn" gsl_matrix_long_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_long_const_subcolumn)

(cffi:defcfun ("gsl_matrix_long_const_view_array" gsl_matrix_long_const_view_array) _gsl_matrix_long_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_const_view_array)

(cffi:defcfun ("gsl_matrix_long_const_view_array_with_tda" gsl_matrix_long_const_view_array_with_tda) _gsl_matrix_long_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_long_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_long_const_view_vector" gsl_matrix_long_const_view_vector) _gsl_matrix_long_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_const_view_vector)

(cffi:defcfun ("gsl_matrix_long_const_view_vector_with_tda" gsl_matrix_long_const_view_vector_with_tda) _gsl_matrix_long_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_long_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_long_set_zero" gsl_matrix_long_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_long_set_zero)

(cffi:defcfun ("gsl_matrix_long_set_identity" gsl_matrix_long_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_long_set_identity)

(cffi:defcfun ("gsl_matrix_long_set_all" gsl_matrix_long_set_all) :void
  (m :pointer)
  (x :long))

(cl:export 'gsl_matrix_long_set_all)

(cffi:defcfun ("gsl_matrix_long_fread" gsl_matrix_long_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_long_fread)

(cffi:defcfun ("gsl_matrix_long_fwrite" gsl_matrix_long_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_long_fwrite)

(cffi:defcfun ("gsl_matrix_long_fscanf" gsl_matrix_long_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_long_fscanf)

(cffi:defcfun ("gsl_matrix_long_fprintf" gsl_matrix_long_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_long_fprintf)

(cffi:defcfun ("gsl_matrix_long_memcpy" gsl_matrix_long_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_long_memcpy)

(cffi:defcfun ("gsl_matrix_long_swap" gsl_matrix_long_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_long_swap)

(cffi:defcfun ("gsl_matrix_long_swap_rows" gsl_matrix_long_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_swap_rows)

(cffi:defcfun ("gsl_matrix_long_swap_columns" gsl_matrix_long_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_swap_columns)

(cffi:defcfun ("gsl_matrix_long_swap_rowcol" gsl_matrix_long_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_swap_rowcol)

(cffi:defcfun ("gsl_matrix_long_transpose" gsl_matrix_long_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_long_transpose)

(cffi:defcfun ("gsl_matrix_long_transpose_memcpy" gsl_matrix_long_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_long_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_long_max" gsl_matrix_long_max) :long
  (m :pointer))

(cl:export 'gsl_matrix_long_max)

(cffi:defcfun ("gsl_matrix_long_min" gsl_matrix_long_min) :long
  (m :pointer))

(cl:export 'gsl_matrix_long_min)

(cffi:defcfun ("gsl_matrix_long_minmax" gsl_matrix_long_minmax) :void
  (m :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_matrix_long_minmax)

(cffi:defcfun ("gsl_matrix_long_max_index" gsl_matrix_long_max_index) :void
  (m :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_long_max_index)

(cffi:defcfun ("gsl_matrix_long_min_index" gsl_matrix_long_min_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer))

(cl:export 'gsl_matrix_long_min_index)

(cffi:defcfun ("gsl_matrix_long_minmax_index" gsl_matrix_long_minmax_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_long_minmax_index)

(cffi:defcfun ("gsl_matrix_long_equal" gsl_matrix_long_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_long_equal)

(cffi:defcfun ("gsl_matrix_long_isnull" gsl_matrix_long_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_long_isnull)

(cffi:defcfun ("gsl_matrix_long_ispos" gsl_matrix_long_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_long_ispos)

(cffi:defcfun ("gsl_matrix_long_isneg" gsl_matrix_long_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_long_isneg)

(cffi:defcfun ("gsl_matrix_long_isnonneg" gsl_matrix_long_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_long_isnonneg)

(cffi:defcfun ("gsl_matrix_long_add" gsl_matrix_long_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_long_add)

(cffi:defcfun ("gsl_matrix_long_sub" gsl_matrix_long_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_long_sub)

(cffi:defcfun ("gsl_matrix_long_mul_elements" gsl_matrix_long_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_long_mul_elements)

(cffi:defcfun ("gsl_matrix_long_div_elements" gsl_matrix_long_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_long_div_elements)

(cffi:defcfun ("gsl_matrix_long_scale" gsl_matrix_long_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_long_scale)

(cffi:defcfun ("gsl_matrix_long_add_constant" gsl_matrix_long_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_long_add_constant)

(cffi:defcfun ("gsl_matrix_long_add_diagonal" gsl_matrix_long_add_diagonal) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_long_add_diagonal)

(cffi:defcfun ("gsl_matrix_long_get_row" gsl_matrix_long_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_long_get_row)

(cffi:defcfun ("gsl_matrix_long_get_col" gsl_matrix_long_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_get_col)

(cffi:defcfun ("gsl_matrix_long_set_row" gsl_matrix_long_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_long_set_row)

(cffi:defcfun ("gsl_matrix_long_set_col" gsl_matrix_long_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_long_set_col)

(cffi:defcfun ("gsl_matrix_long_get" gsl_matrix_long_get) :long
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_get)

(cffi:defcfun ("gsl_matrix_long_set" gsl_matrix_long_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x :long))

(cl:export 'gsl_matrix_long_set)

(cffi:defcfun ("gsl_matrix_long_ptr" gsl_matrix_long_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_ptr)

(cffi:defcfun ("gsl_matrix_long_const_ptr" gsl_matrix_long_const_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_const_ptr)

(cffi:defcstruct gsl_matrix_long_double
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix_long_double)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_long_double_view
	(matrix gsl_matrix_long_double))

(cl:export '_gsl_matrix_long_double_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_long_double_const_view
	(matrix gsl_matrix_long_double))

(cl:export '_gsl_matrix_long_double_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_long_double_alloc" gsl_matrix_long_double_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_double_alloc)

(cffi:defcfun ("gsl_matrix_long_double_calloc" gsl_matrix_long_double_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_double_calloc)

(cffi:defcfun ("gsl_matrix_long_double_alloc_from_block" gsl_matrix_long_double_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_long_double_alloc_from_block)

(cffi:defcfun ("gsl_matrix_long_double_alloc_from_matrix" gsl_matrix_long_double_alloc_from_matrix) :pointer
  (m :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_double_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_long_double_alloc_row_from_matrix" gsl_vector_long_double_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_long_double_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_long_double_alloc_col_from_matrix" gsl_vector_long_double_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_long_double_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_long_double_free" gsl_matrix_long_double_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_long_double_free)

(cffi:defcfun ("gsl_matrix_long_double_submatrix" gsl_matrix_long_double_submatrix) _gsl_matrix_long_double_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_double_submatrix)

(cffi:defcfun ("gsl_matrix_long_double_row" gsl_matrix_long_double_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_long_double_row)

(cffi:defcfun ("gsl_matrix_long_double_column" gsl_matrix_long_double_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_double_column)

(cffi:defcfun ("gsl_matrix_long_double_diagonal" gsl_matrix_long_double_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_long_double_diagonal)

(cffi:defcfun ("gsl_matrix_long_double_subdiagonal" gsl_matrix_long_double_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_long_double_subdiagonal)

(cffi:defcfun ("gsl_matrix_long_double_superdiagonal" gsl_matrix_long_double_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_long_double_superdiagonal)

(cffi:defcfun ("gsl_matrix_long_double_subrow" gsl_matrix_long_double_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_long_double_subrow)

(cffi:defcfun ("gsl_matrix_long_double_subcolumn" gsl_matrix_long_double_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_long_double_subcolumn)

(cffi:defcfun ("gsl_matrix_long_double_view_array" gsl_matrix_long_double_view_array) _gsl_matrix_long_double_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_double_view_array)

(cffi:defcfun ("gsl_matrix_long_double_view_array_with_tda" gsl_matrix_long_double_view_array_with_tda) _gsl_matrix_long_double_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_long_double_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_long_double_view_vector" gsl_matrix_long_double_view_vector) _gsl_matrix_long_double_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_double_view_vector)

(cffi:defcfun ("gsl_matrix_long_double_view_vector_with_tda" gsl_matrix_long_double_view_vector_with_tda) _gsl_matrix_long_double_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_long_double_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_long_double_const_submatrix" gsl_matrix_long_double_const_submatrix) _gsl_matrix_long_double_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_double_const_submatrix)

(cffi:defcfun ("gsl_matrix_long_double_const_row" gsl_matrix_long_double_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_long_double_const_row)

(cffi:defcfun ("gsl_matrix_long_double_const_column" gsl_matrix_long_double_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_double_const_column)

(cffi:defcfun ("gsl_matrix_long_double_const_diagonal" gsl_matrix_long_double_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_long_double_const_diagonal)

(cffi:defcfun ("gsl_matrix_long_double_const_subdiagonal" gsl_matrix_long_double_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_long_double_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_long_double_const_superdiagonal" gsl_matrix_long_double_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_long_double_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_long_double_const_subrow" gsl_matrix_long_double_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_long_double_const_subrow)

(cffi:defcfun ("gsl_matrix_long_double_const_subcolumn" gsl_matrix_long_double_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_long_double_const_subcolumn)

(cffi:defcfun ("gsl_matrix_long_double_const_view_array" gsl_matrix_long_double_const_view_array) _gsl_matrix_long_double_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_double_const_view_array)

(cffi:defcfun ("gsl_matrix_long_double_const_view_array_with_tda" gsl_matrix_long_double_const_view_array_with_tda) _gsl_matrix_long_double_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_long_double_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_long_double_const_view_vector" gsl_matrix_long_double_const_view_vector) _gsl_matrix_long_double_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_long_double_const_view_vector)

(cffi:defcfun ("gsl_matrix_long_double_const_view_vector_with_tda" gsl_matrix_long_double_const_view_vector_with_tda) _gsl_matrix_long_double_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_long_double_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_long_double_set_zero" gsl_matrix_long_double_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_long_double_set_zero)

(cffi:defcfun ("gsl_matrix_long_double_set_identity" gsl_matrix_long_double_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_long_double_set_identity)

(cffi:defcfun ("gsl_matrix_long_double_set_all" gsl_matrix_long_double_set_all) :void
  (m :pointer)
  (x :pointer))

(cl:export 'gsl_matrix_long_double_set_all)

(cffi:defcfun ("gsl_matrix_long_double_fread" gsl_matrix_long_double_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_long_double_fread)

(cffi:defcfun ("gsl_matrix_long_double_fwrite" gsl_matrix_long_double_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_long_double_fwrite)

(cffi:defcfun ("gsl_matrix_long_double_fscanf" gsl_matrix_long_double_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_long_double_fscanf)

(cffi:defcfun ("gsl_matrix_long_double_fprintf" gsl_matrix_long_double_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_long_double_fprintf)

(cffi:defcfun ("gsl_matrix_long_double_memcpy" gsl_matrix_long_double_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_long_double_memcpy)

(cffi:defcfun ("gsl_matrix_long_double_swap" gsl_matrix_long_double_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_long_double_swap)

(cffi:defcfun ("gsl_matrix_long_double_swap_rows" gsl_matrix_long_double_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_double_swap_rows)

(cffi:defcfun ("gsl_matrix_long_double_swap_columns" gsl_matrix_long_double_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_double_swap_columns)

(cffi:defcfun ("gsl_matrix_long_double_swap_rowcol" gsl_matrix_long_double_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_double_swap_rowcol)

(cffi:defcfun ("gsl_matrix_long_double_transpose" gsl_matrix_long_double_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_long_double_transpose)

(cffi:defcfun ("gsl_matrix_long_double_transpose_memcpy" gsl_matrix_long_double_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_long_double_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_long_double_max" gsl_matrix_long_double_max) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_long_double_max)

(cffi:defcfun ("gsl_matrix_long_double_min" gsl_matrix_long_double_min) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_long_double_min)

(cffi:defcfun ("gsl_matrix_long_double_minmax" gsl_matrix_long_double_minmax) :void
  (m :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_matrix_long_double_minmax)

(cffi:defcfun ("gsl_matrix_long_double_max_index" gsl_matrix_long_double_max_index) :void
  (m :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_long_double_max_index)

(cffi:defcfun ("gsl_matrix_long_double_min_index" gsl_matrix_long_double_min_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer))

(cl:export 'gsl_matrix_long_double_min_index)

(cffi:defcfun ("gsl_matrix_long_double_minmax_index" gsl_matrix_long_double_minmax_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_long_double_minmax_index)

(cffi:defcfun ("gsl_matrix_long_double_equal" gsl_matrix_long_double_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_long_double_equal)

(cffi:defcfun ("gsl_matrix_long_double_isnull" gsl_matrix_long_double_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_long_double_isnull)

(cffi:defcfun ("gsl_matrix_long_double_ispos" gsl_matrix_long_double_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_long_double_ispos)

(cffi:defcfun ("gsl_matrix_long_double_isneg" gsl_matrix_long_double_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_long_double_isneg)

(cffi:defcfun ("gsl_matrix_long_double_isnonneg" gsl_matrix_long_double_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_long_double_isnonneg)

(cffi:defcfun ("gsl_matrix_long_double_add" gsl_matrix_long_double_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_long_double_add)

(cffi:defcfun ("gsl_matrix_long_double_sub" gsl_matrix_long_double_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_long_double_sub)

(cffi:defcfun ("gsl_matrix_long_double_mul_elements" gsl_matrix_long_double_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_long_double_mul_elements)

(cffi:defcfun ("gsl_matrix_long_double_div_elements" gsl_matrix_long_double_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_long_double_div_elements)

(cffi:defcfun ("gsl_matrix_long_double_scale" gsl_matrix_long_double_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_long_double_scale)

(cffi:defcfun ("gsl_matrix_long_double_add_constant" gsl_matrix_long_double_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_long_double_add_constant)

(cffi:defcfun ("gsl_matrix_long_double_add_diagonal" gsl_matrix_long_double_add_diagonal) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_long_double_add_diagonal)

(cffi:defcfun ("gsl_matrix_long_double_get_row" gsl_matrix_long_double_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_long_double_get_row)

(cffi:defcfun ("gsl_matrix_long_double_get_col" gsl_matrix_long_double_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_double_get_col)

(cffi:defcfun ("gsl_matrix_long_double_set_row" gsl_matrix_long_double_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_long_double_set_row)

(cffi:defcfun ("gsl_matrix_long_double_set_col" gsl_matrix_long_double_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_long_double_set_col)

(cffi:defcfun ("gsl_matrix_long_double_get" gsl_matrix_long_double_get) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_double_get)

(cffi:defcfun ("gsl_matrix_long_double_set" gsl_matrix_long_double_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x :pointer))

(cl:export 'gsl_matrix_long_double_set)

(cffi:defcfun ("gsl_matrix_long_double_ptr" gsl_matrix_long_double_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_double_ptr)

(cffi:defcfun ("gsl_matrix_long_double_const_ptr" gsl_matrix_long_double_const_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_long_double_const_ptr)

(cffi:defcstruct gsl_matrix_short
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix_short)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_short_view
	(matrix gsl_matrix_short))

(cl:export '_gsl_matrix_short_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_short_const_view
	(matrix gsl_matrix_short))

(cl:export '_gsl_matrix_short_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_short_alloc" gsl_matrix_short_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_short_alloc)

(cffi:defcfun ("gsl_matrix_short_calloc" gsl_matrix_short_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_short_calloc)

(cffi:defcfun ("gsl_matrix_short_alloc_from_block" gsl_matrix_short_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_short_alloc_from_block)

(cffi:defcfun ("gsl_matrix_short_alloc_from_matrix" gsl_matrix_short_alloc_from_matrix) :pointer
  (m :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_short_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_short_alloc_row_from_matrix" gsl_vector_short_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_short_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_short_alloc_col_from_matrix" gsl_vector_short_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_short_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_short_free" gsl_matrix_short_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_short_free)

(cffi:defcfun ("gsl_matrix_short_submatrix" gsl_matrix_short_submatrix) _gsl_matrix_short_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_short_submatrix)

(cffi:defcfun ("gsl_matrix_short_row" gsl_matrix_short_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_short_row)

(cffi:defcfun ("gsl_matrix_short_column" gsl_matrix_short_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_short_column)

(cffi:defcfun ("gsl_matrix_short_diagonal" gsl_matrix_short_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_short_diagonal)

(cffi:defcfun ("gsl_matrix_short_subdiagonal" gsl_matrix_short_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_short_subdiagonal)

(cffi:defcfun ("gsl_matrix_short_superdiagonal" gsl_matrix_short_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_short_superdiagonal)

(cffi:defcfun ("gsl_matrix_short_subrow" gsl_matrix_short_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_short_subrow)

(cffi:defcfun ("gsl_matrix_short_subcolumn" gsl_matrix_short_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_short_subcolumn)

(cffi:defcfun ("gsl_matrix_short_view_array" gsl_matrix_short_view_array) _gsl_matrix_short_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_short_view_array)

(cffi:defcfun ("gsl_matrix_short_view_array_with_tda" gsl_matrix_short_view_array_with_tda) _gsl_matrix_short_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_short_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_short_view_vector" gsl_matrix_short_view_vector) _gsl_matrix_short_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_short_view_vector)

(cffi:defcfun ("gsl_matrix_short_view_vector_with_tda" gsl_matrix_short_view_vector_with_tda) _gsl_matrix_short_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_short_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_short_const_submatrix" gsl_matrix_short_const_submatrix) _gsl_matrix_short_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_short_const_submatrix)

(cffi:defcfun ("gsl_matrix_short_const_row" gsl_matrix_short_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_short_const_row)

(cffi:defcfun ("gsl_matrix_short_const_column" gsl_matrix_short_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_short_const_column)

(cffi:defcfun ("gsl_matrix_short_const_diagonal" gsl_matrix_short_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_short_const_diagonal)

(cffi:defcfun ("gsl_matrix_short_const_subdiagonal" gsl_matrix_short_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_short_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_short_const_superdiagonal" gsl_matrix_short_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_short_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_short_const_subrow" gsl_matrix_short_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_short_const_subrow)

(cffi:defcfun ("gsl_matrix_short_const_subcolumn" gsl_matrix_short_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_short_const_subcolumn)

(cffi:defcfun ("gsl_matrix_short_const_view_array" gsl_matrix_short_const_view_array) _gsl_matrix_short_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_short_const_view_array)

(cffi:defcfun ("gsl_matrix_short_const_view_array_with_tda" gsl_matrix_short_const_view_array_with_tda) _gsl_matrix_short_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_short_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_short_const_view_vector" gsl_matrix_short_const_view_vector) _gsl_matrix_short_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_short_const_view_vector)

(cffi:defcfun ("gsl_matrix_short_const_view_vector_with_tda" gsl_matrix_short_const_view_vector_with_tda) _gsl_matrix_short_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_short_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_short_set_zero" gsl_matrix_short_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_short_set_zero)

(cffi:defcfun ("gsl_matrix_short_set_identity" gsl_matrix_short_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_short_set_identity)

(cffi:defcfun ("gsl_matrix_short_set_all" gsl_matrix_short_set_all) :void
  (m :pointer)
  (x :short))

(cl:export 'gsl_matrix_short_set_all)

(cffi:defcfun ("gsl_matrix_short_fread" gsl_matrix_short_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_short_fread)

(cffi:defcfun ("gsl_matrix_short_fwrite" gsl_matrix_short_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_short_fwrite)

(cffi:defcfun ("gsl_matrix_short_fscanf" gsl_matrix_short_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_short_fscanf)

(cffi:defcfun ("gsl_matrix_short_fprintf" gsl_matrix_short_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_short_fprintf)

(cffi:defcfun ("gsl_matrix_short_memcpy" gsl_matrix_short_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_short_memcpy)

(cffi:defcfun ("gsl_matrix_short_swap" gsl_matrix_short_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_short_swap)

(cffi:defcfun ("gsl_matrix_short_swap_rows" gsl_matrix_short_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_short_swap_rows)

(cffi:defcfun ("gsl_matrix_short_swap_columns" gsl_matrix_short_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_short_swap_columns)

(cffi:defcfun ("gsl_matrix_short_swap_rowcol" gsl_matrix_short_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_short_swap_rowcol)

(cffi:defcfun ("gsl_matrix_short_transpose" gsl_matrix_short_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_short_transpose)

(cffi:defcfun ("gsl_matrix_short_transpose_memcpy" gsl_matrix_short_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_short_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_short_max" gsl_matrix_short_max) :short
  (m :pointer))

(cl:export 'gsl_matrix_short_max)

(cffi:defcfun ("gsl_matrix_short_min" gsl_matrix_short_min) :short
  (m :pointer))

(cl:export 'gsl_matrix_short_min)

(cffi:defcfun ("gsl_matrix_short_minmax" gsl_matrix_short_minmax) :void
  (m :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_matrix_short_minmax)

(cffi:defcfun ("gsl_matrix_short_max_index" gsl_matrix_short_max_index) :void
  (m :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_short_max_index)

(cffi:defcfun ("gsl_matrix_short_min_index" gsl_matrix_short_min_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer))

(cl:export 'gsl_matrix_short_min_index)

(cffi:defcfun ("gsl_matrix_short_minmax_index" gsl_matrix_short_minmax_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_short_minmax_index)

(cffi:defcfun ("gsl_matrix_short_equal" gsl_matrix_short_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_short_equal)

(cffi:defcfun ("gsl_matrix_short_isnull" gsl_matrix_short_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_short_isnull)

(cffi:defcfun ("gsl_matrix_short_ispos" gsl_matrix_short_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_short_ispos)

(cffi:defcfun ("gsl_matrix_short_isneg" gsl_matrix_short_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_short_isneg)

(cffi:defcfun ("gsl_matrix_short_isnonneg" gsl_matrix_short_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_short_isnonneg)

(cffi:defcfun ("gsl_matrix_short_add" gsl_matrix_short_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_short_add)

(cffi:defcfun ("gsl_matrix_short_sub" gsl_matrix_short_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_short_sub)

(cffi:defcfun ("gsl_matrix_short_mul_elements" gsl_matrix_short_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_short_mul_elements)

(cffi:defcfun ("gsl_matrix_short_div_elements" gsl_matrix_short_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_short_div_elements)

(cffi:defcfun ("gsl_matrix_short_scale" gsl_matrix_short_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_short_scale)

(cffi:defcfun ("gsl_matrix_short_add_constant" gsl_matrix_short_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_short_add_constant)

(cffi:defcfun ("gsl_matrix_short_add_diagonal" gsl_matrix_short_add_diagonal) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_short_add_diagonal)

(cffi:defcfun ("gsl_matrix_short_get_row" gsl_matrix_short_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_short_get_row)

(cffi:defcfun ("gsl_matrix_short_get_col" gsl_matrix_short_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_short_get_col)

(cffi:defcfun ("gsl_matrix_short_set_row" gsl_matrix_short_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_short_set_row)

(cffi:defcfun ("gsl_matrix_short_set_col" gsl_matrix_short_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_short_set_col)

(cffi:defcfun ("gsl_matrix_short_get" gsl_matrix_short_get) :short
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_short_get)

(cffi:defcfun ("gsl_matrix_short_set" gsl_matrix_short_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x :short))

(cl:export 'gsl_matrix_short_set)

(cffi:defcfun ("gsl_matrix_short_ptr" gsl_matrix_short_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_short_ptr)

(cffi:defcfun ("gsl_matrix_short_const_ptr" gsl_matrix_short_const_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_short_const_ptr)

(cffi:defcstruct gsl_matrix_uchar
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix_uchar)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_uchar_view
	(matrix gsl_matrix_uchar))

(cl:export '_gsl_matrix_uchar_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_uchar_const_view
	(matrix gsl_matrix_uchar))

(cl:export '_gsl_matrix_uchar_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_uchar_alloc" gsl_matrix_uchar_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uchar_alloc)

(cffi:defcfun ("gsl_matrix_uchar_calloc" gsl_matrix_uchar_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uchar_calloc)

(cffi:defcfun ("gsl_matrix_uchar_alloc_from_block" gsl_matrix_uchar_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_uchar_alloc_from_block)

(cffi:defcfun ("gsl_matrix_uchar_alloc_from_matrix" gsl_matrix_uchar_alloc_from_matrix) :pointer
  (m :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uchar_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_uchar_alloc_row_from_matrix" gsl_vector_uchar_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_uchar_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_uchar_alloc_col_from_matrix" gsl_vector_uchar_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_uchar_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_uchar_free" gsl_matrix_uchar_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_uchar_free)

(cffi:defcfun ("gsl_matrix_uchar_submatrix" gsl_matrix_uchar_submatrix) _gsl_matrix_uchar_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uchar_submatrix)

(cffi:defcfun ("gsl_matrix_uchar_row" gsl_matrix_uchar_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_uchar_row)

(cffi:defcfun ("gsl_matrix_uchar_column" gsl_matrix_uchar_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uchar_column)

(cffi:defcfun ("gsl_matrix_uchar_diagonal" gsl_matrix_uchar_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_uchar_diagonal)

(cffi:defcfun ("gsl_matrix_uchar_subdiagonal" gsl_matrix_uchar_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_uchar_subdiagonal)

(cffi:defcfun ("gsl_matrix_uchar_superdiagonal" gsl_matrix_uchar_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_uchar_superdiagonal)

(cffi:defcfun ("gsl_matrix_uchar_subrow" gsl_matrix_uchar_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_uchar_subrow)

(cffi:defcfun ("gsl_matrix_uchar_subcolumn" gsl_matrix_uchar_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_uchar_subcolumn)

(cffi:defcfun ("gsl_matrix_uchar_view_array" gsl_matrix_uchar_view_array) _gsl_matrix_uchar_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uchar_view_array)

(cffi:defcfun ("gsl_matrix_uchar_view_array_with_tda" gsl_matrix_uchar_view_array_with_tda) _gsl_matrix_uchar_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_uchar_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_uchar_view_vector" gsl_matrix_uchar_view_vector) _gsl_matrix_uchar_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uchar_view_vector)

(cffi:defcfun ("gsl_matrix_uchar_view_vector_with_tda" gsl_matrix_uchar_view_vector_with_tda) _gsl_matrix_uchar_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_uchar_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_uchar_const_submatrix" gsl_matrix_uchar_const_submatrix) _gsl_matrix_uchar_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uchar_const_submatrix)

(cffi:defcfun ("gsl_matrix_uchar_const_row" gsl_matrix_uchar_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_uchar_const_row)

(cffi:defcfun ("gsl_matrix_uchar_const_column" gsl_matrix_uchar_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uchar_const_column)

(cffi:defcfun ("gsl_matrix_uchar_const_diagonal" gsl_matrix_uchar_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_uchar_const_diagonal)

(cffi:defcfun ("gsl_matrix_uchar_const_subdiagonal" gsl_matrix_uchar_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_uchar_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_uchar_const_superdiagonal" gsl_matrix_uchar_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_uchar_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_uchar_const_subrow" gsl_matrix_uchar_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_uchar_const_subrow)

(cffi:defcfun ("gsl_matrix_uchar_const_subcolumn" gsl_matrix_uchar_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_uchar_const_subcolumn)

(cffi:defcfun ("gsl_matrix_uchar_const_view_array" gsl_matrix_uchar_const_view_array) _gsl_matrix_uchar_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uchar_const_view_array)

(cffi:defcfun ("gsl_matrix_uchar_const_view_array_with_tda" gsl_matrix_uchar_const_view_array_with_tda) _gsl_matrix_uchar_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_uchar_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_uchar_const_view_vector" gsl_matrix_uchar_const_view_vector) _gsl_matrix_uchar_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uchar_const_view_vector)

(cffi:defcfun ("gsl_matrix_uchar_const_view_vector_with_tda" gsl_matrix_uchar_const_view_vector_with_tda) _gsl_matrix_uchar_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_uchar_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_uchar_set_zero" gsl_matrix_uchar_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_uchar_set_zero)

(cffi:defcfun ("gsl_matrix_uchar_set_identity" gsl_matrix_uchar_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_uchar_set_identity)

(cffi:defcfun ("gsl_matrix_uchar_set_all" gsl_matrix_uchar_set_all) :void
  (m :pointer)
  (x :unsigned-char))

(cl:export 'gsl_matrix_uchar_set_all)

(cffi:defcfun ("gsl_matrix_uchar_fread" gsl_matrix_uchar_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_uchar_fread)

(cffi:defcfun ("gsl_matrix_uchar_fwrite" gsl_matrix_uchar_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_uchar_fwrite)

(cffi:defcfun ("gsl_matrix_uchar_fscanf" gsl_matrix_uchar_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_uchar_fscanf)

(cffi:defcfun ("gsl_matrix_uchar_fprintf" gsl_matrix_uchar_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_uchar_fprintf)

(cffi:defcfun ("gsl_matrix_uchar_memcpy" gsl_matrix_uchar_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_uchar_memcpy)

(cffi:defcfun ("gsl_matrix_uchar_swap" gsl_matrix_uchar_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_uchar_swap)

(cffi:defcfun ("gsl_matrix_uchar_swap_rows" gsl_matrix_uchar_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uchar_swap_rows)

(cffi:defcfun ("gsl_matrix_uchar_swap_columns" gsl_matrix_uchar_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uchar_swap_columns)

(cffi:defcfun ("gsl_matrix_uchar_swap_rowcol" gsl_matrix_uchar_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uchar_swap_rowcol)

(cffi:defcfun ("gsl_matrix_uchar_transpose" gsl_matrix_uchar_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_uchar_transpose)

(cffi:defcfun ("gsl_matrix_uchar_transpose_memcpy" gsl_matrix_uchar_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_uchar_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_uchar_max" gsl_matrix_uchar_max) :unsigned-char
  (m :pointer))

(cl:export 'gsl_matrix_uchar_max)

(cffi:defcfun ("gsl_matrix_uchar_min" gsl_matrix_uchar_min) :unsigned-char
  (m :pointer))

(cl:export 'gsl_matrix_uchar_min)

(cffi:defcfun ("gsl_matrix_uchar_minmax" gsl_matrix_uchar_minmax) :void
  (m :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_matrix_uchar_minmax)

(cffi:defcfun ("gsl_matrix_uchar_max_index" gsl_matrix_uchar_max_index) :void
  (m :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_uchar_max_index)

(cffi:defcfun ("gsl_matrix_uchar_min_index" gsl_matrix_uchar_min_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer))

(cl:export 'gsl_matrix_uchar_min_index)

(cffi:defcfun ("gsl_matrix_uchar_minmax_index" gsl_matrix_uchar_minmax_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_uchar_minmax_index)

(cffi:defcfun ("gsl_matrix_uchar_equal" gsl_matrix_uchar_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_uchar_equal)

(cffi:defcfun ("gsl_matrix_uchar_isnull" gsl_matrix_uchar_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_uchar_isnull)

(cffi:defcfun ("gsl_matrix_uchar_ispos" gsl_matrix_uchar_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_uchar_ispos)

(cffi:defcfun ("gsl_matrix_uchar_isneg" gsl_matrix_uchar_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_uchar_isneg)

(cffi:defcfun ("gsl_matrix_uchar_isnonneg" gsl_matrix_uchar_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_uchar_isnonneg)

(cffi:defcfun ("gsl_matrix_uchar_add" gsl_matrix_uchar_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_uchar_add)

(cffi:defcfun ("gsl_matrix_uchar_sub" gsl_matrix_uchar_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_uchar_sub)

(cffi:defcfun ("gsl_matrix_uchar_mul_elements" gsl_matrix_uchar_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_uchar_mul_elements)

(cffi:defcfun ("gsl_matrix_uchar_div_elements" gsl_matrix_uchar_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_uchar_div_elements)

(cffi:defcfun ("gsl_matrix_uchar_scale" gsl_matrix_uchar_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_uchar_scale)

(cffi:defcfun ("gsl_matrix_uchar_add_constant" gsl_matrix_uchar_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_uchar_add_constant)

(cffi:defcfun ("gsl_matrix_uchar_add_diagonal" gsl_matrix_uchar_add_diagonal) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_uchar_add_diagonal)

(cffi:defcfun ("gsl_matrix_uchar_get_row" gsl_matrix_uchar_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_uchar_get_row)

(cffi:defcfun ("gsl_matrix_uchar_get_col" gsl_matrix_uchar_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uchar_get_col)

(cffi:defcfun ("gsl_matrix_uchar_set_row" gsl_matrix_uchar_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_uchar_set_row)

(cffi:defcfun ("gsl_matrix_uchar_set_col" gsl_matrix_uchar_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_uchar_set_col)

(cffi:defcfun ("gsl_matrix_uchar_get" gsl_matrix_uchar_get) :unsigned-char
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uchar_get)

(cffi:defcfun ("gsl_matrix_uchar_set" gsl_matrix_uchar_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x :unsigned-char))

(cl:export 'gsl_matrix_uchar_set)

(cffi:defcfun ("gsl_matrix_uchar_ptr" gsl_matrix_uchar_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uchar_ptr)

(cffi:defcfun ("gsl_matrix_uchar_const_ptr" gsl_matrix_uchar_const_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uchar_const_ptr)

(cffi:defcstruct gsl_matrix_uint
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix_uint)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_uint_view
	(matrix gsl_matrix_uint))

(cl:export '_gsl_matrix_uint_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_uint_const_view
	(matrix gsl_matrix_uint))

(cl:export '_gsl_matrix_uint_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_uint_alloc" gsl_matrix_uint_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uint_alloc)

(cffi:defcfun ("gsl_matrix_uint_calloc" gsl_matrix_uint_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uint_calloc)

(cffi:defcfun ("gsl_matrix_uint_alloc_from_block" gsl_matrix_uint_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_uint_alloc_from_block)

(cffi:defcfun ("gsl_matrix_uint_alloc_from_matrix" gsl_matrix_uint_alloc_from_matrix) :pointer
  (m :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uint_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_uint_alloc_row_from_matrix" gsl_vector_uint_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_uint_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_uint_alloc_col_from_matrix" gsl_vector_uint_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_uint_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_uint_free" gsl_matrix_uint_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_uint_free)

(cffi:defcfun ("gsl_matrix_uint_submatrix" gsl_matrix_uint_submatrix) _gsl_matrix_uint_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uint_submatrix)

(cffi:defcfun ("gsl_matrix_uint_row" gsl_matrix_uint_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_uint_row)

(cffi:defcfun ("gsl_matrix_uint_column" gsl_matrix_uint_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uint_column)

(cffi:defcfun ("gsl_matrix_uint_diagonal" gsl_matrix_uint_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_uint_diagonal)

(cffi:defcfun ("gsl_matrix_uint_subdiagonal" gsl_matrix_uint_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_uint_subdiagonal)

(cffi:defcfun ("gsl_matrix_uint_superdiagonal" gsl_matrix_uint_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_uint_superdiagonal)

(cffi:defcfun ("gsl_matrix_uint_subrow" gsl_matrix_uint_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_uint_subrow)

(cffi:defcfun ("gsl_matrix_uint_subcolumn" gsl_matrix_uint_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_uint_subcolumn)

(cffi:defcfun ("gsl_matrix_uint_view_array" gsl_matrix_uint_view_array) _gsl_matrix_uint_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uint_view_array)

(cffi:defcfun ("gsl_matrix_uint_view_array_with_tda" gsl_matrix_uint_view_array_with_tda) _gsl_matrix_uint_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_uint_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_uint_view_vector" gsl_matrix_uint_view_vector) _gsl_matrix_uint_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uint_view_vector)

(cffi:defcfun ("gsl_matrix_uint_view_vector_with_tda" gsl_matrix_uint_view_vector_with_tda) _gsl_matrix_uint_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_uint_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_uint_const_submatrix" gsl_matrix_uint_const_submatrix) _gsl_matrix_uint_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uint_const_submatrix)

(cffi:defcfun ("gsl_matrix_uint_const_row" gsl_matrix_uint_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_uint_const_row)

(cffi:defcfun ("gsl_matrix_uint_const_column" gsl_matrix_uint_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uint_const_column)

(cffi:defcfun ("gsl_matrix_uint_const_diagonal" gsl_matrix_uint_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_uint_const_diagonal)

(cffi:defcfun ("gsl_matrix_uint_const_subdiagonal" gsl_matrix_uint_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_uint_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_uint_const_superdiagonal" gsl_matrix_uint_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_uint_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_uint_const_subrow" gsl_matrix_uint_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_uint_const_subrow)

(cffi:defcfun ("gsl_matrix_uint_const_subcolumn" gsl_matrix_uint_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_uint_const_subcolumn)

(cffi:defcfun ("gsl_matrix_uint_const_view_array" gsl_matrix_uint_const_view_array) _gsl_matrix_uint_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uint_const_view_array)

(cffi:defcfun ("gsl_matrix_uint_const_view_array_with_tda" gsl_matrix_uint_const_view_array_with_tda) _gsl_matrix_uint_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_uint_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_uint_const_view_vector" gsl_matrix_uint_const_view_vector) _gsl_matrix_uint_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_uint_const_view_vector)

(cffi:defcfun ("gsl_matrix_uint_const_view_vector_with_tda" gsl_matrix_uint_const_view_vector_with_tda) _gsl_matrix_uint_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_uint_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_uint_set_zero" gsl_matrix_uint_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_uint_set_zero)

(cffi:defcfun ("gsl_matrix_uint_set_identity" gsl_matrix_uint_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_uint_set_identity)

(cffi:defcfun ("gsl_matrix_uint_set_all" gsl_matrix_uint_set_all) :void
  (m :pointer)
  (x :unsigned-int))

(cl:export 'gsl_matrix_uint_set_all)

(cffi:defcfun ("gsl_matrix_uint_fread" gsl_matrix_uint_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_uint_fread)

(cffi:defcfun ("gsl_matrix_uint_fwrite" gsl_matrix_uint_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_uint_fwrite)

(cffi:defcfun ("gsl_matrix_uint_fscanf" gsl_matrix_uint_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_uint_fscanf)

(cffi:defcfun ("gsl_matrix_uint_fprintf" gsl_matrix_uint_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_uint_fprintf)

(cffi:defcfun ("gsl_matrix_uint_memcpy" gsl_matrix_uint_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_uint_memcpy)

(cffi:defcfun ("gsl_matrix_uint_swap" gsl_matrix_uint_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_uint_swap)

(cffi:defcfun ("gsl_matrix_uint_swap_rows" gsl_matrix_uint_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uint_swap_rows)

(cffi:defcfun ("gsl_matrix_uint_swap_columns" gsl_matrix_uint_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uint_swap_columns)

(cffi:defcfun ("gsl_matrix_uint_swap_rowcol" gsl_matrix_uint_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uint_swap_rowcol)

(cffi:defcfun ("gsl_matrix_uint_transpose" gsl_matrix_uint_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_uint_transpose)

(cffi:defcfun ("gsl_matrix_uint_transpose_memcpy" gsl_matrix_uint_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_uint_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_uint_max" gsl_matrix_uint_max) :unsigned-int
  (m :pointer))

(cl:export 'gsl_matrix_uint_max)

(cffi:defcfun ("gsl_matrix_uint_min" gsl_matrix_uint_min) :unsigned-int
  (m :pointer))

(cl:export 'gsl_matrix_uint_min)

(cffi:defcfun ("gsl_matrix_uint_minmax" gsl_matrix_uint_minmax) :void
  (m :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_matrix_uint_minmax)

(cffi:defcfun ("gsl_matrix_uint_max_index" gsl_matrix_uint_max_index) :void
  (m :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_uint_max_index)

(cffi:defcfun ("gsl_matrix_uint_min_index" gsl_matrix_uint_min_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer))

(cl:export 'gsl_matrix_uint_min_index)

(cffi:defcfun ("gsl_matrix_uint_minmax_index" gsl_matrix_uint_minmax_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_uint_minmax_index)

(cffi:defcfun ("gsl_matrix_uint_equal" gsl_matrix_uint_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_uint_equal)

(cffi:defcfun ("gsl_matrix_uint_isnull" gsl_matrix_uint_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_uint_isnull)

(cffi:defcfun ("gsl_matrix_uint_ispos" gsl_matrix_uint_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_uint_ispos)

(cffi:defcfun ("gsl_matrix_uint_isneg" gsl_matrix_uint_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_uint_isneg)

(cffi:defcfun ("gsl_matrix_uint_isnonneg" gsl_matrix_uint_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_uint_isnonneg)

(cffi:defcfun ("gsl_matrix_uint_add" gsl_matrix_uint_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_uint_add)

(cffi:defcfun ("gsl_matrix_uint_sub" gsl_matrix_uint_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_uint_sub)

(cffi:defcfun ("gsl_matrix_uint_mul_elements" gsl_matrix_uint_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_uint_mul_elements)

(cffi:defcfun ("gsl_matrix_uint_div_elements" gsl_matrix_uint_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_uint_div_elements)

(cffi:defcfun ("gsl_matrix_uint_scale" gsl_matrix_uint_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_uint_scale)

(cffi:defcfun ("gsl_matrix_uint_add_constant" gsl_matrix_uint_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_uint_add_constant)

(cffi:defcfun ("gsl_matrix_uint_add_diagonal" gsl_matrix_uint_add_diagonal) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_uint_add_diagonal)

(cffi:defcfun ("gsl_matrix_uint_get_row" gsl_matrix_uint_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_uint_get_row)

(cffi:defcfun ("gsl_matrix_uint_get_col" gsl_matrix_uint_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uint_get_col)

(cffi:defcfun ("gsl_matrix_uint_set_row" gsl_matrix_uint_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_uint_set_row)

(cffi:defcfun ("gsl_matrix_uint_set_col" gsl_matrix_uint_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_uint_set_col)

(cffi:defcfun ("gsl_matrix_uint_get" gsl_matrix_uint_get) :unsigned-int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uint_get)

(cffi:defcfun ("gsl_matrix_uint_set" gsl_matrix_uint_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x :unsigned-int))

(cl:export 'gsl_matrix_uint_set)

(cffi:defcfun ("gsl_matrix_uint_ptr" gsl_matrix_uint_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uint_ptr)

(cffi:defcfun ("gsl_matrix_uint_const_ptr" gsl_matrix_uint_const_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_uint_const_ptr)

(cffi:defcstruct gsl_matrix_ulong
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix_ulong)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_ulong_view
	(matrix gsl_matrix_ulong))

(cl:export '_gsl_matrix_ulong_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_ulong_const_view
	(matrix gsl_matrix_ulong))

(cl:export '_gsl_matrix_ulong_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_ulong_alloc" gsl_matrix_ulong_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ulong_alloc)

(cffi:defcfun ("gsl_matrix_ulong_calloc" gsl_matrix_ulong_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ulong_calloc)

(cffi:defcfun ("gsl_matrix_ulong_alloc_from_block" gsl_matrix_ulong_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_ulong_alloc_from_block)

(cffi:defcfun ("gsl_matrix_ulong_alloc_from_matrix" gsl_matrix_ulong_alloc_from_matrix) :pointer
  (m :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ulong_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_ulong_alloc_row_from_matrix" gsl_vector_ulong_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_ulong_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_ulong_alloc_col_from_matrix" gsl_vector_ulong_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_ulong_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_ulong_free" gsl_matrix_ulong_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_ulong_free)

(cffi:defcfun ("gsl_matrix_ulong_submatrix" gsl_matrix_ulong_submatrix) _gsl_matrix_ulong_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ulong_submatrix)

(cffi:defcfun ("gsl_matrix_ulong_row" gsl_matrix_ulong_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_ulong_row)

(cffi:defcfun ("gsl_matrix_ulong_column" gsl_matrix_ulong_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ulong_column)

(cffi:defcfun ("gsl_matrix_ulong_diagonal" gsl_matrix_ulong_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_ulong_diagonal)

(cffi:defcfun ("gsl_matrix_ulong_subdiagonal" gsl_matrix_ulong_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_ulong_subdiagonal)

(cffi:defcfun ("gsl_matrix_ulong_superdiagonal" gsl_matrix_ulong_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_ulong_superdiagonal)

(cffi:defcfun ("gsl_matrix_ulong_subrow" gsl_matrix_ulong_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_ulong_subrow)

(cffi:defcfun ("gsl_matrix_ulong_subcolumn" gsl_matrix_ulong_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_ulong_subcolumn)

(cffi:defcfun ("gsl_matrix_ulong_view_array" gsl_matrix_ulong_view_array) _gsl_matrix_ulong_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ulong_view_array)

(cffi:defcfun ("gsl_matrix_ulong_view_array_with_tda" gsl_matrix_ulong_view_array_with_tda) _gsl_matrix_ulong_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_ulong_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_ulong_view_vector" gsl_matrix_ulong_view_vector) _gsl_matrix_ulong_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ulong_view_vector)

(cffi:defcfun ("gsl_matrix_ulong_view_vector_with_tda" gsl_matrix_ulong_view_vector_with_tda) _gsl_matrix_ulong_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_ulong_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_ulong_const_submatrix" gsl_matrix_ulong_const_submatrix) _gsl_matrix_ulong_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ulong_const_submatrix)

(cffi:defcfun ("gsl_matrix_ulong_const_row" gsl_matrix_ulong_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_ulong_const_row)

(cffi:defcfun ("gsl_matrix_ulong_const_column" gsl_matrix_ulong_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ulong_const_column)

(cffi:defcfun ("gsl_matrix_ulong_const_diagonal" gsl_matrix_ulong_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_ulong_const_diagonal)

(cffi:defcfun ("gsl_matrix_ulong_const_subdiagonal" gsl_matrix_ulong_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_ulong_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_ulong_const_superdiagonal" gsl_matrix_ulong_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_ulong_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_ulong_const_subrow" gsl_matrix_ulong_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_ulong_const_subrow)

(cffi:defcfun ("gsl_matrix_ulong_const_subcolumn" gsl_matrix_ulong_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_ulong_const_subcolumn)

(cffi:defcfun ("gsl_matrix_ulong_const_view_array" gsl_matrix_ulong_const_view_array) _gsl_matrix_ulong_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ulong_const_view_array)

(cffi:defcfun ("gsl_matrix_ulong_const_view_array_with_tda" gsl_matrix_ulong_const_view_array_with_tda) _gsl_matrix_ulong_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_ulong_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_ulong_const_view_vector" gsl_matrix_ulong_const_view_vector) _gsl_matrix_ulong_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ulong_const_view_vector)

(cffi:defcfun ("gsl_matrix_ulong_const_view_vector_with_tda" gsl_matrix_ulong_const_view_vector_with_tda) _gsl_matrix_ulong_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_ulong_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_ulong_set_zero" gsl_matrix_ulong_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_ulong_set_zero)

(cffi:defcfun ("gsl_matrix_ulong_set_identity" gsl_matrix_ulong_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_ulong_set_identity)

(cffi:defcfun ("gsl_matrix_ulong_set_all" gsl_matrix_ulong_set_all) :void
  (m :pointer)
  (x :unsigned-long))

(cl:export 'gsl_matrix_ulong_set_all)

(cffi:defcfun ("gsl_matrix_ulong_fread" gsl_matrix_ulong_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_ulong_fread)

(cffi:defcfun ("gsl_matrix_ulong_fwrite" gsl_matrix_ulong_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_ulong_fwrite)

(cffi:defcfun ("gsl_matrix_ulong_fscanf" gsl_matrix_ulong_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_ulong_fscanf)

(cffi:defcfun ("gsl_matrix_ulong_fprintf" gsl_matrix_ulong_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_ulong_fprintf)

(cffi:defcfun ("gsl_matrix_ulong_memcpy" gsl_matrix_ulong_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_ulong_memcpy)

(cffi:defcfun ("gsl_matrix_ulong_swap" gsl_matrix_ulong_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_ulong_swap)

(cffi:defcfun ("gsl_matrix_ulong_swap_rows" gsl_matrix_ulong_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ulong_swap_rows)

(cffi:defcfun ("gsl_matrix_ulong_swap_columns" gsl_matrix_ulong_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ulong_swap_columns)

(cffi:defcfun ("gsl_matrix_ulong_swap_rowcol" gsl_matrix_ulong_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ulong_swap_rowcol)

(cffi:defcfun ("gsl_matrix_ulong_transpose" gsl_matrix_ulong_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_ulong_transpose)

(cffi:defcfun ("gsl_matrix_ulong_transpose_memcpy" gsl_matrix_ulong_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_ulong_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_ulong_max" gsl_matrix_ulong_max) :unsigned-long
  (m :pointer))

(cl:export 'gsl_matrix_ulong_max)

(cffi:defcfun ("gsl_matrix_ulong_min" gsl_matrix_ulong_min) :unsigned-long
  (m :pointer))

(cl:export 'gsl_matrix_ulong_min)

(cffi:defcfun ("gsl_matrix_ulong_minmax" gsl_matrix_ulong_minmax) :void
  (m :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_matrix_ulong_minmax)

(cffi:defcfun ("gsl_matrix_ulong_max_index" gsl_matrix_ulong_max_index) :void
  (m :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_ulong_max_index)

(cffi:defcfun ("gsl_matrix_ulong_min_index" gsl_matrix_ulong_min_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer))

(cl:export 'gsl_matrix_ulong_min_index)

(cffi:defcfun ("gsl_matrix_ulong_minmax_index" gsl_matrix_ulong_minmax_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_ulong_minmax_index)

(cffi:defcfun ("gsl_matrix_ulong_equal" gsl_matrix_ulong_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_ulong_equal)

(cffi:defcfun ("gsl_matrix_ulong_isnull" gsl_matrix_ulong_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_ulong_isnull)

(cffi:defcfun ("gsl_matrix_ulong_ispos" gsl_matrix_ulong_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_ulong_ispos)

(cffi:defcfun ("gsl_matrix_ulong_isneg" gsl_matrix_ulong_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_ulong_isneg)

(cffi:defcfun ("gsl_matrix_ulong_isnonneg" gsl_matrix_ulong_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_ulong_isnonneg)

(cffi:defcfun ("gsl_matrix_ulong_add" gsl_matrix_ulong_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_ulong_add)

(cffi:defcfun ("gsl_matrix_ulong_sub" gsl_matrix_ulong_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_ulong_sub)

(cffi:defcfun ("gsl_matrix_ulong_mul_elements" gsl_matrix_ulong_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_ulong_mul_elements)

(cffi:defcfun ("gsl_matrix_ulong_div_elements" gsl_matrix_ulong_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_ulong_div_elements)

(cffi:defcfun ("gsl_matrix_ulong_scale" gsl_matrix_ulong_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_ulong_scale)

(cffi:defcfun ("gsl_matrix_ulong_add_constant" gsl_matrix_ulong_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_ulong_add_constant)

(cffi:defcfun ("gsl_matrix_ulong_add_diagonal" gsl_matrix_ulong_add_diagonal) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_ulong_add_diagonal)

(cffi:defcfun ("gsl_matrix_ulong_get_row" gsl_matrix_ulong_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_ulong_get_row)

(cffi:defcfun ("gsl_matrix_ulong_get_col" gsl_matrix_ulong_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ulong_get_col)

(cffi:defcfun ("gsl_matrix_ulong_set_row" gsl_matrix_ulong_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_ulong_set_row)

(cffi:defcfun ("gsl_matrix_ulong_set_col" gsl_matrix_ulong_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_ulong_set_col)

(cffi:defcfun ("gsl_matrix_ulong_get" gsl_matrix_ulong_get) :unsigned-long
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ulong_get)

(cffi:defcfun ("gsl_matrix_ulong_set" gsl_matrix_ulong_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x :unsigned-long))

(cl:export 'gsl_matrix_ulong_set)

(cffi:defcfun ("gsl_matrix_ulong_ptr" gsl_matrix_ulong_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ulong_ptr)

(cffi:defcfun ("gsl_matrix_ulong_const_ptr" gsl_matrix_ulong_const_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ulong_const_ptr)

(cffi:defcstruct gsl_matrix_ushort
	(size1 :pointer)
	(size2 :pointer)
	(tda :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_matrix_ushort)

(cl:export 'size1)

(cl:export 'size2)

(cl:export 'tda)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_matrix_ushort_view
	(matrix gsl_matrix_ushort))

(cl:export '_gsl_matrix_ushort_view)

(cl:export 'matrix)

(cffi:defcstruct _gsl_matrix_ushort_const_view
	(matrix gsl_matrix_ushort))

(cl:export '_gsl_matrix_ushort_const_view)

(cl:export 'matrix)

(cffi:defcfun ("gsl_matrix_ushort_alloc" gsl_matrix_ushort_alloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ushort_alloc)

(cffi:defcfun ("gsl_matrix_ushort_calloc" gsl_matrix_ushort_calloc) :pointer
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ushort_calloc)

(cffi:defcfun ("gsl_matrix_ushort_alloc_from_block" gsl_matrix_ushort_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (d2 :pointer))

(cl:export 'gsl_matrix_ushort_alloc_from_block)

(cffi:defcfun ("gsl_matrix_ushort_alloc_from_matrix" gsl_matrix_ushort_alloc_from_matrix) :pointer
  (m :pointer)
  (k1 :pointer)
  (k2 :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ushort_alloc_from_matrix)

(cffi:defcfun ("gsl_vector_ushort_alloc_row_from_matrix" gsl_vector_ushort_alloc_row_from_matrix) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_vector_ushort_alloc_row_from_matrix)

(cffi:defcfun ("gsl_vector_ushort_alloc_col_from_matrix" gsl_vector_ushort_alloc_col_from_matrix) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_vector_ushort_alloc_col_from_matrix)

(cffi:defcfun ("gsl_matrix_ushort_free" gsl_matrix_ushort_free) :void
  (m :pointer))

(cl:export 'gsl_matrix_ushort_free)

(cffi:defcfun ("gsl_matrix_ushort_submatrix" gsl_matrix_ushort_submatrix) _gsl_matrix_ushort_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ushort_submatrix)

(cffi:defcfun ("gsl_matrix_ushort_row" gsl_matrix_ushort_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_ushort_row)

(cffi:defcfun ("gsl_matrix_ushort_column" gsl_matrix_ushort_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ushort_column)

(cffi:defcfun ("gsl_matrix_ushort_diagonal" gsl_matrix_ushort_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_ushort_diagonal)

(cffi:defcfun ("gsl_matrix_ushort_subdiagonal" gsl_matrix_ushort_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_ushort_subdiagonal)

(cffi:defcfun ("gsl_matrix_ushort_superdiagonal" gsl_matrix_ushort_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_ushort_superdiagonal)

(cffi:defcfun ("gsl_matrix_ushort_subrow" gsl_matrix_ushort_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_ushort_subrow)

(cffi:defcfun ("gsl_matrix_ushort_subcolumn" gsl_matrix_ushort_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_ushort_subcolumn)

(cffi:defcfun ("gsl_matrix_ushort_view_array" gsl_matrix_ushort_view_array) _gsl_matrix_ushort_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ushort_view_array)

(cffi:defcfun ("gsl_matrix_ushort_view_array_with_tda" gsl_matrix_ushort_view_array_with_tda) _gsl_matrix_ushort_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_ushort_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_ushort_view_vector" gsl_matrix_ushort_view_vector) _gsl_matrix_ushort_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ushort_view_vector)

(cffi:defcfun ("gsl_matrix_ushort_view_vector_with_tda" gsl_matrix_ushort_view_vector_with_tda) _gsl_matrix_ushort_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_ushort_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_ushort_const_submatrix" gsl_matrix_ushort_const_submatrix) _gsl_matrix_ushort_const_view
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ushort_const_submatrix)

(cffi:defcfun ("gsl_matrix_ushort_const_row" gsl_matrix_ushort_const_row) :pointer
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_ushort_const_row)

(cffi:defcfun ("gsl_matrix_ushort_const_column" gsl_matrix_ushort_const_column) :pointer
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ushort_const_column)

(cffi:defcfun ("gsl_matrix_ushort_const_diagonal" gsl_matrix_ushort_const_diagonal) :pointer
  (m :pointer))

(cl:export 'gsl_matrix_ushort_const_diagonal)

(cffi:defcfun ("gsl_matrix_ushort_const_subdiagonal" gsl_matrix_ushort_const_subdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_ushort_const_subdiagonal)

(cffi:defcfun ("gsl_matrix_ushort_const_superdiagonal" gsl_matrix_ushort_const_superdiagonal) :pointer
  (m :pointer)
  (k :pointer))

(cl:export 'gsl_matrix_ushort_const_superdiagonal)

(cffi:defcfun ("gsl_matrix_ushort_const_subrow" gsl_matrix_ushort_const_subrow) :pointer
  (m :pointer)
  (i :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_ushort_const_subrow)

(cffi:defcfun ("gsl_matrix_ushort_const_subcolumn" gsl_matrix_ushort_const_subcolumn) :pointer
  (m :pointer)
  (j :pointer)
  (offset :pointer)
  (n :pointer))

(cl:export 'gsl_matrix_ushort_const_subcolumn)

(cffi:defcfun ("gsl_matrix_ushort_const_view_array" gsl_matrix_ushort_const_view_array) _gsl_matrix_ushort_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ushort_const_view_array)

(cffi:defcfun ("gsl_matrix_ushort_const_view_array_with_tda" gsl_matrix_ushort_const_view_array_with_tda) _gsl_matrix_ushort_const_view
  (base :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_ushort_const_view_array_with_tda)

(cffi:defcfun ("gsl_matrix_ushort_const_view_vector" gsl_matrix_ushort_const_view_vector) _gsl_matrix_ushort_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer))

(cl:export 'gsl_matrix_ushort_const_view_vector)

(cffi:defcfun ("gsl_matrix_ushort_const_view_vector_with_tda" gsl_matrix_ushort_const_view_vector_with_tda) _gsl_matrix_ushort_const_view
  (v :pointer)
  (n1 :pointer)
  (n2 :pointer)
  (tda :pointer))

(cl:export 'gsl_matrix_ushort_const_view_vector_with_tda)

(cffi:defcfun ("gsl_matrix_ushort_set_zero" gsl_matrix_ushort_set_zero) :void
  (m :pointer))

(cl:export 'gsl_matrix_ushort_set_zero)

(cffi:defcfun ("gsl_matrix_ushort_set_identity" gsl_matrix_ushort_set_identity) :void
  (m :pointer))

(cl:export 'gsl_matrix_ushort_set_identity)

(cffi:defcfun ("gsl_matrix_ushort_set_all" gsl_matrix_ushort_set_all) :void
  (m :pointer)
  (x :unsigned-short))

(cl:export 'gsl_matrix_ushort_set_all)

(cffi:defcfun ("gsl_matrix_ushort_fread" gsl_matrix_ushort_fread) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_ushort_fread)

(cffi:defcfun ("gsl_matrix_ushort_fwrite" gsl_matrix_ushort_fwrite) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_ushort_fwrite)

(cffi:defcfun ("gsl_matrix_ushort_fscanf" gsl_matrix_ushort_fscanf) :int
  (stream :pointer)
  (m :pointer))

(cl:export 'gsl_matrix_ushort_fscanf)

(cffi:defcfun ("gsl_matrix_ushort_fprintf" gsl_matrix_ushort_fprintf) :int
  (stream :pointer)
  (m :pointer)
  (format :string))

(cl:export 'gsl_matrix_ushort_fprintf)

(cffi:defcfun ("gsl_matrix_ushort_memcpy" gsl_matrix_ushort_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_ushort_memcpy)

(cffi:defcfun ("gsl_matrix_ushort_swap" gsl_matrix_ushort_swap) :int
  (m1 :pointer)
  (m2 :pointer))

(cl:export 'gsl_matrix_ushort_swap)

(cffi:defcfun ("gsl_matrix_ushort_swap_rows" gsl_matrix_ushort_swap_rows) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ushort_swap_rows)

(cffi:defcfun ("gsl_matrix_ushort_swap_columns" gsl_matrix_ushort_swap_columns) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ushort_swap_columns)

(cffi:defcfun ("gsl_matrix_ushort_swap_rowcol" gsl_matrix_ushort_swap_rowcol) :int
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ushort_swap_rowcol)

(cffi:defcfun ("gsl_matrix_ushort_transpose" gsl_matrix_ushort_transpose) :int
  (m :pointer))

(cl:export 'gsl_matrix_ushort_transpose)

(cffi:defcfun ("gsl_matrix_ushort_transpose_memcpy" gsl_matrix_ushort_transpose_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_matrix_ushort_transpose_memcpy)

(cffi:defcfun ("gsl_matrix_ushort_max" gsl_matrix_ushort_max) :unsigned-short
  (m :pointer))

(cl:export 'gsl_matrix_ushort_max)

(cffi:defcfun ("gsl_matrix_ushort_min" gsl_matrix_ushort_min) :unsigned-short
  (m :pointer))

(cl:export 'gsl_matrix_ushort_min)

(cffi:defcfun ("gsl_matrix_ushort_minmax" gsl_matrix_ushort_minmax) :void
  (m :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_matrix_ushort_minmax)

(cffi:defcfun ("gsl_matrix_ushort_max_index" gsl_matrix_ushort_max_index) :void
  (m :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_ushort_max_index)

(cffi:defcfun ("gsl_matrix_ushort_min_index" gsl_matrix_ushort_min_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer))

(cl:export 'gsl_matrix_ushort_min_index)

(cffi:defcfun ("gsl_matrix_ushort_minmax_index" gsl_matrix_ushort_minmax_index) :void
  (m :pointer)
  (imin :pointer)
  (jmin :pointer)
  (imax :pointer)
  (jmax :pointer))

(cl:export 'gsl_matrix_ushort_minmax_index)

(cffi:defcfun ("gsl_matrix_ushort_equal" gsl_matrix_ushort_equal) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_ushort_equal)

(cffi:defcfun ("gsl_matrix_ushort_isnull" gsl_matrix_ushort_isnull) :int
  (m :pointer))

(cl:export 'gsl_matrix_ushort_isnull)

(cffi:defcfun ("gsl_matrix_ushort_ispos" gsl_matrix_ushort_ispos) :int
  (m :pointer))

(cl:export 'gsl_matrix_ushort_ispos)

(cffi:defcfun ("gsl_matrix_ushort_isneg" gsl_matrix_ushort_isneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_ushort_isneg)

(cffi:defcfun ("gsl_matrix_ushort_isnonneg" gsl_matrix_ushort_isnonneg) :int
  (m :pointer))

(cl:export 'gsl_matrix_ushort_isnonneg)

(cffi:defcfun ("gsl_matrix_ushort_add" gsl_matrix_ushort_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_ushort_add)

(cffi:defcfun ("gsl_matrix_ushort_sub" gsl_matrix_ushort_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_ushort_sub)

(cffi:defcfun ("gsl_matrix_ushort_mul_elements" gsl_matrix_ushort_mul_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_ushort_mul_elements)

(cffi:defcfun ("gsl_matrix_ushort_div_elements" gsl_matrix_ushort_div_elements) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_matrix_ushort_div_elements)

(cffi:defcfun ("gsl_matrix_ushort_scale" gsl_matrix_ushort_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_ushort_scale)

(cffi:defcfun ("gsl_matrix_ushort_add_constant" gsl_matrix_ushort_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_ushort_add_constant)

(cffi:defcfun ("gsl_matrix_ushort_add_diagonal" gsl_matrix_ushort_add_diagonal) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_matrix_ushort_add_diagonal)

(cffi:defcfun ("gsl_matrix_ushort_get_row" gsl_matrix_ushort_get_row) :int
  (v :pointer)
  (m :pointer)
  (i :pointer))

(cl:export 'gsl_matrix_ushort_get_row)

(cffi:defcfun ("gsl_matrix_ushort_get_col" gsl_matrix_ushort_get_col) :int
  (v :pointer)
  (m :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ushort_get_col)

(cffi:defcfun ("gsl_matrix_ushort_set_row" gsl_matrix_ushort_set_row) :int
  (m :pointer)
  (i :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_ushort_set_row)

(cffi:defcfun ("gsl_matrix_ushort_set_col" gsl_matrix_ushort_set_col) :int
  (m :pointer)
  (j :pointer)
  (v :pointer))

(cl:export 'gsl_matrix_ushort_set_col)

(cffi:defcfun ("gsl_matrix_ushort_get" gsl_matrix_ushort_get) :unsigned-short
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ushort_get)

(cffi:defcfun ("gsl_matrix_ushort_set" gsl_matrix_ushort_set) :void
  (m :pointer)
  (i :pointer)
  (j :pointer)
  (x :unsigned-short))

(cl:export 'gsl_matrix_ushort_set)

(cffi:defcfun ("gsl_matrix_ushort_ptr" gsl_matrix_ushort_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ushort_ptr)

(cffi:defcfun ("gsl_matrix_ushort_const_ptr" gsl_matrix_ushort_const_ptr) :pointer
  (m :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_matrix_ushort_const_ptr)

(cffi:defcstruct gsl_min_fminimizer_type
	(name :string)
	(size :pointer)
	(set :pointer)
	(iterate :pointer))

(cl:export 'gsl_min_fminimizer_type)

(cl:export 'name)

(cl:export 'size)

(cl:export 'set)

(cl:export 'iterate)

(cffi:defcstruct gsl_min_fminimizer
	(type :pointer)
	(function :pointer)
	(x_minimum :double)
	(x_lower :double)
	(x_upper :double)
	(f_minimum :double)
	(f_lower :double)
	(f_upper :double)
	(state :pointer))

(cl:export 'gsl_min_fminimizer)

(cl:export 'type)

(cl:export 'function)

(cl:export 'x_minimum)

(cl:export 'x_lower)

(cl:export 'x_upper)

(cl:export 'f_minimum)

(cl:export 'f_lower)

(cl:export 'f_upper)

(cl:export 'state)

(cffi:defcfun ("gsl_min_fminimizer_alloc" gsl_min_fminimizer_alloc) :pointer
  (t_arg0 :pointer))

(cl:export 'gsl_min_fminimizer_alloc)

(cffi:defcfun ("gsl_min_fminimizer_free" gsl_min_fminimizer_free) :void
  (s :pointer))

(cl:export 'gsl_min_fminimizer_free)

(cffi:defcfun ("gsl_min_fminimizer_set" gsl_min_fminimizer_set) :int
  (s :pointer)
  (f :pointer)
  (x_minimum :double)
  (x_lower :double)
  (x_upper :double))

(cl:export 'gsl_min_fminimizer_set)

(cffi:defcfun ("gsl_min_fminimizer_set_with_values" gsl_min_fminimizer_set_with_values) :int
  (s :pointer)
  (f :pointer)
  (x_minimum :double)
  (f_minimum :double)
  (x_lower :double)
  (f_lower :double)
  (x_upper :double)
  (f_upper :double))

(cl:export 'gsl_min_fminimizer_set_with_values)

(cffi:defcfun ("gsl_min_fminimizer_iterate" gsl_min_fminimizer_iterate) :int
  (s :pointer))

(cl:export 'gsl_min_fminimizer_iterate)

(cffi:defcfun ("gsl_min_fminimizer_name" gsl_min_fminimizer_name) :string
  (s :pointer))

(cl:export 'gsl_min_fminimizer_name)

(cffi:defcfun ("gsl_min_fminimizer_x_minimum" gsl_min_fminimizer_x_minimum) :double
  (s :pointer))

(cl:export 'gsl_min_fminimizer_x_minimum)

(cffi:defcfun ("gsl_min_fminimizer_x_lower" gsl_min_fminimizer_x_lower) :double
  (s :pointer))

(cl:export 'gsl_min_fminimizer_x_lower)

(cffi:defcfun ("gsl_min_fminimizer_x_upper" gsl_min_fminimizer_x_upper) :double
  (s :pointer))

(cl:export 'gsl_min_fminimizer_x_upper)

(cffi:defcfun ("gsl_min_fminimizer_f_minimum" gsl_min_fminimizer_f_minimum) :double
  (s :pointer))

(cl:export 'gsl_min_fminimizer_f_minimum)

(cffi:defcfun ("gsl_min_fminimizer_f_lower" gsl_min_fminimizer_f_lower) :double
  (s :pointer))

(cl:export 'gsl_min_fminimizer_f_lower)

(cffi:defcfun ("gsl_min_fminimizer_f_upper" gsl_min_fminimizer_f_upper) :double
  (s :pointer))

(cl:export 'gsl_min_fminimizer_f_upper)

(cffi:defcfun ("gsl_min_fminimizer_minimum" gsl_min_fminimizer_minimum) :double
  (s :pointer))

(cl:export 'gsl_min_fminimizer_minimum)

(cffi:defcfun ("gsl_min_test_interval" gsl_min_test_interval) :int
  (x_lower :double)
  (x_upper :double)
  (epsabs :double)
  (epsrel :double))

(cl:export 'gsl_min_test_interval)

(cffi:defcvar ("gsl_min_fminimizer_goldensection" gsl_min_fminimizer_goldensection)
 :pointer)

(cl:export 'gsl_min_fminimizer_goldensection)

(cffi:defcvar ("gsl_min_fminimizer_brent" gsl_min_fminimizer_brent)
 :pointer)

(cl:export 'gsl_min_fminimizer_brent)

(cffi:defcvar ("gsl_min_fminimizer_quad_golden" gsl_min_fminimizer_quad_golden)
 :pointer)

(cl:export 'gsl_min_fminimizer_quad_golden)

(cffi:defcfun ("gsl_min_find_bracket" gsl_min_find_bracket) :int
  (f :pointer)
  (x_minimum :pointer)
  (f_minimum :pointer)
  (x_lower :pointer)
  (f_lower :pointer)
  (x_upper :pointer)
  (f_upper :pointer)
  (eval_max :pointer))

(cl:export 'gsl_min_find_bracket)

(cffi:defcfun ("gsl_max" gsl_max) :double
  (a :double)
  (b :double))

(cl:export 'gsl_max)

(cffi:defcfun ("gsl_min" gsl_min) :double
  (a :double)
  (b :double))

(cl:export 'gsl_min)

(cl:defconstant GSL_PREC_DOUBLE 0)

(cl:export 'GSL_PREC_DOUBLE)

(cl:defconstant GSL_PREC_SINGLE 1)

(cl:export 'GSL_PREC_SINGLE)

(cl:defconstant GSL_PREC_APPROX 2)

(cl:export 'GSL_PREC_APPROX)

(cl:defconstant GSL_MODE_DEFAULT 0)

(cl:export 'GSL_MODE_DEFAULT)

(cffi:defcstruct gsl_monte_function_struct
	(f :pointer)
	(dim :pointer)
	(params :pointer))

(cl:export 'gsl_monte_function_struct)

(cl:export 'f)

(cl:export 'dim)

(cl:export 'params)

(cffi:defcstruct gsl_monte_miser_state
	(min_calls :pointer)
	(min_calls_per_bisection :pointer)
	(dither :double)
	(estimate_frac :double)
	(alpha :double)
	(dim :pointer)
	(estimate_style :int)
	(depth :int)
	(verbose :int)
	(x :pointer)
	(xmid :pointer)
	(sigma_l :pointer)
	(sigma_r :pointer)
	(fmax_l :pointer)
	(fmax_r :pointer)
	(fmin_l :pointer)
	(fmin_r :pointer)
	(fsum_l :pointer)
	(fsum_r :pointer)
	(fsum2_l :pointer)
	(fsum2_r :pointer)
	(hits_l :pointer)
	(hits_r :pointer))

(cl:export 'gsl_monte_miser_state)

(cl:export 'min_calls)

(cl:export 'min_calls_per_bisection)

(cl:export 'dither)

(cl:export 'estimate_frac)

(cl:export 'alpha)

(cl:export 'dim)

(cl:export 'estimate_style)

(cl:export 'depth)

(cl:export 'verbose)

(cl:export 'x)

(cl:export 'xmid)

(cl:export 'sigma_l)

(cl:export 'sigma_r)

(cl:export 'fmax_l)

(cl:export 'fmax_r)

(cl:export 'fmin_l)

(cl:export 'fmin_r)

(cl:export 'fsum_l)

(cl:export 'fsum_r)

(cl:export 'fsum2_l)

(cl:export 'fsum2_r)

(cl:export 'hits_l)

(cl:export 'hits_r)

(cffi:defcfun ("gsl_monte_miser_integrate" gsl_monte_miser_integrate) :int
  (f :pointer)
  (xl :pointer)
  (xh :pointer)
  (dim :pointer)
  (calls :pointer)
  (r :pointer)
  (state :pointer)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_monte_miser_integrate)

(cffi:defcfun ("gsl_monte_miser_alloc" gsl_monte_miser_alloc) :pointer
  (dim :pointer))

(cl:export 'gsl_monte_miser_alloc)

(cffi:defcfun ("gsl_monte_miser_init" gsl_monte_miser_init) :int
  (state :pointer))

(cl:export 'gsl_monte_miser_init)

(cffi:defcfun ("gsl_monte_miser_free" gsl_monte_miser_free) :void
  (state :pointer))

(cl:export 'gsl_monte_miser_free)

(cffi:defcstruct gsl_monte_miser_params
	(estimate_frac :double)
	(min_calls :pointer)
	(min_calls_per_bisection :pointer)
	(alpha :double)
	(dither :double))

(cl:export 'gsl_monte_miser_params)

(cl:export 'estimate_frac)

(cl:export 'min_calls)

(cl:export 'min_calls_per_bisection)

(cl:export 'alpha)

(cl:export 'dither)

(cffi:defcfun ("gsl_monte_miser_params_get" gsl_monte_miser_params_get) :void
  (state :pointer)
  (params :pointer))

(cl:export 'gsl_monte_miser_params_get)

(cffi:defcfun ("gsl_monte_miser_params_set" gsl_monte_miser_params_set) :void
  (state :pointer)
  (params :pointer))

(cl:export 'gsl_monte_miser_params_set)

(cffi:defcstruct gsl_monte_plain_state
	(dim :pointer)
	(x :pointer))

(cl:export 'gsl_monte_plain_state)

(cl:export 'dim)

(cl:export 'x)

(cffi:defcfun ("gsl_monte_plain_integrate" gsl_monte_plain_integrate) :int
  (f :pointer)
  (xl :pointer)
  (xu :pointer)
  (dim :pointer)
  (calls :pointer)
  (r :pointer)
  (state :pointer)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_monte_plain_integrate)

(cffi:defcfun ("gsl_monte_plain_alloc" gsl_monte_plain_alloc) :pointer
  (dim :pointer))

(cl:export 'gsl_monte_plain_alloc)

(cffi:defcfun ("gsl_monte_plain_init" gsl_monte_plain_init) :int
  (state :pointer))

(cl:export 'gsl_monte_plain_init)

(cffi:defcfun ("gsl_monte_plain_free" gsl_monte_plain_free) :void
  (state :pointer))

(cl:export 'gsl_monte_plain_free)

(defanonenum 
	(GSL_VEGAS_MODE_IMPORTANCE #.1)
	(GSL_VEGAS_MODE_IMPORTANCE_ONLY #.0)
	(GSL_VEGAS_MODE_STRATIFIED #.-1))

(cl:export 'GSL_VEGAS_MODE_IMPORTANCE)

(cl:export 'GSL_VEGAS_MODE_IMPORTANCE_ONLY)

(cl:export 'GSL_VEGAS_MODE_STRATIFIED)

(cffi:defcstruct gsl_monte_vegas_state
	(dim :pointer)
	(bins_max :pointer)
	(bins :unsigned-int)
	(boxes :unsigned-int)
	(xi :pointer)
	(xin :pointer)
	(delx :pointer)
	(weight :pointer)
	(vol :double)
	(x :pointer)
	(bin :pointer)
	(box :pointer)
	(d :pointer)
	(alpha :double)
	(mode :int)
	(verbose :int)
	(iterations :unsigned-int)
	(stage :int)
	(jac :double)
	(wtd_int_sum :double)
	(sum_wgts :double)
	(chi_sum :double)
	(chisq :double)
	(result :double)
	(sigma :double)
	(it_start :unsigned-int)
	(it_num :unsigned-int)
	(samples :unsigned-int)
	(calls_per_box :unsigned-int)
	(ostream :pointer))

(cl:export 'gsl_monte_vegas_state)

(cl:export 'dim)

(cl:export 'bins_max)

(cl:export 'bins)

(cl:export 'boxes)

(cl:export 'xi)

(cl:export 'xin)

(cl:export 'delx)

(cl:export 'weight)

(cl:export 'vol)

(cl:export 'x)

(cl:export 'bin)

(cl:export 'box)

(cl:export 'd)

(cl:export 'alpha)

(cl:export 'mode)

(cl:export 'verbose)

(cl:export 'iterations)

(cl:export 'stage)

(cl:export 'jac)

(cl:export 'wtd_int_sum)

(cl:export 'sum_wgts)

(cl:export 'chi_sum)

(cl:export 'chisq)

(cl:export 'result)

(cl:export 'sigma)

(cl:export 'it_start)

(cl:export 'it_num)

(cl:export 'samples)

(cl:export 'calls_per_box)

(cl:export 'ostream)

(cffi:defcfun ("gsl_monte_vegas_integrate" gsl_monte_vegas_integrate) :int
  (f :pointer)
  (xl :pointer)
  (xu :pointer)
  (dim :pointer)
  (calls :pointer)
  (r :pointer)
  (state :pointer)
  (result :pointer)
  (abserr :pointer))

(cl:export 'gsl_monte_vegas_integrate)

(cffi:defcfun ("gsl_monte_vegas_alloc" gsl_monte_vegas_alloc) :pointer
  (dim :pointer))

(cl:export 'gsl_monte_vegas_alloc)

(cffi:defcfun ("gsl_monte_vegas_init" gsl_monte_vegas_init) :int
  (state :pointer))

(cl:export 'gsl_monte_vegas_init)

(cffi:defcfun ("gsl_monte_vegas_free" gsl_monte_vegas_free) :void
  (state :pointer))

(cl:export 'gsl_monte_vegas_free)

(cffi:defcfun ("gsl_monte_vegas_chisq" gsl_monte_vegas_chisq) :double
  (state :pointer))

(cl:export 'gsl_monte_vegas_chisq)

(cffi:defcfun ("gsl_monte_vegas_runval" gsl_monte_vegas_runval) :void
  (state :pointer)
  (result :pointer)
  (sigma :pointer))

(cl:export 'gsl_monte_vegas_runval)

(cffi:defcstruct gsl_monte_vegas_params
	(alpha :double)
	(iterations :pointer)
	(stage :int)
	(mode :int)
	(verbose :int)
	(ostream :pointer))

(cl:export 'gsl_monte_vegas_params)

(cl:export 'alpha)

(cl:export 'iterations)

(cl:export 'stage)

(cl:export 'mode)

(cl:export 'verbose)

(cl:export 'ostream)

(cffi:defcfun ("gsl_monte_vegas_params_get" gsl_monte_vegas_params_get) :void
  (state :pointer)
  (params :pointer))

(cl:export 'gsl_monte_vegas_params_get)

(cffi:defcfun ("gsl_monte_vegas_params_set" gsl_monte_vegas_params_set) :void
  (state :pointer)
  (params :pointer))

(cl:export 'gsl_monte_vegas_params_set)

(cffi:defcstruct gsl_multifit_linear_workspace
	(n :pointer)
	(p :pointer)
	(A :pointer)
	(Q :pointer)
	(QSI :pointer)
	(S :pointer)
	(t_var :pointer)
	(xt :pointer)
	(D :pointer))

(cl:export 'gsl_multifit_linear_workspace)

(cl:export 'n)

(cl:export 'p)

(cl:export 'A)

(cl:export 'Q)

(cl:export 'QSI)

(cl:export 'S)

(cl:export 't)

(cl:export 'xt)

(cl:export 'D)

(cffi:defcfun ("gsl_multifit_linear_alloc" gsl_multifit_linear_alloc) :pointer
  (n :pointer)
  (p :pointer))

(cl:export 'gsl_multifit_linear_alloc)

(cffi:defcfun ("gsl_multifit_linear_free" gsl_multifit_linear_free) :void
  (work :pointer))

(cl:export 'gsl_multifit_linear_free)

(cffi:defcfun ("gsl_multifit_linear" gsl_multifit_linear) :int
  (X :pointer)
  (y :pointer)
  (c :pointer)
  (cov :pointer)
  (chisq :pointer)
  (work :pointer))

(cl:export 'gsl_multifit_linear)

(cffi:defcfun ("gsl_multifit_linear_svd" gsl_multifit_linear_svd) :int
  (X :pointer)
  (y :pointer)
  (tol :double)
  (rank :pointer)
  (c :pointer)
  (cov :pointer)
  (chisq :pointer)
  (work :pointer))

(cl:export 'gsl_multifit_linear_svd)

(cffi:defcfun ("gsl_multifit_linear_usvd" gsl_multifit_linear_usvd) :int
  (X :pointer)
  (y :pointer)
  (tol :double)
  (rank :pointer)
  (c :pointer)
  (cov :pointer)
  (chisq :pointer)
  (work :pointer))

(cl:export 'gsl_multifit_linear_usvd)

(cffi:defcfun ("gsl_multifit_wlinear" gsl_multifit_wlinear) :int
  (X :pointer)
  (w :pointer)
  (y :pointer)
  (c :pointer)
  (cov :pointer)
  (chisq :pointer)
  (work :pointer))

(cl:export 'gsl_multifit_wlinear)

(cffi:defcfun ("gsl_multifit_wlinear_svd" gsl_multifit_wlinear_svd) :int
  (X :pointer)
  (w :pointer)
  (y :pointer)
  (tol :double)
  (rank :pointer)
  (c :pointer)
  (cov :pointer)
  (chisq :pointer)
  (work :pointer))

(cl:export 'gsl_multifit_wlinear_svd)

(cffi:defcfun ("gsl_multifit_wlinear_usvd" gsl_multifit_wlinear_usvd) :int
  (X :pointer)
  (w :pointer)
  (y :pointer)
  (tol :double)
  (rank :pointer)
  (c :pointer)
  (cov :pointer)
  (chisq :pointer)
  (work :pointer))

(cl:export 'gsl_multifit_wlinear_usvd)

(cffi:defcfun ("gsl_multifit_linear_est" gsl_multifit_linear_est) :int
  (x :pointer)
  (c :pointer)
  (cov :pointer)
  (y :pointer)
  (y_err :pointer))

(cl:export 'gsl_multifit_linear_est)

(cffi:defcfun ("gsl_multifit_linear_residuals" gsl_multifit_linear_residuals) :int
  (X :pointer)
  (y :pointer)
  (c :pointer)
  (r :pointer))

(cl:export 'gsl_multifit_linear_residuals)

(cffi:defcstruct gsl_multifit_robust_type
	(name :string)
	(wfun :pointer)
	(psi_deriv :pointer)
	(tuning_default :double))

(cl:export 'gsl_multifit_robust_type)

(cl:export 'name)

(cl:export 'wfun)

(cl:export 'psi_deriv)

(cl:export 'tuning_default)

(cffi:defcstruct gsl_multifit_robust_stats
	(sigma_ols :double)
	(sigma_mad :double)
	(sigma_rob :double)
	(sigma :double)
	(Rsq :double)
	(adj_Rsq :double)
	(rmse :double)
	(sse :double)
	(dof :pointer)
	(numit :pointer)
	(weights :pointer)
	(r :pointer))

(cl:export 'gsl_multifit_robust_stats)

(cl:export 'sigma_ols)

(cl:export 'sigma_mad)

(cl:export 'sigma_rob)

(cl:export 'sigma)

(cl:export 'Rsq)

(cl:export 'adj_Rsq)

(cl:export 'rmse)

(cl:export 'sse)

(cl:export 'dof)

(cl:export 'numit)

(cl:export 'weights)

(cl:export 'r)

(cffi:defcstruct gsl_multifit_robust_workspace
	(n :pointer)
	(p :pointer)
	(numit :pointer)
	(maxiter :pointer)
	(type :pointer)
	(tune :double)
	(r :pointer)
	(weights :pointer)
	(c_prev :pointer)
	(resfac :pointer)
	(psi :pointer)
	(dpsi :pointer)
	(QSI :pointer)
	(D :pointer)
	(workn :pointer)
	(stats gsl_multifit_robust_stats)
	(multifit_p :pointer))

(cl:export 'gsl_multifit_robust_workspace)

(cl:export 'n)

(cl:export 'p)

(cl:export 'numit)

(cl:export 'maxiter)

(cl:export 'type)

(cl:export 'tune)

(cl:export 'r)

(cl:export 'weights)

(cl:export 'c_prev)

(cl:export 'resfac)

(cl:export 'psi)

(cl:export 'dpsi)

(cl:export 'QSI)

(cl:export 'D)

(cl:export 'workn)

(cl:export 'stats)

(cl:export 'multifit_p)

(cffi:defcvar ("gsl_multifit_robust_default" gsl_multifit_robust_default)
 :pointer)

(cl:export 'gsl_multifit_robust_default)

(cffi:defcvar ("gsl_multifit_robust_bisquare" gsl_multifit_robust_bisquare)
 :pointer)

(cl:export 'gsl_multifit_robust_bisquare)

(cffi:defcvar ("gsl_multifit_robust_cauchy" gsl_multifit_robust_cauchy)
 :pointer)

(cl:export 'gsl_multifit_robust_cauchy)

(cffi:defcvar ("gsl_multifit_robust_fair" gsl_multifit_robust_fair)
 :pointer)

(cl:export 'gsl_multifit_robust_fair)

(cffi:defcvar ("gsl_multifit_robust_huber" gsl_multifit_robust_huber)
 :pointer)

(cl:export 'gsl_multifit_robust_huber)

(cffi:defcvar ("gsl_multifit_robust_ols" gsl_multifit_robust_ols)
 :pointer)

(cl:export 'gsl_multifit_robust_ols)

(cffi:defcvar ("gsl_multifit_robust_welsch" gsl_multifit_robust_welsch)
 :pointer)

(cl:export 'gsl_multifit_robust_welsch)

(cffi:defcfun ("gsl_multifit_robust_alloc" gsl_multifit_robust_alloc) :pointer
  (t_arg0 :pointer)
  (n :pointer)
  (p :pointer))

(cl:export 'gsl_multifit_robust_alloc)

(cffi:defcfun ("gsl_multifit_robust_free" gsl_multifit_robust_free) :void
  (w :pointer))

(cl:export 'gsl_multifit_robust_free)

(cffi:defcfun ("gsl_multifit_robust_tune" gsl_multifit_robust_tune) :int
  (tune :double)
  (w :pointer))

(cl:export 'gsl_multifit_robust_tune)

(cffi:defcfun ("gsl_multifit_robust_name" gsl_multifit_robust_name) :string
  (w :pointer))

(cl:export 'gsl_multifit_robust_name)

(cffi:defcfun ("gsl_multifit_robust_statistics" gsl_multifit_robust_statistics) gsl_multifit_robust_stats
  (w :pointer))

(cl:export 'gsl_multifit_robust_statistics)

(cffi:defcfun ("gsl_multifit_robust" gsl_multifit_robust) :int
  (X :pointer)
  (y :pointer)
  (c :pointer)
  (cov :pointer)
  (w :pointer))

(cl:export 'gsl_multifit_robust)

(cffi:defcfun ("gsl_multifit_robust_est" gsl_multifit_robust_est) :int
  (x :pointer)
  (c :pointer)
  (cov :pointer)
  (y :pointer)
  (y_err :pointer))

(cl:export 'gsl_multifit_robust_est)

(cffi:defcfun ("gsl_multifit_gradient" gsl_multifit_gradient) :int
  (J :pointer)
  (f :pointer)
  (g :pointer))

(cl:export 'gsl_multifit_gradient)

(cffi:defcfun ("gsl_multifit_covar" gsl_multifit_covar) :int
  (J :pointer)
  (epsrel :double)
  (covar :pointer))

(cl:export 'gsl_multifit_covar)

(cffi:defcstruct gsl_multifit_function_struct
	(f :pointer)
	(n :pointer)
	(p :pointer)
	(params :pointer))

(cl:export 'gsl_multifit_function_struct)

(cl:export 'f)

(cl:export 'n)

(cl:export 'p)

(cl:export 'params)

(cffi:defcstruct gsl_multifit_fsolver_type
	(name :string)
	(size :pointer)
	(alloc :pointer)
	(set :pointer)
	(iterate :pointer)
	(free :pointer))

(cl:export 'gsl_multifit_fsolver_type)

(cl:export 'name)

(cl:export 'size)

(cl:export 'alloc)

(cl:export 'set)

(cl:export 'iterate)

(cl:export 'free)

(cffi:defcstruct gsl_multifit_fsolver
	(type :pointer)
	(function :pointer)
	(x :pointer)
	(f :pointer)
	(dx :pointer)
	(state :pointer))

(cl:export 'gsl_multifit_fsolver)

(cl:export 'type)

(cl:export 'function)

(cl:export 'x)

(cl:export 'f)

(cl:export 'dx)

(cl:export 'state)

(cffi:defcfun ("gsl_multifit_fsolver_alloc" gsl_multifit_fsolver_alloc) :pointer
  (t_arg0 :pointer)
  (n :pointer)
  (p :pointer))

(cl:export 'gsl_multifit_fsolver_alloc)

(cffi:defcfun ("gsl_multifit_fsolver_free" gsl_multifit_fsolver_free) :void
  (s :pointer))

(cl:export 'gsl_multifit_fsolver_free)

(cffi:defcfun ("gsl_multifit_fsolver_set" gsl_multifit_fsolver_set) :int
  (s :pointer)
  (f :pointer)
  (x :pointer))

(cl:export 'gsl_multifit_fsolver_set)

(cffi:defcfun ("gsl_multifit_fsolver_iterate" gsl_multifit_fsolver_iterate) :int
  (s :pointer))

(cl:export 'gsl_multifit_fsolver_iterate)

(cffi:defcfun ("gsl_multifit_fsolver_driver" gsl_multifit_fsolver_driver) :int
  (s :pointer)
  (maxiter :pointer)
  (epsabs :double)
  (epsrel :double))

(cl:export 'gsl_multifit_fsolver_driver)

(cffi:defcfun ("gsl_multifit_fsolver_name" gsl_multifit_fsolver_name) :string
  (s :pointer))

(cl:export 'gsl_multifit_fsolver_name)

(cffi:defcfun ("gsl_multifit_fsolver_position" gsl_multifit_fsolver_position) :pointer
  (s :pointer))

(cl:export 'gsl_multifit_fsolver_position)

(cffi:defcstruct gsl_multifit_function_fdf_struct
	(f :pointer)
	(df :pointer)
	(fdf :pointer)
	(n :pointer)
	(p :pointer)
	(params :pointer))

(cl:export 'gsl_multifit_function_fdf_struct)

(cl:export 'f)

(cl:export 'df)

(cl:export 'fdf)

(cl:export 'n)

(cl:export 'p)

(cl:export 'params)

(cffi:defcstruct gsl_multifit_fdfsolver_type
	(name :string)
	(size :pointer)
	(alloc :pointer)
	(set :pointer)
	(iterate :pointer)
	(free :pointer))

(cl:export 'gsl_multifit_fdfsolver_type)

(cl:export 'name)

(cl:export 'size)

(cl:export 'alloc)

(cl:export 'set)

(cl:export 'iterate)

(cl:export 'free)

(cffi:defcstruct gsl_multifit_fdfsolver
	(type :pointer)
	(fdf :pointer)
	(x :pointer)
	(f :pointer)
	(J :pointer)
	(dx :pointer)
	(state :pointer))

(cl:export 'gsl_multifit_fdfsolver)

(cl:export 'type)

(cl:export 'fdf)

(cl:export 'x)

(cl:export 'f)

(cl:export 'J)

(cl:export 'dx)

(cl:export 'state)

(cffi:defcfun ("gsl_multifit_fdfsolver_alloc" gsl_multifit_fdfsolver_alloc) :pointer
  (t_arg0 :pointer)
  (n :pointer)
  (p :pointer))

(cl:export 'gsl_multifit_fdfsolver_alloc)

(cffi:defcfun ("gsl_multifit_fdfsolver_set" gsl_multifit_fdfsolver_set) :int
  (s :pointer)
  (fdf :pointer)
  (x :pointer))

(cl:export 'gsl_multifit_fdfsolver_set)

(cffi:defcfun ("gsl_multifit_fdfsolver_iterate" gsl_multifit_fdfsolver_iterate) :int
  (s :pointer))

(cl:export 'gsl_multifit_fdfsolver_iterate)

(cffi:defcfun ("gsl_multifit_fdfsolver_driver" gsl_multifit_fdfsolver_driver) :int
  (s :pointer)
  (maxiter :pointer)
  (epsabs :double)
  (epsrel :double))

(cl:export 'gsl_multifit_fdfsolver_driver)

(cffi:defcfun ("gsl_multifit_fdfsolver_free" gsl_multifit_fdfsolver_free) :void
  (s :pointer))

(cl:export 'gsl_multifit_fdfsolver_free)

(cffi:defcfun ("gsl_multifit_fdfsolver_name" gsl_multifit_fdfsolver_name) :string
  (s :pointer))

(cl:export 'gsl_multifit_fdfsolver_name)

(cffi:defcfun ("gsl_multifit_fdfsolver_position" gsl_multifit_fdfsolver_position) :pointer
  (s :pointer))

(cl:export 'gsl_multifit_fdfsolver_position)

(cffi:defcfun ("gsl_multifit_test_delta" gsl_multifit_test_delta) :int
  (dx :pointer)
  (x :pointer)
  (epsabs :double)
  (epsrel :double))

(cl:export 'gsl_multifit_test_delta)

(cffi:defcfun ("gsl_multifit_test_gradient" gsl_multifit_test_gradient) :int
  (g :pointer)
  (epsabs :double))

(cl:export 'gsl_multifit_test_gradient)

(cffi:defcfun ("gsl_multifit_fdfsolver_dif_df" gsl_multifit_fdfsolver_dif_df) :int
  (x :pointer)
  (fdf :pointer)
  (f :pointer)
  (J :pointer))

(cl:export 'gsl_multifit_fdfsolver_dif_df)

(cffi:defcfun ("gsl_multifit_fdfsolver_dif_fdf" gsl_multifit_fdfsolver_dif_fdf) :int
  (x :pointer)
  (fdf :pointer)
  (f :pointer)
  (J :pointer))

(cl:export 'gsl_multifit_fdfsolver_dif_fdf)

(cffi:defcvar ("gsl_multifit_fdfsolver_lmder" gsl_multifit_fdfsolver_lmder)
 :pointer)

(cl:export 'gsl_multifit_fdfsolver_lmder)

(cffi:defcvar ("gsl_multifit_fdfsolver_lmsder" gsl_multifit_fdfsolver_lmsder)
 :pointer)

(cl:export 'gsl_multifit_fdfsolver_lmsder)

(cffi:defcstruct gsl_multimin_function_struct
	(f :pointer)
	(n :pointer)
	(params :pointer))

(cl:export 'gsl_multimin_function_struct)

(cl:export 'f)

(cl:export 'n)

(cl:export 'params)

(cffi:defcstruct gsl_multimin_function_fdf_struct
	(f :pointer)
	(df :pointer)
	(fdf :pointer)
	(n :pointer)
	(params :pointer))

(cl:export 'gsl_multimin_function_fdf_struct)

(cl:export 'f)

(cl:export 'df)

(cl:export 'fdf)

(cl:export 'n)

(cl:export 'params)

(cffi:defcfun ("gsl_multimin_diff" gsl_multimin_diff) :int
  (f :pointer)
  (x :pointer)
  (g :pointer))

(cl:export 'gsl_multimin_diff)

(cffi:defcstruct gsl_multimin_fminimizer_type
	(name :string)
	(size :pointer)
	(alloc :pointer)
	(set :pointer)
	(iterate :pointer)
	(free :pointer))

(cl:export 'gsl_multimin_fminimizer_type)

(cl:export 'name)

(cl:export 'size)

(cl:export 'alloc)

(cl:export 'set)

(cl:export 'iterate)

(cl:export 'free)

(cffi:defcstruct gsl_multimin_fminimizer
	(type :pointer)
	(f :pointer)
	(fval :double)
	(x :pointer)
	(size :double)
	(state :pointer))

(cl:export 'gsl_multimin_fminimizer)

(cl:export 'type)

(cl:export 'f)

(cl:export 'fval)

(cl:export 'x)

(cl:export 'size)

(cl:export 'state)

(cffi:defcfun ("gsl_multimin_fminimizer_alloc" gsl_multimin_fminimizer_alloc) :pointer
  (t_arg0 :pointer)
  (n :pointer))

(cl:export 'gsl_multimin_fminimizer_alloc)

(cffi:defcfun ("gsl_multimin_fminimizer_set" gsl_multimin_fminimizer_set) :int
  (s :pointer)
  (f :pointer)
  (x :pointer)
  (step_size :pointer))

(cl:export 'gsl_multimin_fminimizer_set)

(cffi:defcfun ("gsl_multimin_fminimizer_free" gsl_multimin_fminimizer_free) :void
  (s :pointer))

(cl:export 'gsl_multimin_fminimizer_free)

(cffi:defcfun ("gsl_multimin_fminimizer_name" gsl_multimin_fminimizer_name) :string
  (s :pointer))

(cl:export 'gsl_multimin_fminimizer_name)

(cffi:defcfun ("gsl_multimin_fminimizer_iterate" gsl_multimin_fminimizer_iterate) :int
  (s :pointer))

(cl:export 'gsl_multimin_fminimizer_iterate)

(cffi:defcfun ("gsl_multimin_fminimizer_x" gsl_multimin_fminimizer_x) :pointer
  (s :pointer))

(cl:export 'gsl_multimin_fminimizer_x)

(cffi:defcfun ("gsl_multimin_fminimizer_minimum" gsl_multimin_fminimizer_minimum) :double
  (s :pointer))

(cl:export 'gsl_multimin_fminimizer_minimum)

(cffi:defcfun ("gsl_multimin_fminimizer_size" gsl_multimin_fminimizer_size) :double
  (s :pointer))

(cl:export 'gsl_multimin_fminimizer_size)

(cffi:defcfun ("gsl_multimin_test_gradient" gsl_multimin_test_gradient) :int
  (g :pointer)
  (epsabs :double))

(cl:export 'gsl_multimin_test_gradient)

(cffi:defcfun ("gsl_multimin_test_size" gsl_multimin_test_size) :int
  (size :double)
  (epsabs :double))

(cl:export 'gsl_multimin_test_size)

(cffi:defcstruct gsl_multimin_fdfminimizer_type
	(name :string)
	(size :pointer)
	(alloc :pointer)
	(set :pointer)
	(iterate :pointer)
	(restart :pointer)
	(free :pointer))

(cl:export 'gsl_multimin_fdfminimizer_type)

(cl:export 'name)

(cl:export 'size)

(cl:export 'alloc)

(cl:export 'set)

(cl:export 'iterate)

(cl:export 'restart)

(cl:export 'free)

(cffi:defcstruct gsl_multimin_fdfminimizer
	(type :pointer)
	(fdf :pointer)
	(f :double)
	(x :pointer)
	(gradient :pointer)
	(dx :pointer)
	(state :pointer))

(cl:export 'gsl_multimin_fdfminimizer)

(cl:export 'type)

(cl:export 'fdf)

(cl:export 'f)

(cl:export 'x)

(cl:export 'gradient)

(cl:export 'dx)

(cl:export 'state)

(cffi:defcfun ("gsl_multimin_fdfminimizer_alloc" gsl_multimin_fdfminimizer_alloc) :pointer
  (t_arg0 :pointer)
  (n :pointer))

(cl:export 'gsl_multimin_fdfminimizer_alloc)

(cffi:defcfun ("gsl_multimin_fdfminimizer_set" gsl_multimin_fdfminimizer_set) :int
  (s :pointer)
  (fdf :pointer)
  (x :pointer)
  (step_size :double)
  (tol :double))

(cl:export 'gsl_multimin_fdfminimizer_set)

(cffi:defcfun ("gsl_multimin_fdfminimizer_free" gsl_multimin_fdfminimizer_free) :void
  (s :pointer))

(cl:export 'gsl_multimin_fdfminimizer_free)

(cffi:defcfun ("gsl_multimin_fdfminimizer_name" gsl_multimin_fdfminimizer_name) :string
  (s :pointer))

(cl:export 'gsl_multimin_fdfminimizer_name)

(cffi:defcfun ("gsl_multimin_fdfminimizer_iterate" gsl_multimin_fdfminimizer_iterate) :int
  (s :pointer))

(cl:export 'gsl_multimin_fdfminimizer_iterate)

(cffi:defcfun ("gsl_multimin_fdfminimizer_restart" gsl_multimin_fdfminimizer_restart) :int
  (s :pointer))

(cl:export 'gsl_multimin_fdfminimizer_restart)

(cffi:defcfun ("gsl_multimin_fdfminimizer_x" gsl_multimin_fdfminimizer_x) :pointer
  (s :pointer))

(cl:export 'gsl_multimin_fdfminimizer_x)

(cffi:defcfun ("gsl_multimin_fdfminimizer_dx" gsl_multimin_fdfminimizer_dx) :pointer
  (s :pointer))

(cl:export 'gsl_multimin_fdfminimizer_dx)

(cffi:defcfun ("gsl_multimin_fdfminimizer_gradient" gsl_multimin_fdfminimizer_gradient) :pointer
  (s :pointer))

(cl:export 'gsl_multimin_fdfminimizer_gradient)

(cffi:defcfun ("gsl_multimin_fdfminimizer_minimum" gsl_multimin_fdfminimizer_minimum) :double
  (s :pointer))

(cl:export 'gsl_multimin_fdfminimizer_minimum)

(cffi:defcvar ("gsl_multimin_fdfminimizer_steepest_descent" gsl_multimin_fdfminimizer_steepest_descent)
 :pointer)

(cl:export 'gsl_multimin_fdfminimizer_steepest_descent)

(cffi:defcvar ("gsl_multimin_fdfminimizer_conjugate_pr" gsl_multimin_fdfminimizer_conjugate_pr)
 :pointer)

(cl:export 'gsl_multimin_fdfminimizer_conjugate_pr)

(cffi:defcvar ("gsl_multimin_fdfminimizer_conjugate_fr" gsl_multimin_fdfminimizer_conjugate_fr)
 :pointer)

(cl:export 'gsl_multimin_fdfminimizer_conjugate_fr)

(cffi:defcvar ("gsl_multimin_fdfminimizer_vector_bfgs" gsl_multimin_fdfminimizer_vector_bfgs)
 :pointer)

(cl:export 'gsl_multimin_fdfminimizer_vector_bfgs)

(cffi:defcvar ("gsl_multimin_fdfminimizer_vector_bfgs2" gsl_multimin_fdfminimizer_vector_bfgs2)
 :pointer)

(cl:export 'gsl_multimin_fdfminimizer_vector_bfgs2)

(cffi:defcvar ("gsl_multimin_fminimizer_nmsimplex" gsl_multimin_fminimizer_nmsimplex)
 :pointer)

(cl:export 'gsl_multimin_fminimizer_nmsimplex)

(cffi:defcvar ("gsl_multimin_fminimizer_nmsimplex2" gsl_multimin_fminimizer_nmsimplex2)
 :pointer)

(cl:export 'gsl_multimin_fminimizer_nmsimplex2)

(cffi:defcvar ("gsl_multimin_fminimizer_nmsimplex2rand" gsl_multimin_fminimizer_nmsimplex2rand)
 :pointer)

(cl:export 'gsl_multimin_fminimizer_nmsimplex2rand)

(cffi:defcstruct gsl_multiset_struct
	(n :pointer)
	(k :pointer)
	(data :pointer))

(cl:export 'gsl_multiset_struct)

(cl:export 'n)

(cl:export 'k)

(cl:export 'data)

(cffi:defcfun ("gsl_multiset_alloc" gsl_multiset_alloc) :pointer
  (n :pointer)
  (k :pointer))

(cl:export 'gsl_multiset_alloc)

(cffi:defcfun ("gsl_multiset_calloc" gsl_multiset_calloc) :pointer
  (n :pointer)
  (k :pointer))

(cl:export 'gsl_multiset_calloc)

(cffi:defcfun ("gsl_multiset_init_first" gsl_multiset_init_first) :void
  (c :pointer))

(cl:export 'gsl_multiset_init_first)

(cffi:defcfun ("gsl_multiset_init_last" gsl_multiset_init_last) :void
  (c :pointer))

(cl:export 'gsl_multiset_init_last)

(cffi:defcfun ("gsl_multiset_free" gsl_multiset_free) :void
  (c :pointer))

(cl:export 'gsl_multiset_free)

(cffi:defcfun ("gsl_multiset_memcpy" gsl_multiset_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_multiset_memcpy)

(cffi:defcfun ("gsl_multiset_fread" gsl_multiset_fread) :int
  (stream :pointer)
  (c :pointer))

(cl:export 'gsl_multiset_fread)

(cffi:defcfun ("gsl_multiset_fwrite" gsl_multiset_fwrite) :int
  (stream :pointer)
  (c :pointer))

(cl:export 'gsl_multiset_fwrite)

(cffi:defcfun ("gsl_multiset_fscanf" gsl_multiset_fscanf) :int
  (stream :pointer)
  (c :pointer))

(cl:export 'gsl_multiset_fscanf)

(cffi:defcfun ("gsl_multiset_fprintf" gsl_multiset_fprintf) :int
  (stream :pointer)
  (c :pointer)
  (format :string))

(cl:export 'gsl_multiset_fprintf)

(cffi:defcfun ("gsl_multiset_n" gsl_multiset_n) :pointer
  (c :pointer))

(cl:export 'gsl_multiset_n)

(cffi:defcfun ("gsl_multiset_k" gsl_multiset_k) :pointer
  (c :pointer))

(cl:export 'gsl_multiset_k)

(cffi:defcfun ("gsl_multiset_data" gsl_multiset_data) :pointer
  (c :pointer))

(cl:export 'gsl_multiset_data)

(cffi:defcfun ("gsl_multiset_valid" gsl_multiset_valid) :int
  (c :pointer))

(cl:export 'gsl_multiset_valid)

(cffi:defcfun ("gsl_multiset_next" gsl_multiset_next) :int
  (c :pointer))

(cl:export 'gsl_multiset_next)

(cffi:defcfun ("gsl_multiset_prev" gsl_multiset_prev) :int
  (c :pointer))

(cl:export 'gsl_multiset_prev)

(cffi:defcfun ("gsl_multiset_get" gsl_multiset_get) :pointer
  (c :pointer)
  (i :pointer))

(cl:export 'gsl_multiset_get)

(cl:defconstant GSL_POSZERO +0.0d0)

(cl:export 'GSL_POSZERO)

(cl:defconstant GSL_NEGZERO -0.0d0)

(cl:export 'GSL_NEGZERO)

(cffi:defcstruct gsl_ntuple
	(file :pointer)
	(ntuple_data :pointer)
	(size :pointer))

(cl:export 'gsl_ntuple)

(cl:export 'file)

(cl:export 'ntuple_data)

(cl:export 'size)

(cffi:defcstruct gsl_ntuple_select_fn
	(function :pointer)
	(params :pointer))

(cl:export 'gsl_ntuple_select_fn)

(cl:export 'function)

(cl:export 'params)

(cffi:defcstruct gsl_ntuple_value_fn
	(function :pointer)
	(params :pointer))

(cl:export 'gsl_ntuple_value_fn)

(cl:export 'function)

(cl:export 'params)

(cffi:defcfun ("gsl_ntuple_open" gsl_ntuple_open) :pointer
  (filename :string)
  (ntuple_data :pointer)
  (size :pointer))

(cl:export 'gsl_ntuple_open)

(cffi:defcfun ("gsl_ntuple_create" gsl_ntuple_create) :pointer
  (filename :string)
  (ntuple_data :pointer)
  (size :pointer))

(cl:export 'gsl_ntuple_create)

(cffi:defcfun ("gsl_ntuple_write" gsl_ntuple_write) :int
  (ntuple :pointer))

(cl:export 'gsl_ntuple_write)

(cffi:defcfun ("gsl_ntuple_read" gsl_ntuple_read) :int
  (ntuple :pointer))

(cl:export 'gsl_ntuple_read)

(cffi:defcfun ("gsl_ntuple_bookdata" gsl_ntuple_bookdata) :int
  (ntuple :pointer))

(cl:export 'gsl_ntuple_bookdata)

(cffi:defcfun ("gsl_ntuple_project" gsl_ntuple_project) :int
  (h :pointer)
  (ntuple :pointer)
  (value_func :pointer)
  (select_func :pointer))

(cl:export 'gsl_ntuple_project)

(cffi:defcfun ("gsl_ntuple_close" gsl_ntuple_close) :int
  (ntuple :pointer))

(cl:export 'gsl_ntuple_close)

(cffi:defcstruct gsl_odeiv_system
	(function :pointer)
	(jacobian :pointer)
	(dimension :pointer)
	(params :pointer))

(cl:export 'gsl_odeiv_system)

(cl:export 'function)

(cl:export 'jacobian)

(cl:export 'dimension)

(cl:export 'params)

(cffi:defcstruct gsl_odeiv_step_type
	(name :string)
	(can_use_dydt_in :int)
	(gives_exact_dydt_out :int)
	(alloc :pointer)
	(apply :pointer)
	(reset :pointer)
	(order :pointer)
	(free :pointer))

(cl:export 'gsl_odeiv_step_type)

(cl:export 'name)

(cl:export 'can_use_dydt_in)

(cl:export 'gives_exact_dydt_out)

(cl:export 'alloc)

(cl:export 'apply)

(cl:export 'reset)

(cl:export 'order)

(cl:export 'free)

(cffi:defcstruct gsl_odeiv_step
	(type :pointer)
	(dimension :pointer)
	(state :pointer))

(cl:export 'gsl_odeiv_step)

(cl:export 'type)

(cl:export 'dimension)

(cl:export 'state)

(cffi:defcvar ("gsl_odeiv_step_rk2" gsl_odeiv_step_rk2)
 :pointer)

(cl:export 'gsl_odeiv_step_rk2)

(cffi:defcvar ("gsl_odeiv_step_rk4" gsl_odeiv_step_rk4)
 :pointer)

(cl:export 'gsl_odeiv_step_rk4)

(cffi:defcvar ("gsl_odeiv_step_rkf45" gsl_odeiv_step_rkf45)
 :pointer)

(cl:export 'gsl_odeiv_step_rkf45)

(cffi:defcvar ("gsl_odeiv_step_rkck" gsl_odeiv_step_rkck)
 :pointer)

(cl:export 'gsl_odeiv_step_rkck)

(cffi:defcvar ("gsl_odeiv_step_rk8pd" gsl_odeiv_step_rk8pd)
 :pointer)

(cl:export 'gsl_odeiv_step_rk8pd)

(cffi:defcvar ("gsl_odeiv_step_rk2imp" gsl_odeiv_step_rk2imp)
 :pointer)

(cl:export 'gsl_odeiv_step_rk2imp)

(cffi:defcvar ("gsl_odeiv_step_rk2simp" gsl_odeiv_step_rk2simp)
 :pointer)

(cl:export 'gsl_odeiv_step_rk2simp)

(cffi:defcvar ("gsl_odeiv_step_rk4imp" gsl_odeiv_step_rk4imp)
 :pointer)

(cl:export 'gsl_odeiv_step_rk4imp)

(cffi:defcvar ("gsl_odeiv_step_bsimp" gsl_odeiv_step_bsimp)
 :pointer)

(cl:export 'gsl_odeiv_step_bsimp)

(cffi:defcvar ("gsl_odeiv_step_gear1" gsl_odeiv_step_gear1)
 :pointer)

(cl:export 'gsl_odeiv_step_gear1)

(cffi:defcvar ("gsl_odeiv_step_gear2" gsl_odeiv_step_gear2)
 :pointer)

(cl:export 'gsl_odeiv_step_gear2)

(cffi:defcfun ("gsl_odeiv_step_alloc" gsl_odeiv_step_alloc) :pointer
  (t_arg0 :pointer)
  (dim :pointer))

(cl:export 'gsl_odeiv_step_alloc)

(cffi:defcfun ("gsl_odeiv_step_reset" gsl_odeiv_step_reset) :int
  (s :pointer))

(cl:export 'gsl_odeiv_step_reset)

(cffi:defcfun ("gsl_odeiv_step_free" gsl_odeiv_step_free) :void
  (s :pointer))

(cl:export 'gsl_odeiv_step_free)

(cffi:defcfun ("gsl_odeiv_step_name" gsl_odeiv_step_name) :string
  (s :pointer))

(cl:export 'gsl_odeiv_step_name)

(cffi:defcfun ("gsl_odeiv_step_order" gsl_odeiv_step_order) :unsigned-int
  (s :pointer))

(cl:export 'gsl_odeiv_step_order)

(cffi:defcfun ("gsl_odeiv_step_apply" gsl_odeiv_step_apply) :int
  (s :pointer)
  (t_arg1 :double)
  (h :double)
  (y :pointer)
  (yerr :pointer)
  (dydt_in :pointer)
  (dydt_out :pointer)
  (dydt :pointer))

(cl:export 'gsl_odeiv_step_apply)

(cffi:defcstruct gsl_odeiv_control_type
	(name :string)
	(alloc :pointer)
	(init :pointer)
	(hadjust :pointer)
	(free :pointer))

(cl:export 'gsl_odeiv_control_type)

(cl:export 'name)

(cl:export 'alloc)

(cl:export 'init)

(cl:export 'hadjust)

(cl:export 'free)

(cffi:defcstruct gsl_odeiv_control
	(type :pointer)
	(state :pointer))

(cl:export 'gsl_odeiv_control)

(cl:export 'type)

(cl:export 'state)

(cl:defconstant GSL_ODEIV_HADJ_INC 1)

(cl:export 'GSL_ODEIV_HADJ_INC)

(cl:defconstant GSL_ODEIV_HADJ_NIL 0)

(cl:export 'GSL_ODEIV_HADJ_NIL)

(cl:defconstant GSL_ODEIV_HADJ_DEC -1)

(cl:export 'GSL_ODEIV_HADJ_DEC)

(cffi:defcfun ("gsl_odeiv_control_alloc" gsl_odeiv_control_alloc) :pointer
  (t_arg0 :pointer))

(cl:export 'gsl_odeiv_control_alloc)

(cffi:defcfun ("gsl_odeiv_control_init" gsl_odeiv_control_init) :int
  (c :pointer)
  (eps_abs :double)
  (eps_rel :double)
  (a_y :double)
  (a_dydt :double))

(cl:export 'gsl_odeiv_control_init)

(cffi:defcfun ("gsl_odeiv_control_free" gsl_odeiv_control_free) :void
  (c :pointer))

(cl:export 'gsl_odeiv_control_free)

(cffi:defcfun ("gsl_odeiv_control_hadjust" gsl_odeiv_control_hadjust) :int
  (c :pointer)
  (s :pointer)
  (y :pointer)
  (yerr :pointer)
  (dydt :pointer)
  (h :pointer))

(cl:export 'gsl_odeiv_control_hadjust)

(cffi:defcfun ("gsl_odeiv_control_name" gsl_odeiv_control_name) :string
  (c :pointer))

(cl:export 'gsl_odeiv_control_name)

(cffi:defcfun ("gsl_odeiv_control_standard_new" gsl_odeiv_control_standard_new) :pointer
  (eps_abs :double)
  (eps_rel :double)
  (a_y :double)
  (a_dydt :double))

(cl:export 'gsl_odeiv_control_standard_new)

(cffi:defcfun ("gsl_odeiv_control_y_new" gsl_odeiv_control_y_new) :pointer
  (eps_abs :double)
  (eps_rel :double))

(cl:export 'gsl_odeiv_control_y_new)

(cffi:defcfun ("gsl_odeiv_control_yp_new" gsl_odeiv_control_yp_new) :pointer
  (eps_abs :double)
  (eps_rel :double))

(cl:export 'gsl_odeiv_control_yp_new)

(cffi:defcfun ("gsl_odeiv_control_scaled_new" gsl_odeiv_control_scaled_new) :pointer
  (eps_abs :double)
  (eps_rel :double)
  (a_y :double)
  (a_dydt :double)
  (scale_abs :pointer)
  (dim :pointer))

(cl:export 'gsl_odeiv_control_scaled_new)

(cffi:defcstruct gsl_odeiv_evolve
	(dimension :pointer)
	(y0 :pointer)
	(yerr :pointer)
	(dydt_in :pointer)
	(dydt_out :pointer)
	(last_step :double)
	(count :unsigned-long)
	(failed_steps :unsigned-long))

(cl:export 'gsl_odeiv_evolve)

(cl:export 'dimension)

(cl:export 'y0)

(cl:export 'yerr)

(cl:export 'dydt_in)

(cl:export 'dydt_out)

(cl:export 'last_step)

(cl:export 'count)

(cl:export 'failed_steps)

(cffi:defcfun ("gsl_odeiv_evolve_alloc" gsl_odeiv_evolve_alloc) :pointer
  (dim :pointer))

(cl:export 'gsl_odeiv_evolve_alloc)

(cffi:defcfun ("gsl_odeiv_evolve_apply" gsl_odeiv_evolve_apply) :int
  (e :pointer)
  (con :pointer)
  (step :pointer)
  (dydt :pointer)
  (t_arg4 :pointer)
  (t1 :double)
  (h :pointer)
  (y :pointer))

(cl:export 'gsl_odeiv_evolve_apply)

(cffi:defcfun ("gsl_odeiv_evolve_reset" gsl_odeiv_evolve_reset) :int
  (e :pointer))

(cl:export 'gsl_odeiv_evolve_reset)

(cffi:defcfun ("gsl_odeiv_evolve_free" gsl_odeiv_evolve_free) :void
  (e :pointer))

(cl:export 'gsl_odeiv_evolve_free)

(cffi:defcstruct gsl_odeiv2_system
	(function :pointer)
	(jacobian :pointer)
	(dimension :pointer)
	(params :pointer))

(cl:export 'gsl_odeiv2_system)

(cl:export 'function)

(cl:export 'jacobian)

(cl:export 'dimension)

(cl:export 'params)

(cffi:defcstruct gsl_odeiv2_step_type
	(name :string)
	(can_use_dydt_in :int)
	(gives_exact_dydt_out :int)
	(alloc :pointer)
	(apply :pointer)
	(set_driver :pointer)
	(reset :pointer)
	(order :pointer)
	(free :pointer))

(cl:export 'gsl_odeiv2_step_type)

(cl:export 'name)

(cl:export 'can_use_dydt_in)

(cl:export 'gives_exact_dydt_out)

(cl:export 'alloc)

(cl:export 'apply)

(cl:export 'set_driver)

(cl:export 'reset)

(cl:export 'order)

(cl:export 'free)

(cffi:defcstruct gsl_odeiv2_step_struct
	(type :pointer)
	(dimension :pointer)
	(state :pointer))

(cl:export 'gsl_odeiv2_step_struct)

(cl:export 'type)

(cl:export 'dimension)

(cl:export 'state)

(cffi:defcvar ("gsl_odeiv2_step_rk2" gsl_odeiv2_step_rk2)
 :pointer)

(cl:export 'gsl_odeiv2_step_rk2)

(cffi:defcvar ("gsl_odeiv2_step_rk4" gsl_odeiv2_step_rk4)
 :pointer)

(cl:export 'gsl_odeiv2_step_rk4)

(cffi:defcvar ("gsl_odeiv2_step_rkf45" gsl_odeiv2_step_rkf45)
 :pointer)

(cl:export 'gsl_odeiv2_step_rkf45)

(cffi:defcvar ("gsl_odeiv2_step_rkck" gsl_odeiv2_step_rkck)
 :pointer)

(cl:export 'gsl_odeiv2_step_rkck)

(cffi:defcvar ("gsl_odeiv2_step_rk8pd" gsl_odeiv2_step_rk8pd)
 :pointer)

(cl:export 'gsl_odeiv2_step_rk8pd)

(cffi:defcvar ("gsl_odeiv2_step_rk2imp" gsl_odeiv2_step_rk2imp)
 :pointer)

(cl:export 'gsl_odeiv2_step_rk2imp)

(cffi:defcvar ("gsl_odeiv2_step_rk4imp" gsl_odeiv2_step_rk4imp)
 :pointer)

(cl:export 'gsl_odeiv2_step_rk4imp)

(cffi:defcvar ("gsl_odeiv2_step_bsimp" gsl_odeiv2_step_bsimp)
 :pointer)

(cl:export 'gsl_odeiv2_step_bsimp)

(cffi:defcvar ("gsl_odeiv2_step_rk1imp" gsl_odeiv2_step_rk1imp)
 :pointer)

(cl:export 'gsl_odeiv2_step_rk1imp)

(cffi:defcvar ("gsl_odeiv2_step_msadams" gsl_odeiv2_step_msadams)
 :pointer)

(cl:export 'gsl_odeiv2_step_msadams)

(cffi:defcvar ("gsl_odeiv2_step_msbdf" gsl_odeiv2_step_msbdf)
 :pointer)

(cl:export 'gsl_odeiv2_step_msbdf)

(cffi:defcfun ("gsl_odeiv2_step_alloc" gsl_odeiv2_step_alloc) :pointer
  (t_arg0 :pointer)
  (dim :pointer))

(cl:export 'gsl_odeiv2_step_alloc)

(cffi:defcfun ("gsl_odeiv2_step_reset" gsl_odeiv2_step_reset) :int
  (s :pointer))

(cl:export 'gsl_odeiv2_step_reset)

(cffi:defcfun ("gsl_odeiv2_step_free" gsl_odeiv2_step_free) :void
  (s :pointer))

(cl:export 'gsl_odeiv2_step_free)

(cffi:defcfun ("gsl_odeiv2_step_name" gsl_odeiv2_step_name) :string
  (s :pointer))

(cl:export 'gsl_odeiv2_step_name)

(cffi:defcfun ("gsl_odeiv2_step_order" gsl_odeiv2_step_order) :unsigned-int
  (s :pointer))

(cl:export 'gsl_odeiv2_step_order)

(cffi:defcfun ("gsl_odeiv2_step_apply" gsl_odeiv2_step_apply) :int
  (s :pointer)
  (t_arg1 :double)
  (h :double)
  (y :pointer)
  (yerr :pointer)
  (dydt_in :pointer)
  (dydt_out :pointer)
  (dydt :pointer))

(cl:export 'gsl_odeiv2_step_apply)

(cffi:defcfun ("gsl_odeiv2_step_set_driver" gsl_odeiv2_step_set_driver) :int
  (s :pointer)
  (d :pointer))

(cl:export 'gsl_odeiv2_step_set_driver)

(cffi:defcstruct gsl_odeiv2_control_type
	(name :string)
	(alloc :pointer)
	(init :pointer)
	(hadjust :pointer)
	(errlevel :pointer)
	(set_driver :pointer)
	(free :pointer))

(cl:export 'gsl_odeiv2_control_type)

(cl:export 'name)

(cl:export 'alloc)

(cl:export 'init)

(cl:export 'hadjust)

(cl:export 'errlevel)

(cl:export 'set_driver)

(cl:export 'free)

(cffi:defcstruct gsl_odeiv2_control_struct
	(type :pointer)
	(state :pointer))

(cl:export 'gsl_odeiv2_control_struct)

(cl:export 'type)

(cl:export 'state)

(cffi:defcfun ("gsl_odeiv2_control_alloc" gsl_odeiv2_control_alloc) :pointer
  (t_arg0 :pointer))

(cl:export 'gsl_odeiv2_control_alloc)

(cffi:defcfun ("gsl_odeiv2_control_init" gsl_odeiv2_control_init) :int
  (c :pointer)
  (eps_abs :double)
  (eps_rel :double)
  (a_y :double)
  (a_dydt :double))

(cl:export 'gsl_odeiv2_control_init)

(cffi:defcfun ("gsl_odeiv2_control_free" gsl_odeiv2_control_free) :void
  (c :pointer))

(cl:export 'gsl_odeiv2_control_free)

(cffi:defcfun ("gsl_odeiv2_control_hadjust" gsl_odeiv2_control_hadjust) :int
  (c :pointer)
  (s :pointer)
  (y :pointer)
  (yerr :pointer)
  (dydt :pointer)
  (h :pointer))

(cl:export 'gsl_odeiv2_control_hadjust)

(cffi:defcfun ("gsl_odeiv2_control_name" gsl_odeiv2_control_name) :string
  (c :pointer))

(cl:export 'gsl_odeiv2_control_name)

(cffi:defcfun ("gsl_odeiv2_control_errlevel" gsl_odeiv2_control_errlevel) :int
  (c :pointer)
  (y :double)
  (dydt :double)
  (h :double)
  (ind :pointer)
  (errlev :pointer))

(cl:export 'gsl_odeiv2_control_errlevel)

(cffi:defcfun ("gsl_odeiv2_control_set_driver" gsl_odeiv2_control_set_driver) :int
  (c :pointer)
  (d :pointer))

(cl:export 'gsl_odeiv2_control_set_driver)

(cffi:defcfun ("gsl_odeiv2_control_standard_new" gsl_odeiv2_control_standard_new) :pointer
  (eps_abs :double)
  (eps_rel :double)
  (a_y :double)
  (a_dydt :double))

(cl:export 'gsl_odeiv2_control_standard_new)

(cffi:defcfun ("gsl_odeiv2_control_y_new" gsl_odeiv2_control_y_new) :pointer
  (eps_abs :double)
  (eps_rel :double))

(cl:export 'gsl_odeiv2_control_y_new)

(cffi:defcfun ("gsl_odeiv2_control_yp_new" gsl_odeiv2_control_yp_new) :pointer
  (eps_abs :double)
  (eps_rel :double))

(cl:export 'gsl_odeiv2_control_yp_new)

(cffi:defcfun ("gsl_odeiv2_control_scaled_new" gsl_odeiv2_control_scaled_new) :pointer
  (eps_abs :double)
  (eps_rel :double)
  (a_y :double)
  (a_dydt :double)
  (scale_abs :pointer)
  (dim :pointer))

(cl:export 'gsl_odeiv2_control_scaled_new)

(cffi:defcstruct gsl_odeiv2_evolve_struct
	(dimension :pointer)
	(y0 :pointer)
	(yerr :pointer)
	(dydt_in :pointer)
	(dydt_out :pointer)
	(last_step :double)
	(count :unsigned-long)
	(failed_steps :unsigned-long)
	(driver :pointer))

(cl:export 'gsl_odeiv2_evolve_struct)

(cl:export 'dimension)

(cl:export 'y0)

(cl:export 'yerr)

(cl:export 'dydt_in)

(cl:export 'dydt_out)

(cl:export 'last_step)

(cl:export 'count)

(cl:export 'failed_steps)

(cl:export 'driver)

(cffi:defcfun ("gsl_odeiv2_evolve_alloc" gsl_odeiv2_evolve_alloc) :pointer
  (dim :pointer))

(cl:export 'gsl_odeiv2_evolve_alloc)

(cffi:defcfun ("gsl_odeiv2_evolve_apply" gsl_odeiv2_evolve_apply) :int
  (e :pointer)
  (con :pointer)
  (step :pointer)
  (dydt :pointer)
  (t_arg4 :pointer)
  (t1 :double)
  (h :pointer)
  (y :pointer))

(cl:export 'gsl_odeiv2_evolve_apply)

(cffi:defcfun ("gsl_odeiv2_evolve_apply_fixed_step" gsl_odeiv2_evolve_apply_fixed_step) :int
  (e :pointer)
  (con :pointer)
  (step :pointer)
  (dydt :pointer)
  (t_arg4 :pointer)
  (h0 :double)
  (y :pointer))

(cl:export 'gsl_odeiv2_evolve_apply_fixed_step)

(cffi:defcfun ("gsl_odeiv2_evolve_reset" gsl_odeiv2_evolve_reset) :int
  (e :pointer))

(cl:export 'gsl_odeiv2_evolve_reset)

(cffi:defcfun ("gsl_odeiv2_evolve_free" gsl_odeiv2_evolve_free) :void
  (e :pointer))

(cl:export 'gsl_odeiv2_evolve_free)

(cffi:defcfun ("gsl_odeiv2_evolve_set_driver" gsl_odeiv2_evolve_set_driver) :int
  (e :pointer)
  (d :pointer))

(cl:export 'gsl_odeiv2_evolve_set_driver)

(cffi:defcstruct gsl_odeiv2_driver_struct
	(sys :pointer)
	(s :pointer)
	(c :pointer)
	(e :pointer)
	(h :double)
	(hmin :double)
	(hmax :double)
	(n :unsigned-long)
	(nmax :unsigned-long))

(cl:export 'gsl_odeiv2_driver_struct)

(cl:export 'sys)

(cl:export 's)

(cl:export 'c)

(cl:export 'e)

(cl:export 'h)

(cl:export 'hmin)

(cl:export 'hmax)

(cl:export 'n)

(cl:export 'nmax)

(cffi:defcfun ("gsl_odeiv2_driver_alloc_y_new" gsl_odeiv2_driver_alloc_y_new) :pointer
  (sys :pointer)
  (t_arg1 :pointer)
  (hstart :double)
  (epsabs :double)
  (epsrel :double))

(cl:export 'gsl_odeiv2_driver_alloc_y_new)

(cffi:defcfun ("gsl_odeiv2_driver_alloc_yp_new" gsl_odeiv2_driver_alloc_yp_new) :pointer
  (sys :pointer)
  (t_arg1 :pointer)
  (hstart :double)
  (epsabs :double)
  (epsrel :double))

(cl:export 'gsl_odeiv2_driver_alloc_yp_new)

(cffi:defcfun ("gsl_odeiv2_driver_alloc_scaled_new" gsl_odeiv2_driver_alloc_scaled_new) :pointer
  (sys :pointer)
  (t_arg1 :pointer)
  (hstart :double)
  (epsabs :double)
  (epsrel :double)
  (a_y :double)
  (a_dydt :double)
  (scale_abs :pointer))

(cl:export 'gsl_odeiv2_driver_alloc_scaled_new)

(cffi:defcfun ("gsl_odeiv2_driver_alloc_standard_new" gsl_odeiv2_driver_alloc_standard_new) :pointer
  (sys :pointer)
  (t_arg1 :pointer)
  (hstart :double)
  (epsabs :double)
  (epsrel :double)
  (a_y :double)
  (a_dydt :double))

(cl:export 'gsl_odeiv2_driver_alloc_standard_new)

(cffi:defcfun ("gsl_odeiv2_driver_set_hmin" gsl_odeiv2_driver_set_hmin) :int
  (d :pointer)
  (hmin :double))

(cl:export 'gsl_odeiv2_driver_set_hmin)

(cffi:defcfun ("gsl_odeiv2_driver_set_hmax" gsl_odeiv2_driver_set_hmax) :int
  (d :pointer)
  (hmax :double))

(cl:export 'gsl_odeiv2_driver_set_hmax)

(cffi:defcfun ("gsl_odeiv2_driver_set_nmax" gsl_odeiv2_driver_set_nmax) :int
  (d :pointer)
  (nmax :unsigned-long))

(cl:export 'gsl_odeiv2_driver_set_nmax)

(cffi:defcfun ("gsl_odeiv2_driver_apply" gsl_odeiv2_driver_apply) :int
  (d :pointer)
  (t_arg1 :pointer)
  (t1 :double)
  (y :pointer))

(cl:export 'gsl_odeiv2_driver_apply)

(cffi:defcfun ("gsl_odeiv2_driver_apply_fixed_step" gsl_odeiv2_driver_apply_fixed_step) :int
  (d :pointer)
  (t_arg1 :pointer)
  (h :double)
  (n :unsigned-long)
  (y :pointer))

(cl:export 'gsl_odeiv2_driver_apply_fixed_step)

(cffi:defcfun ("gsl_odeiv2_driver_reset" gsl_odeiv2_driver_reset) :int
  (d :pointer))

(cl:export 'gsl_odeiv2_driver_reset)

(cffi:defcfun ("gsl_odeiv2_driver_reset_hstart" gsl_odeiv2_driver_reset_hstart) :int
  (d :pointer)
  (hstart :double))

(cl:export 'gsl_odeiv2_driver_reset_hstart)

(cffi:defcfun ("gsl_odeiv2_driver_free" gsl_odeiv2_driver_free) :void
  (state :pointer))

(cl:export 'gsl_odeiv2_driver_free)

(cffi:defcstruct gsl_permutation_struct
	(size :pointer)
	(data :pointer))

(cl:export 'gsl_permutation_struct)

(cl:export 'size)

(cl:export 'data)

(cffi:defcfun ("gsl_permutation_alloc" gsl_permutation_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_permutation_alloc)

(cffi:defcfun ("gsl_permutation_calloc" gsl_permutation_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_permutation_calloc)

(cffi:defcfun ("gsl_permutation_init" gsl_permutation_init) :void
  (p :pointer))

(cl:export 'gsl_permutation_init)

(cffi:defcfun ("gsl_permutation_free" gsl_permutation_free) :void
  (p :pointer))

(cl:export 'gsl_permutation_free)

(cffi:defcfun ("gsl_permutation_memcpy" gsl_permutation_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_permutation_memcpy)

(cffi:defcfun ("gsl_permutation_fread" gsl_permutation_fread) :int
  (stream :pointer)
  (p :pointer))

(cl:export 'gsl_permutation_fread)

(cffi:defcfun ("gsl_permutation_fwrite" gsl_permutation_fwrite) :int
  (stream :pointer)
  (p :pointer))

(cl:export 'gsl_permutation_fwrite)

(cffi:defcfun ("gsl_permutation_fscanf" gsl_permutation_fscanf) :int
  (stream :pointer)
  (p :pointer))

(cl:export 'gsl_permutation_fscanf)

(cffi:defcfun ("gsl_permutation_fprintf" gsl_permutation_fprintf) :int
  (stream :pointer)
  (p :pointer)
  (format :string))

(cl:export 'gsl_permutation_fprintf)

(cffi:defcfun ("gsl_permutation_size" gsl_permutation_size) :pointer
  (p :pointer))

(cl:export 'gsl_permutation_size)

(cffi:defcfun ("gsl_permutation_data" gsl_permutation_data) :pointer
  (p :pointer))

(cl:export 'gsl_permutation_data)

(cffi:defcfun ("gsl_permutation_swap" gsl_permutation_swap) :int
  (p :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_permutation_swap)

(cffi:defcfun ("gsl_permutation_valid" gsl_permutation_valid) :int
  (p :pointer))

(cl:export 'gsl_permutation_valid)

(cffi:defcfun ("gsl_permutation_reverse" gsl_permutation_reverse) :void
  (p :pointer))

(cl:export 'gsl_permutation_reverse)

(cffi:defcfun ("gsl_permutation_inverse" gsl_permutation_inverse) :int
  (inv :pointer)
  (p :pointer))

(cl:export 'gsl_permutation_inverse)

(cffi:defcfun ("gsl_permutation_next" gsl_permutation_next) :int
  (p :pointer))

(cl:export 'gsl_permutation_next)

(cffi:defcfun ("gsl_permutation_prev" gsl_permutation_prev) :int
  (p :pointer))

(cl:export 'gsl_permutation_prev)

(cffi:defcfun ("gsl_permutation_mul" gsl_permutation_mul) :int
  (p :pointer)
  (pa :pointer)
  (pb :pointer))

(cl:export 'gsl_permutation_mul)

(cffi:defcfun ("gsl_permutation_linear_to_canonical" gsl_permutation_linear_to_canonical) :int
  (q :pointer)
  (p :pointer))

(cl:export 'gsl_permutation_linear_to_canonical)

(cffi:defcfun ("gsl_permutation_canonical_to_linear" gsl_permutation_canonical_to_linear) :int
  (p :pointer)
  (q :pointer))

(cl:export 'gsl_permutation_canonical_to_linear)

(cffi:defcfun ("gsl_permutation_inversions" gsl_permutation_inversions) :pointer
  (p :pointer))

(cl:export 'gsl_permutation_inversions)

(cffi:defcfun ("gsl_permutation_linear_cycles" gsl_permutation_linear_cycles) :pointer
  (p :pointer))

(cl:export 'gsl_permutation_linear_cycles)

(cffi:defcfun ("gsl_permutation_canonical_cycles" gsl_permutation_canonical_cycles) :pointer
  (q :pointer))

(cl:export 'gsl_permutation_canonical_cycles)

(cffi:defcfun ("gsl_permutation_get" gsl_permutation_get) :pointer
  (p :pointer)
  (i :pointer))

(cl:export 'gsl_permutation_get)

(cffi:defcfun ("gsl_permute_char" gsl_permute_char) :int
  (p :pointer)
  (data :string)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_char)

(cffi:defcfun ("gsl_permute_char_inverse" gsl_permute_char_inverse) :int
  (p :pointer)
  (data :string)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_char_inverse)

(cffi:defcfun ("gsl_permute_complex" gsl_permute_complex) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_complex)

(cffi:defcfun ("gsl_permute_complex_inverse" gsl_permute_complex_inverse) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_complex_inverse)

(cffi:defcfun ("gsl_permute_complex_float" gsl_permute_complex_float) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_complex_float)

(cffi:defcfun ("gsl_permute_complex_float_inverse" gsl_permute_complex_float_inverse) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_complex_float_inverse)

(cffi:defcfun ("gsl_permute_complex_long_double" gsl_permute_complex_long_double) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_complex_long_double)

(cffi:defcfun ("gsl_permute_complex_long_double_inverse" gsl_permute_complex_long_double_inverse) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_complex_long_double_inverse)

(cffi:defcfun ("gsl_permute" gsl_permute) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute)

(cffi:defcfun ("gsl_permute_inverse" gsl_permute_inverse) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_inverse)

(cffi:defcfun ("gsl_permute_float" gsl_permute_float) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_float)

(cffi:defcfun ("gsl_permute_float_inverse" gsl_permute_float_inverse) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_float_inverse)

(cffi:defcfun ("gsl_permute_int" gsl_permute_int) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_int)

(cffi:defcfun ("gsl_permute_int_inverse" gsl_permute_int_inverse) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_int_inverse)

(cffi:defcfun ("gsl_permute_long" gsl_permute_long) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_long)

(cffi:defcfun ("gsl_permute_long_inverse" gsl_permute_long_inverse) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_long_inverse)

(cffi:defcfun ("gsl_permute_long_double" gsl_permute_long_double) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_long_double)

(cffi:defcfun ("gsl_permute_long_double_inverse" gsl_permute_long_double_inverse) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_long_double_inverse)

(cffi:defcfun ("gsl_permute_short" gsl_permute_short) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_short)

(cffi:defcfun ("gsl_permute_short_inverse" gsl_permute_short_inverse) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_short_inverse)

(cffi:defcfun ("gsl_permute_uchar" gsl_permute_uchar) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_uchar)

(cffi:defcfun ("gsl_permute_uchar_inverse" gsl_permute_uchar_inverse) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_uchar_inverse)

(cffi:defcfun ("gsl_permute_uint" gsl_permute_uint) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_uint)

(cffi:defcfun ("gsl_permute_uint_inverse" gsl_permute_uint_inverse) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_uint_inverse)

(cffi:defcfun ("gsl_permute_ulong" gsl_permute_ulong) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_ulong)

(cffi:defcfun ("gsl_permute_ulong_inverse" gsl_permute_ulong_inverse) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_ulong_inverse)

(cffi:defcfun ("gsl_permute_ushort" gsl_permute_ushort) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_ushort)

(cffi:defcfun ("gsl_permute_ushort_inverse" gsl_permute_ushort_inverse) :int
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_permute_ushort_inverse)

(cffi:defcfun ("gsl_permute_vector_char" gsl_permute_vector_char) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_char)

(cffi:defcfun ("gsl_permute_vector_char_inverse" gsl_permute_vector_char_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_char_inverse)

(cffi:defcfun ("gsl_permute_vector_complex" gsl_permute_vector_complex) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_complex)

(cffi:defcfun ("gsl_permute_vector_complex_inverse" gsl_permute_vector_complex_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_complex_inverse)

(cffi:defcfun ("gsl_permute_vector_complex_float" gsl_permute_vector_complex_float) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_complex_float)

(cffi:defcfun ("gsl_permute_vector_complex_float_inverse" gsl_permute_vector_complex_float_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_complex_float_inverse)

(cffi:defcfun ("gsl_permute_vector_complex_long_double" gsl_permute_vector_complex_long_double) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_complex_long_double)

(cffi:defcfun ("gsl_permute_vector_complex_long_double_inverse" gsl_permute_vector_complex_long_double_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_complex_long_double_inverse)

(cffi:defcfun ("gsl_permute_vector" gsl_permute_vector) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector)

(cffi:defcfun ("gsl_permute_vector_inverse" gsl_permute_vector_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_inverse)

(cffi:defcfun ("gsl_permute_vector_float" gsl_permute_vector_float) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_float)

(cffi:defcfun ("gsl_permute_vector_float_inverse" gsl_permute_vector_float_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_float_inverse)

(cffi:defcfun ("gsl_permute_vector_int" gsl_permute_vector_int) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_int)

(cffi:defcfun ("gsl_permute_vector_int_inverse" gsl_permute_vector_int_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_int_inverse)

(cffi:defcfun ("gsl_permute_vector_long" gsl_permute_vector_long) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_long)

(cffi:defcfun ("gsl_permute_vector_long_inverse" gsl_permute_vector_long_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_long_inverse)

(cffi:defcfun ("gsl_permute_vector_long_double" gsl_permute_vector_long_double) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_long_double)

(cffi:defcfun ("gsl_permute_vector_long_double_inverse" gsl_permute_vector_long_double_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_long_double_inverse)

(cffi:defcfun ("gsl_permute_vector_short" gsl_permute_vector_short) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_short)

(cffi:defcfun ("gsl_permute_vector_short_inverse" gsl_permute_vector_short_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_short_inverse)

(cffi:defcfun ("gsl_permute_vector_uchar" gsl_permute_vector_uchar) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_uchar)

(cffi:defcfun ("gsl_permute_vector_uchar_inverse" gsl_permute_vector_uchar_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_uchar_inverse)

(cffi:defcfun ("gsl_permute_vector_uint" gsl_permute_vector_uint) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_uint)

(cffi:defcfun ("gsl_permute_vector_uint_inverse" gsl_permute_vector_uint_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_uint_inverse)

(cffi:defcfun ("gsl_permute_vector_ulong" gsl_permute_vector_ulong) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_ulong)

(cffi:defcfun ("gsl_permute_vector_ulong_inverse" gsl_permute_vector_ulong_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_ulong_inverse)

(cffi:defcfun ("gsl_permute_vector_ushort" gsl_permute_vector_ushort) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_ushort)

(cffi:defcfun ("gsl_permute_vector_ushort_inverse" gsl_permute_vector_ushort_inverse) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_permute_vector_ushort_inverse)

(cffi:defcfun ("gsl_poly_eval" gsl_poly_eval) :double
  (c :pointer)
  (len :int)
  (x :double))

(cl:export 'gsl_poly_eval)

(cffi:defcfun ("gsl_poly_complex_eval" gsl_poly_complex_eval) gsl_complex
  (c :pointer)
  (len :int)
  (z gsl_complex))

(cl:export 'gsl_poly_complex_eval)

(cffi:defcfun ("gsl_complex_poly_complex_eval" gsl_complex_poly_complex_eval) gsl_complex
  (c :pointer)
  (len :int)
  (z gsl_complex))

(cl:export 'gsl_complex_poly_complex_eval)

(cffi:defcfun ("gsl_poly_eval_derivs" gsl_poly_eval_derivs) :int
  (c :pointer)
  (lenc :pointer)
  (x :double)
  (res :pointer)
  (lenres :pointer))

(cl:export 'gsl_poly_eval_derivs)

(cffi:defcfun ("gsl_poly_dd_init" gsl_poly_dd_init) :int
  (dd :pointer)
  (x :pointer)
  (y :pointer)
  (size :pointer))

(cl:export 'gsl_poly_dd_init)

(cffi:defcfun ("gsl_poly_dd_eval" gsl_poly_dd_eval) :double
  (dd :pointer)
  (xa :pointer)
  (size :pointer)
  (x :double))

(cl:export 'gsl_poly_dd_eval)

(cffi:defcfun ("gsl_poly_dd_taylor" gsl_poly_dd_taylor) :int
  (c :pointer)
  (xp :double)
  (dd :pointer)
  (x :pointer)
  (size :pointer)
  (w :pointer))

(cl:export 'gsl_poly_dd_taylor)

(cffi:defcfun ("gsl_poly_dd_hermite_init" gsl_poly_dd_hermite_init) :int
  (dd :pointer)
  (z :pointer)
  (xa :pointer)
  (ya :pointer)
  (dya :pointer)
  (size :pointer))

(cl:export 'gsl_poly_dd_hermite_init)

(cffi:defcfun ("gsl_poly_solve_quadratic" gsl_poly_solve_quadratic) :int
  (a :double)
  (b :double)
  (c :double)
  (x0 :pointer)
  (x1 :pointer))

(cl:export 'gsl_poly_solve_quadratic)

(cffi:defcfun ("gsl_poly_complex_solve_quadratic" gsl_poly_complex_solve_quadratic) :int
  (a :double)
  (b :double)
  (c :double)
  (z0 :pointer)
  (z1 :pointer))

(cl:export 'gsl_poly_complex_solve_quadratic)

(cffi:defcfun ("gsl_poly_solve_cubic" gsl_poly_solve_cubic) :int
  (a :double)
  (b :double)
  (c :double)
  (x0 :pointer)
  (x1 :pointer)
  (x2 :pointer))

(cl:export 'gsl_poly_solve_cubic)

(cffi:defcfun ("gsl_poly_complex_solve_cubic" gsl_poly_complex_solve_cubic) :int
  (a :double)
  (b :double)
  (c :double)
  (z0 :pointer)
  (z1 :pointer)
  (z2 :pointer))

(cl:export 'gsl_poly_complex_solve_cubic)

(cffi:defcstruct gsl_poly_complex_workspace
	(nc :pointer)
	(matrix :pointer))

(cl:export 'gsl_poly_complex_workspace)

(cl:export 'nc)

(cl:export 'matrix)

(cffi:defcfun ("gsl_poly_complex_workspace_alloc" gsl_poly_complex_workspace_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_poly_complex_workspace_alloc)

(cffi:defcfun ("gsl_poly_complex_workspace_free" gsl_poly_complex_workspace_free) :void
  (w :pointer))

(cl:export 'gsl_poly_complex_workspace_free)

(cffi:defcfun ("gsl_poly_complex_solve" gsl_poly_complex_solve) :int
  (a :pointer)
  (n :pointer)
  (w :pointer)
  (z :pointer))

(cl:export 'gsl_poly_complex_solve)

(cffi:defcfun ("gsl_pow_2" gsl_pow_2) :double
  (x :double))

(cl:export 'gsl_pow_2)

(cffi:defcfun ("gsl_pow_3" gsl_pow_3) :double
  (x :double))

(cl:export 'gsl_pow_3)

(cffi:defcfun ("gsl_pow_4" gsl_pow_4) :double
  (x :double))

(cl:export 'gsl_pow_4)

(cffi:defcfun ("gsl_pow_5" gsl_pow_5) :double
  (x :double))

(cl:export 'gsl_pow_5)

(cffi:defcfun ("gsl_pow_6" gsl_pow_6) :double
  (x :double))

(cl:export 'gsl_pow_6)

(cffi:defcfun ("gsl_pow_7" gsl_pow_7) :double
  (x :double))

(cl:export 'gsl_pow_7)

(cffi:defcfun ("gsl_pow_8" gsl_pow_8) :double
  (x :double))

(cl:export 'gsl_pow_8)

(cffi:defcfun ("gsl_pow_9" gsl_pow_9) :double
  (x :double))

(cl:export 'gsl_pow_9)

(cffi:defcfun ("gsl_pow_int" gsl_pow_int) :double
  (x :double)
  (n :int))

(cl:export 'gsl_pow_int)

(cffi:defcfun ("gsl_pow_uint" gsl_pow_uint) :double
  (x :double)
  (n :unsigned-int))

(cl:export 'gsl_pow_uint)

(cl:defconstant _GSL_PREC_T_NUM 3)

(cl:export '_GSL_PREC_T_NUM)

(cffi:defcvar ("gsl_prec_eps" gsl_prec_eps)
 :pointer)

(cl:export 'gsl_prec_eps)

(cffi:defcvar ("gsl_prec_sqrt_eps" gsl_prec_sqrt_eps)
 :pointer)

(cl:export 'gsl_prec_sqrt_eps)

(cffi:defcvar ("gsl_prec_root3_eps" gsl_prec_root3_eps)
 :pointer)

(cl:export 'gsl_prec_root3_eps)

(cffi:defcvar ("gsl_prec_root4_eps" gsl_prec_root4_eps)
 :pointer)

(cl:export 'gsl_prec_root4_eps)

(cffi:defcvar ("gsl_prec_root5_eps" gsl_prec_root5_eps)
 :pointer)

(cl:export 'gsl_prec_root5_eps)

(cffi:defcvar ("gsl_prec_root6_eps" gsl_prec_root6_eps)
 :pointer)

(cl:export 'gsl_prec_root6_eps)

(cffi:defcstruct gsl_qrng_type
	(name :string)
	(max_dimension :unsigned-int)
	(state_size :pointer)
	(init_state :pointer)
	(get :pointer))

(cl:export 'gsl_qrng_type)

(cl:export 'name)

(cl:export 'max_dimension)

(cl:export 'state_size)

(cl:export 'init_state)

(cl:export 'get)

(cffi:defcstruct gsl_qrng
	(type :pointer)
	(dimension :unsigned-int)
	(state_size :pointer)
	(state :pointer))

(cl:export 'gsl_qrng)

(cl:export 'type)

(cl:export 'dimension)

(cl:export 'state_size)

(cl:export 'state)

(cffi:defcvar ("gsl_qrng_niederreiter_2" gsl_qrng_niederreiter_2)
 :pointer)

(cl:export 'gsl_qrng_niederreiter_2)

(cffi:defcvar ("gsl_qrng_sobol" gsl_qrng_sobol)
 :pointer)

(cl:export 'gsl_qrng_sobol)

(cffi:defcvar ("gsl_qrng_halton" gsl_qrng_halton)
 :pointer)

(cl:export 'gsl_qrng_halton)

(cffi:defcvar ("gsl_qrng_reversehalton" gsl_qrng_reversehalton)
 :pointer)

(cl:export 'gsl_qrng_reversehalton)

(cffi:defcfun ("gsl_qrng_alloc" gsl_qrng_alloc) :pointer
  (t_arg0 :pointer)
  (dimension :unsigned-int))

(cl:export 'gsl_qrng_alloc)

(cffi:defcfun ("gsl_qrng_memcpy" gsl_qrng_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_qrng_memcpy)

(cffi:defcfun ("gsl_qrng_clone" gsl_qrng_clone) :pointer
  (q :pointer))

(cl:export 'gsl_qrng_clone)

(cffi:defcfun ("gsl_qrng_free" gsl_qrng_free) :void
  (q :pointer))

(cl:export 'gsl_qrng_free)

(cffi:defcfun ("gsl_qrng_init" gsl_qrng_init) :void
  (q :pointer))

(cl:export 'gsl_qrng_init)

(cffi:defcfun ("gsl_qrng_name" gsl_qrng_name) :string
  (q :pointer))

(cl:export 'gsl_qrng_name)

(cffi:defcfun ("gsl_qrng_size" gsl_qrng_size) :pointer
  (q :pointer))

(cl:export 'gsl_qrng_size)

(cffi:defcfun ("gsl_qrng_state" gsl_qrng_state) :pointer
  (q :pointer))

(cl:export 'gsl_qrng_state)

(cffi:defcfun ("gsl_qrng_get" gsl_qrng_get) :int
  (q :pointer)
  (x :pointer))

(cl:export 'gsl_qrng_get)

(cffi:defcstruct gsl_rng_type
	(name :string)
	(max :unsigned-long)
	(min :unsigned-long)
	(size :pointer)
	(set :pointer)
	(get :pointer)
	(get_double :pointer))

(cl:export 'gsl_rng_type)

(cl:export 'name)

(cl:export 'max)

(cl:export 'min)

(cl:export 'size)

(cl:export 'set)

(cl:export 'get)

(cl:export 'get_double)

(cffi:defcstruct gsl_rng
	(type :pointer)
	(state :pointer))

(cl:export 'gsl_rng)

(cl:export 'type)

(cl:export 'state)

(cffi:defcvar ("gsl_rng_borosh13" gsl_rng_borosh13)
 :pointer)

(cl:export 'gsl_rng_borosh13)

(cffi:defcvar ("gsl_rng_coveyou" gsl_rng_coveyou)
 :pointer)

(cl:export 'gsl_rng_coveyou)

(cffi:defcvar ("gsl_rng_cmrg" gsl_rng_cmrg)
 :pointer)

(cl:export 'gsl_rng_cmrg)

(cffi:defcvar ("gsl_rng_fishman18" gsl_rng_fishman18)
 :pointer)

(cl:export 'gsl_rng_fishman18)

(cffi:defcvar ("gsl_rng_fishman20" gsl_rng_fishman20)
 :pointer)

(cl:export 'gsl_rng_fishman20)

(cffi:defcvar ("gsl_rng_fishman2x" gsl_rng_fishman2x)
 :pointer)

(cl:export 'gsl_rng_fishman2x)

(cffi:defcvar ("gsl_rng_gfsr4" gsl_rng_gfsr4)
 :pointer)

(cl:export 'gsl_rng_gfsr4)

(cffi:defcvar ("gsl_rng_knuthran" gsl_rng_knuthran)
 :pointer)

(cl:export 'gsl_rng_knuthran)

(cffi:defcvar ("gsl_rng_knuthran2" gsl_rng_knuthran2)
 :pointer)

(cl:export 'gsl_rng_knuthran2)

(cffi:defcvar ("gsl_rng_knuthran2002" gsl_rng_knuthran2002)
 :pointer)

(cl:export 'gsl_rng_knuthran2002)

(cffi:defcvar ("gsl_rng_lecuyer21" gsl_rng_lecuyer21)
 :pointer)

(cl:export 'gsl_rng_lecuyer21)

(cffi:defcvar ("gsl_rng_minstd" gsl_rng_minstd)
 :pointer)

(cl:export 'gsl_rng_minstd)

(cffi:defcvar ("gsl_rng_mrg" gsl_rng_mrg)
 :pointer)

(cl:export 'gsl_rng_mrg)

(cffi:defcvar ("gsl_rng_mt19937" gsl_rng_mt19937)
 :pointer)

(cl:export 'gsl_rng_mt19937)

(cffi:defcvar ("gsl_rng_mt19937_1999" gsl_rng_mt19937_1999)
 :pointer)

(cl:export 'gsl_rng_mt19937_1999)

(cffi:defcvar ("gsl_rng_mt19937_1998" gsl_rng_mt19937_1998)
 :pointer)

(cl:export 'gsl_rng_mt19937_1998)

(cffi:defcvar ("gsl_rng_r250" gsl_rng_r250)
 :pointer)

(cl:export 'gsl_rng_r250)

(cffi:defcvar ("gsl_rng_ran0" gsl_rng_ran0)
 :pointer)

(cl:export 'gsl_rng_ran0)

(cffi:defcvar ("gsl_rng_ran1" gsl_rng_ran1)
 :pointer)

(cl:export 'gsl_rng_ran1)

(cffi:defcvar ("gsl_rng_ran2" gsl_rng_ran2)
 :pointer)

(cl:export 'gsl_rng_ran2)

(cffi:defcvar ("gsl_rng_ran3" gsl_rng_ran3)
 :pointer)

(cl:export 'gsl_rng_ran3)

(cffi:defcvar ("gsl_rng_rand" gsl_rng_rand)
 :pointer)

(cl:export 'gsl_rng_rand)

(cffi:defcvar ("gsl_rng_rand48" gsl_rng_rand48)
 :pointer)

(cl:export 'gsl_rng_rand48)

(cffi:defcvar ("gsl_rng_random128_bsd" gsl_rng_random128_bsd)
 :pointer)

(cl:export 'gsl_rng_random128_bsd)

(cffi:defcvar ("gsl_rng_random128_glibc2" gsl_rng_random128_glibc2)
 :pointer)

(cl:export 'gsl_rng_random128_glibc2)

(cffi:defcvar ("gsl_rng_random128_libc5" gsl_rng_random128_libc5)
 :pointer)

(cl:export 'gsl_rng_random128_libc5)

(cffi:defcvar ("gsl_rng_random256_bsd" gsl_rng_random256_bsd)
 :pointer)

(cl:export 'gsl_rng_random256_bsd)

(cffi:defcvar ("gsl_rng_random256_glibc2" gsl_rng_random256_glibc2)
 :pointer)

(cl:export 'gsl_rng_random256_glibc2)

(cffi:defcvar ("gsl_rng_random256_libc5" gsl_rng_random256_libc5)
 :pointer)

(cl:export 'gsl_rng_random256_libc5)

(cffi:defcvar ("gsl_rng_random32_bsd" gsl_rng_random32_bsd)
 :pointer)

(cl:export 'gsl_rng_random32_bsd)

(cffi:defcvar ("gsl_rng_random32_glibc2" gsl_rng_random32_glibc2)
 :pointer)

(cl:export 'gsl_rng_random32_glibc2)

(cffi:defcvar ("gsl_rng_random32_libc5" gsl_rng_random32_libc5)
 :pointer)

(cl:export 'gsl_rng_random32_libc5)

(cffi:defcvar ("gsl_rng_random64_bsd" gsl_rng_random64_bsd)
 :pointer)

(cl:export 'gsl_rng_random64_bsd)

(cffi:defcvar ("gsl_rng_random64_glibc2" gsl_rng_random64_glibc2)
 :pointer)

(cl:export 'gsl_rng_random64_glibc2)

(cffi:defcvar ("gsl_rng_random64_libc5" gsl_rng_random64_libc5)
 :pointer)

(cl:export 'gsl_rng_random64_libc5)

(cffi:defcvar ("gsl_rng_random8_bsd" gsl_rng_random8_bsd)
 :pointer)

(cl:export 'gsl_rng_random8_bsd)

(cffi:defcvar ("gsl_rng_random8_glibc2" gsl_rng_random8_glibc2)
 :pointer)

(cl:export 'gsl_rng_random8_glibc2)

(cffi:defcvar ("gsl_rng_random8_libc5" gsl_rng_random8_libc5)
 :pointer)

(cl:export 'gsl_rng_random8_libc5)

(cffi:defcvar ("gsl_rng_random_bsd" gsl_rng_random_bsd)
 :pointer)

(cl:export 'gsl_rng_random_bsd)

(cffi:defcvar ("gsl_rng_random_glibc2" gsl_rng_random_glibc2)
 :pointer)

(cl:export 'gsl_rng_random_glibc2)

(cffi:defcvar ("gsl_rng_random_libc5" gsl_rng_random_libc5)
 :pointer)

(cl:export 'gsl_rng_random_libc5)

(cffi:defcvar ("gsl_rng_randu" gsl_rng_randu)
 :pointer)

(cl:export 'gsl_rng_randu)

(cffi:defcvar ("gsl_rng_ranf" gsl_rng_ranf)
 :pointer)

(cl:export 'gsl_rng_ranf)

(cffi:defcvar ("gsl_rng_ranlux" gsl_rng_ranlux)
 :pointer)

(cl:export 'gsl_rng_ranlux)

(cffi:defcvar ("gsl_rng_ranlux389" gsl_rng_ranlux389)
 :pointer)

(cl:export 'gsl_rng_ranlux389)

(cffi:defcvar ("gsl_rng_ranlxd1" gsl_rng_ranlxd1)
 :pointer)

(cl:export 'gsl_rng_ranlxd1)

(cffi:defcvar ("gsl_rng_ranlxd2" gsl_rng_ranlxd2)
 :pointer)

(cl:export 'gsl_rng_ranlxd2)

(cffi:defcvar ("gsl_rng_ranlxs0" gsl_rng_ranlxs0)
 :pointer)

(cl:export 'gsl_rng_ranlxs0)

(cffi:defcvar ("gsl_rng_ranlxs1" gsl_rng_ranlxs1)
 :pointer)

(cl:export 'gsl_rng_ranlxs1)

(cffi:defcvar ("gsl_rng_ranlxs2" gsl_rng_ranlxs2)
 :pointer)

(cl:export 'gsl_rng_ranlxs2)

(cffi:defcvar ("gsl_rng_ranmar" gsl_rng_ranmar)
 :pointer)

(cl:export 'gsl_rng_ranmar)

(cffi:defcvar ("gsl_rng_slatec" gsl_rng_slatec)
 :pointer)

(cl:export 'gsl_rng_slatec)

(cffi:defcvar ("gsl_rng_taus" gsl_rng_taus)
 :pointer)

(cl:export 'gsl_rng_taus)

(cffi:defcvar ("gsl_rng_taus2" gsl_rng_taus2)
 :pointer)

(cl:export 'gsl_rng_taus2)

(cffi:defcvar ("gsl_rng_taus113" gsl_rng_taus113)
 :pointer)

(cl:export 'gsl_rng_taus113)

(cffi:defcvar ("gsl_rng_transputer" gsl_rng_transputer)
 :pointer)

(cl:export 'gsl_rng_transputer)

(cffi:defcvar ("gsl_rng_tt800" gsl_rng_tt800)
 :pointer)

(cl:export 'gsl_rng_tt800)

(cffi:defcvar ("gsl_rng_uni" gsl_rng_uni)
 :pointer)

(cl:export 'gsl_rng_uni)

(cffi:defcvar ("gsl_rng_uni32" gsl_rng_uni32)
 :pointer)

(cl:export 'gsl_rng_uni32)

(cffi:defcvar ("gsl_rng_vax" gsl_rng_vax)
 :pointer)

(cl:export 'gsl_rng_vax)

(cffi:defcvar ("gsl_rng_waterman14" gsl_rng_waterman14)
 :pointer)

(cl:export 'gsl_rng_waterman14)

(cffi:defcvar ("gsl_rng_zuf" gsl_rng_zuf)
 :pointer)

(cl:export 'gsl_rng_zuf)

(cffi:defcfun ("gsl_rng_types_setup" gsl_rng_types_setup) :pointer)

(cl:export 'gsl_rng_types_setup)

(cffi:defcvar ("gsl_rng_default" gsl_rng_default)
 :pointer)

(cl:export 'gsl_rng_default)

(cffi:defcvar ("gsl_rng_default_seed" gsl_rng_default_seed)
 :unsigned-long)

(cl:export 'gsl_rng_default_seed)

(cffi:defcfun ("gsl_rng_alloc" gsl_rng_alloc) :pointer
  (t_arg0 :pointer))

(cl:export 'gsl_rng_alloc)

(cffi:defcfun ("gsl_rng_memcpy" gsl_rng_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_rng_memcpy)

(cffi:defcfun ("gsl_rng_clone" gsl_rng_clone) :pointer
  (r :pointer))

(cl:export 'gsl_rng_clone)

(cffi:defcfun ("gsl_rng_free" gsl_rng_free) :void
  (r :pointer))

(cl:export 'gsl_rng_free)

(cffi:defcfun ("gsl_rng_set" gsl_rng_set) :void
  (r :pointer)
  (seed :unsigned-long))

(cl:export 'gsl_rng_set)

(cffi:defcfun ("gsl_rng_max" gsl_rng_max) :unsigned-long
  (r :pointer))

(cl:export 'gsl_rng_max)

(cffi:defcfun ("gsl_rng_min" gsl_rng_min) :unsigned-long
  (r :pointer))

(cl:export 'gsl_rng_min)

(cffi:defcfun ("gsl_rng_name" gsl_rng_name) :string
  (r :pointer))

(cl:export 'gsl_rng_name)

(cffi:defcfun ("gsl_rng_fread" gsl_rng_fread) :int
  (stream :pointer)
  (r :pointer))

(cl:export 'gsl_rng_fread)

(cffi:defcfun ("gsl_rng_fwrite" gsl_rng_fwrite) :int
  (stream :pointer)
  (r :pointer))

(cl:export 'gsl_rng_fwrite)

(cffi:defcfun ("gsl_rng_size" gsl_rng_size) :pointer
  (r :pointer))

(cl:export 'gsl_rng_size)

(cffi:defcfun ("gsl_rng_state" gsl_rng_state) :pointer
  (r :pointer))

(cl:export 'gsl_rng_state)

(cffi:defcfun ("gsl_rng_print_state" gsl_rng_print_state) :void
  (r :pointer))

(cl:export 'gsl_rng_print_state)

(cffi:defcfun ("gsl_rng_env_setup" gsl_rng_env_setup) :pointer)

(cl:export 'gsl_rng_env_setup)

(cffi:defcfun ("gsl_rng_get" gsl_rng_get) :unsigned-long
  (r :pointer))

(cl:export 'gsl_rng_get)

(cffi:defcfun ("gsl_rng_uniform" gsl_rng_uniform) :double
  (r :pointer))

(cl:export 'gsl_rng_uniform)

(cffi:defcfun ("gsl_rng_uniform_pos" gsl_rng_uniform_pos) :double
  (r :pointer))

(cl:export 'gsl_rng_uniform_pos)

(cffi:defcfun ("gsl_rng_uniform_int" gsl_rng_uniform_int) :unsigned-long
  (r :pointer)
  (n :unsigned-long))

(cl:export 'gsl_rng_uniform_int)

(cffi:defcstruct gsl_root_fsolver_type
	(name :string)
	(size :pointer)
	(set :pointer)
	(iterate :pointer))

(cl:export 'gsl_root_fsolver_type)

(cl:export 'name)

(cl:export 'size)

(cl:export 'set)

(cl:export 'iterate)

(cffi:defcstruct gsl_root_fsolver
	(type :pointer)
	(function :pointer)
	(root :double)
	(x_lower :double)
	(x_upper :double)
	(state :pointer))

(cl:export 'gsl_root_fsolver)

(cl:export 'type)

(cl:export 'function)

(cl:export 'root)

(cl:export 'x_lower)

(cl:export 'x_upper)

(cl:export 'state)

(cffi:defcstruct gsl_root_fdfsolver_type
	(name :string)
	(size :pointer)
	(set :pointer)
	(iterate :pointer))

(cl:export 'gsl_root_fdfsolver_type)

(cl:export 'name)

(cl:export 'size)

(cl:export 'set)

(cl:export 'iterate)

(cffi:defcstruct gsl_root_fdfsolver
	(type :pointer)
	(fdf :pointer)
	(root :double)
	(state :pointer))

(cl:export 'gsl_root_fdfsolver)

(cl:export 'type)

(cl:export 'fdf)

(cl:export 'root)

(cl:export 'state)

(cffi:defcfun ("gsl_root_fsolver_alloc" gsl_root_fsolver_alloc) :pointer
  (t_arg0 :pointer))

(cl:export 'gsl_root_fsolver_alloc)

(cffi:defcfun ("gsl_root_fsolver_free" gsl_root_fsolver_free) :void
  (s :pointer))

(cl:export 'gsl_root_fsolver_free)

(cffi:defcfun ("gsl_root_fsolver_set" gsl_root_fsolver_set) :int
  (s :pointer)
  (f :pointer)
  (x_lower :double)
  (x_upper :double))

(cl:export 'gsl_root_fsolver_set)

(cffi:defcfun ("gsl_root_fsolver_iterate" gsl_root_fsolver_iterate) :int
  (s :pointer))

(cl:export 'gsl_root_fsolver_iterate)

(cffi:defcfun ("gsl_root_fsolver_name" gsl_root_fsolver_name) :string
  (s :pointer))

(cl:export 'gsl_root_fsolver_name)

(cffi:defcfun ("gsl_root_fsolver_root" gsl_root_fsolver_root) :double
  (s :pointer))

(cl:export 'gsl_root_fsolver_root)

(cffi:defcfun ("gsl_root_fsolver_x_lower" gsl_root_fsolver_x_lower) :double
  (s :pointer))

(cl:export 'gsl_root_fsolver_x_lower)

(cffi:defcfun ("gsl_root_fsolver_x_upper" gsl_root_fsolver_x_upper) :double
  (s :pointer))

(cl:export 'gsl_root_fsolver_x_upper)

(cffi:defcfun ("gsl_root_fdfsolver_alloc" gsl_root_fdfsolver_alloc) :pointer
  (t_arg0 :pointer))

(cl:export 'gsl_root_fdfsolver_alloc)

(cffi:defcfun ("gsl_root_fdfsolver_set" gsl_root_fdfsolver_set) :int
  (s :pointer)
  (fdf :pointer)
  (root :double))

(cl:export 'gsl_root_fdfsolver_set)

(cffi:defcfun ("gsl_root_fdfsolver_iterate" gsl_root_fdfsolver_iterate) :int
  (s :pointer))

(cl:export 'gsl_root_fdfsolver_iterate)

(cffi:defcfun ("gsl_root_fdfsolver_free" gsl_root_fdfsolver_free) :void
  (s :pointer))

(cl:export 'gsl_root_fdfsolver_free)

(cffi:defcfun ("gsl_root_fdfsolver_name" gsl_root_fdfsolver_name) :string
  (s :pointer))

(cl:export 'gsl_root_fdfsolver_name)

(cffi:defcfun ("gsl_root_fdfsolver_root" gsl_root_fdfsolver_root) :double
  (s :pointer))

(cl:export 'gsl_root_fdfsolver_root)

(cffi:defcfun ("gsl_root_test_interval" gsl_root_test_interval) :int
  (x_lower :double)
  (x_upper :double)
  (epsabs :double)
  (epsrel :double))

(cl:export 'gsl_root_test_interval)

(cffi:defcfun ("gsl_root_test_residual" gsl_root_test_residual) :int
  (f :double)
  (epsabs :double))

(cl:export 'gsl_root_test_residual)

(cffi:defcfun ("gsl_root_test_delta" gsl_root_test_delta) :int
  (x1 :double)
  (x0 :double)
  (epsabs :double)
  (epsrel :double))

(cl:export 'gsl_root_test_delta)

(cffi:defcvar ("gsl_root_fsolver_bisection" gsl_root_fsolver_bisection)
 :pointer)

(cl:export 'gsl_root_fsolver_bisection)

(cffi:defcvar ("gsl_root_fsolver_brent" gsl_root_fsolver_brent)
 :pointer)

(cl:export 'gsl_root_fsolver_brent)

(cffi:defcvar ("gsl_root_fsolver_falsepos" gsl_root_fsolver_falsepos)
 :pointer)

(cl:export 'gsl_root_fsolver_falsepos)

(cffi:defcvar ("gsl_root_fdfsolver_newton" gsl_root_fdfsolver_newton)
 :pointer)

(cl:export 'gsl_root_fdfsolver_newton)

(cffi:defcvar ("gsl_root_fdfsolver_secant" gsl_root_fdfsolver_secant)
 :pointer)

(cl:export 'gsl_root_fdfsolver_secant)

(cffi:defcvar ("gsl_root_fdfsolver_steffenson" gsl_root_fdfsolver_steffenson)
 :pointer)

(cl:export 'gsl_root_fdfsolver_steffenson)

(cffi:defcfun ("gsl_sf_airy_Ai_e" gsl_sf_airy_Ai_e) :int
  (x :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_airy_Ai_e)

(cffi:defcfun ("gsl_sf_airy_Ai" gsl_sf_airy_Ai) :double
  (x :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_airy_Ai)

(cffi:defcfun ("gsl_sf_airy_Bi_e" gsl_sf_airy_Bi_e) :int
  (x :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_airy_Bi_e)

(cffi:defcfun ("gsl_sf_airy_Bi" gsl_sf_airy_Bi) :double
  (x :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_airy_Bi)

(cffi:defcfun ("gsl_sf_airy_Ai_scaled_e" gsl_sf_airy_Ai_scaled_e) :int
  (x :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_airy_Ai_scaled_e)

(cffi:defcfun ("gsl_sf_airy_Ai_scaled" gsl_sf_airy_Ai_scaled) :double
  (x :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_airy_Ai_scaled)

(cffi:defcfun ("gsl_sf_airy_Bi_scaled_e" gsl_sf_airy_Bi_scaled_e) :int
  (x :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_airy_Bi_scaled_e)

(cffi:defcfun ("gsl_sf_airy_Bi_scaled" gsl_sf_airy_Bi_scaled) :double
  (x :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_airy_Bi_scaled)

(cffi:defcfun ("gsl_sf_airy_Ai_deriv_e" gsl_sf_airy_Ai_deriv_e) :int
  (x :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_airy_Ai_deriv_e)

(cffi:defcfun ("gsl_sf_airy_Ai_deriv" gsl_sf_airy_Ai_deriv) :double
  (x :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_airy_Ai_deriv)

(cffi:defcfun ("gsl_sf_airy_Bi_deriv_e" gsl_sf_airy_Bi_deriv_e) :int
  (x :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_airy_Bi_deriv_e)

(cffi:defcfun ("gsl_sf_airy_Bi_deriv" gsl_sf_airy_Bi_deriv) :double
  (x :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_airy_Bi_deriv)

(cffi:defcfun ("gsl_sf_airy_Ai_deriv_scaled_e" gsl_sf_airy_Ai_deriv_scaled_e) :int
  (x :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_airy_Ai_deriv_scaled_e)

(cffi:defcfun ("gsl_sf_airy_Ai_deriv_scaled" gsl_sf_airy_Ai_deriv_scaled) :double
  (x :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_airy_Ai_deriv_scaled)

(cffi:defcfun ("gsl_sf_airy_Bi_deriv_scaled_e" gsl_sf_airy_Bi_deriv_scaled_e) :int
  (x :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_airy_Bi_deriv_scaled_e)

(cffi:defcfun ("gsl_sf_airy_Bi_deriv_scaled" gsl_sf_airy_Bi_deriv_scaled) :double
  (x :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_airy_Bi_deriv_scaled)

(cffi:defcfun ("gsl_sf_airy_zero_Ai_e" gsl_sf_airy_zero_Ai_e) :int
  (s :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_airy_zero_Ai_e)

(cffi:defcfun ("gsl_sf_airy_zero_Ai" gsl_sf_airy_zero_Ai) :double
  (s :unsigned-int))

(cl:export 'gsl_sf_airy_zero_Ai)

(cffi:defcfun ("gsl_sf_airy_zero_Bi_e" gsl_sf_airy_zero_Bi_e) :int
  (s :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_airy_zero_Bi_e)

(cffi:defcfun ("gsl_sf_airy_zero_Bi" gsl_sf_airy_zero_Bi) :double
  (s :unsigned-int))

(cl:export 'gsl_sf_airy_zero_Bi)

(cffi:defcfun ("gsl_sf_airy_zero_Ai_deriv_e" gsl_sf_airy_zero_Ai_deriv_e) :int
  (s :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_airy_zero_Ai_deriv_e)

(cffi:defcfun ("gsl_sf_airy_zero_Ai_deriv" gsl_sf_airy_zero_Ai_deriv) :double
  (s :unsigned-int))

(cl:export 'gsl_sf_airy_zero_Ai_deriv)

(cffi:defcfun ("gsl_sf_airy_zero_Bi_deriv_e" gsl_sf_airy_zero_Bi_deriv_e) :int
  (s :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_airy_zero_Bi_deriv_e)

(cffi:defcfun ("gsl_sf_airy_zero_Bi_deriv" gsl_sf_airy_zero_Bi_deriv) :double
  (s :unsigned-int))

(cl:export 'gsl_sf_airy_zero_Bi_deriv)

(cffi:defcfun ("gsl_sf_bessel_J0_e" gsl_sf_bessel_J0_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_J0_e)

(cffi:defcfun ("gsl_sf_bessel_J0" gsl_sf_bessel_J0) :double
  (x :double))

(cl:export 'gsl_sf_bessel_J0)

(cffi:defcfun ("gsl_sf_bessel_J1_e" gsl_sf_bessel_J1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_J1_e)

(cffi:defcfun ("gsl_sf_bessel_J1" gsl_sf_bessel_J1) :double
  (x :double))

(cl:export 'gsl_sf_bessel_J1)

(cffi:defcfun ("gsl_sf_bessel_Jn_e" gsl_sf_bessel_Jn_e) :int
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_Jn_e)

(cffi:defcfun ("gsl_sf_bessel_Jn" gsl_sf_bessel_Jn) :double
  (n :int)
  (x :double))

(cl:export 'gsl_sf_bessel_Jn)

(cffi:defcfun ("gsl_sf_bessel_Jn_array" gsl_sf_bessel_Jn_array) :int
  (nmin :int)
  (nmax :int)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_bessel_Jn_array)

(cffi:defcfun ("gsl_sf_bessel_Y0_e" gsl_sf_bessel_Y0_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_Y0_e)

(cffi:defcfun ("gsl_sf_bessel_Y0" gsl_sf_bessel_Y0) :double
  (x :double))

(cl:export 'gsl_sf_bessel_Y0)

(cffi:defcfun ("gsl_sf_bessel_Y1_e" gsl_sf_bessel_Y1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_Y1_e)

(cffi:defcfun ("gsl_sf_bessel_Y1" gsl_sf_bessel_Y1) :double
  (x :double))

(cl:export 'gsl_sf_bessel_Y1)

(cffi:defcfun ("gsl_sf_bessel_Yn_e" gsl_sf_bessel_Yn_e) :int
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_Yn_e)

(cffi:defcfun ("gsl_sf_bessel_Yn" gsl_sf_bessel_Yn) :double
  (n :int)
  (x :double))

(cl:export 'gsl_sf_bessel_Yn)

(cffi:defcfun ("gsl_sf_bessel_Yn_array" gsl_sf_bessel_Yn_array) :int
  (nmin :int)
  (nmax :int)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_bessel_Yn_array)

(cffi:defcfun ("gsl_sf_bessel_I0_e" gsl_sf_bessel_I0_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_I0_e)

(cffi:defcfun ("gsl_sf_bessel_I0" gsl_sf_bessel_I0) :double
  (x :double))

(cl:export 'gsl_sf_bessel_I0)

(cffi:defcfun ("gsl_sf_bessel_I1_e" gsl_sf_bessel_I1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_I1_e)

(cffi:defcfun ("gsl_sf_bessel_I1" gsl_sf_bessel_I1) :double
  (x :double))

(cl:export 'gsl_sf_bessel_I1)

(cffi:defcfun ("gsl_sf_bessel_In_e" gsl_sf_bessel_In_e) :int
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_In_e)

(cffi:defcfun ("gsl_sf_bessel_In" gsl_sf_bessel_In) :double
  (n :int)
  (x :double))

(cl:export 'gsl_sf_bessel_In)

(cffi:defcfun ("gsl_sf_bessel_In_array" gsl_sf_bessel_In_array) :int
  (nmin :int)
  (nmax :int)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_bessel_In_array)

(cffi:defcfun ("gsl_sf_bessel_I0_scaled_e" gsl_sf_bessel_I0_scaled_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_I0_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_I0_scaled" gsl_sf_bessel_I0_scaled) :double
  (x :double))

(cl:export 'gsl_sf_bessel_I0_scaled)

(cffi:defcfun ("gsl_sf_bessel_I1_scaled_e" gsl_sf_bessel_I1_scaled_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_I1_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_I1_scaled" gsl_sf_bessel_I1_scaled) :double
  (x :double))

(cl:export 'gsl_sf_bessel_I1_scaled)

(cffi:defcfun ("gsl_sf_bessel_In_scaled_e" gsl_sf_bessel_In_scaled_e) :int
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_In_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_In_scaled" gsl_sf_bessel_In_scaled) :double
  (n :int)
  (x :double))

(cl:export 'gsl_sf_bessel_In_scaled)

(cffi:defcfun ("gsl_sf_bessel_In_scaled_array" gsl_sf_bessel_In_scaled_array) :int
  (nmin :int)
  (nmax :int)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_bessel_In_scaled_array)

(cffi:defcfun ("gsl_sf_bessel_K0_e" gsl_sf_bessel_K0_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_K0_e)

(cffi:defcfun ("gsl_sf_bessel_K0" gsl_sf_bessel_K0) :double
  (x :double))

(cl:export 'gsl_sf_bessel_K0)

(cffi:defcfun ("gsl_sf_bessel_K1_e" gsl_sf_bessel_K1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_K1_e)

(cffi:defcfun ("gsl_sf_bessel_K1" gsl_sf_bessel_K1) :double
  (x :double))

(cl:export 'gsl_sf_bessel_K1)

(cffi:defcfun ("gsl_sf_bessel_Kn_e" gsl_sf_bessel_Kn_e) :int
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_Kn_e)

(cffi:defcfun ("gsl_sf_bessel_Kn" gsl_sf_bessel_Kn) :double
  (n :int)
  (x :double))

(cl:export 'gsl_sf_bessel_Kn)

(cffi:defcfun ("gsl_sf_bessel_Kn_array" gsl_sf_bessel_Kn_array) :int
  (nmin :int)
  (nmax :int)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_bessel_Kn_array)

(cffi:defcfun ("gsl_sf_bessel_K0_scaled_e" gsl_sf_bessel_K0_scaled_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_K0_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_K0_scaled" gsl_sf_bessel_K0_scaled) :double
  (x :double))

(cl:export 'gsl_sf_bessel_K0_scaled)

(cffi:defcfun ("gsl_sf_bessel_K1_scaled_e" gsl_sf_bessel_K1_scaled_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_K1_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_K1_scaled" gsl_sf_bessel_K1_scaled) :double
  (x :double))

(cl:export 'gsl_sf_bessel_K1_scaled)

(cffi:defcfun ("gsl_sf_bessel_Kn_scaled_e" gsl_sf_bessel_Kn_scaled_e) :int
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_Kn_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_Kn_scaled" gsl_sf_bessel_Kn_scaled) :double
  (n :int)
  (x :double))

(cl:export 'gsl_sf_bessel_Kn_scaled)

(cffi:defcfun ("gsl_sf_bessel_Kn_scaled_array" gsl_sf_bessel_Kn_scaled_array) :int
  (nmin :int)
  (nmax :int)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_bessel_Kn_scaled_array)

(cffi:defcfun ("gsl_sf_bessel_j0_e" gsl_sf_bessel_j0_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_j0_e)

(cffi:defcfun ("gsl_sf_bessel_j0" gsl_sf_bessel_j0) :double
  (x :double))

(cl:export 'gsl_sf_bessel_j0)

(cffi:defcfun ("gsl_sf_bessel_j1_e" gsl_sf_bessel_j1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_j1_e)

(cffi:defcfun ("gsl_sf_bessel_j1" gsl_sf_bessel_j1) :double
  (x :double))

(cl:export 'gsl_sf_bessel_j1)

(cffi:defcfun ("gsl_sf_bessel_j2_e" gsl_sf_bessel_j2_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_j2_e)

(cffi:defcfun ("gsl_sf_bessel_j2" gsl_sf_bessel_j2) :double
  (x :double))

(cl:export 'gsl_sf_bessel_j2)

(cffi:defcfun ("gsl_sf_bessel_jl_e" gsl_sf_bessel_jl_e) :int
  (l :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_jl_e)

(cffi:defcfun ("gsl_sf_bessel_jl" gsl_sf_bessel_jl) :double
  (l :int)
  (x :double))

(cl:export 'gsl_sf_bessel_jl)

(cffi:defcfun ("gsl_sf_bessel_jl_array" gsl_sf_bessel_jl_array) :int
  (lmax :int)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_bessel_jl_array)

(cffi:defcfun ("gsl_sf_bessel_jl_steed_array" gsl_sf_bessel_jl_steed_array) :int
  (lmax :int)
  (x :double)
  (jl_x_array :pointer))

(cl:export 'gsl_sf_bessel_jl_steed_array)

(cffi:defcfun ("gsl_sf_bessel_y0_e" gsl_sf_bessel_y0_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_y0_e)

(cffi:defcfun ("gsl_sf_bessel_y0" gsl_sf_bessel_y0) :double
  (x :double))

(cl:export 'gsl_sf_bessel_y0)

(cffi:defcfun ("gsl_sf_bessel_y1_e" gsl_sf_bessel_y1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_y1_e)

(cffi:defcfun ("gsl_sf_bessel_y1" gsl_sf_bessel_y1) :double
  (x :double))

(cl:export 'gsl_sf_bessel_y1)

(cffi:defcfun ("gsl_sf_bessel_y2_e" gsl_sf_bessel_y2_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_y2_e)

(cffi:defcfun ("gsl_sf_bessel_y2" gsl_sf_bessel_y2) :double
  (x :double))

(cl:export 'gsl_sf_bessel_y2)

(cffi:defcfun ("gsl_sf_bessel_yl_e" gsl_sf_bessel_yl_e) :int
  (l :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_yl_e)

(cffi:defcfun ("gsl_sf_bessel_yl" gsl_sf_bessel_yl) :double
  (l :int)
  (x :double))

(cl:export 'gsl_sf_bessel_yl)

(cffi:defcfun ("gsl_sf_bessel_yl_array" gsl_sf_bessel_yl_array) :int
  (lmax :int)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_bessel_yl_array)

(cffi:defcfun ("gsl_sf_bessel_i0_scaled_e" gsl_sf_bessel_i0_scaled_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_i0_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_i0_scaled" gsl_sf_bessel_i0_scaled) :double
  (x :double))

(cl:export 'gsl_sf_bessel_i0_scaled)

(cffi:defcfun ("gsl_sf_bessel_i1_scaled_e" gsl_sf_bessel_i1_scaled_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_i1_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_i1_scaled" gsl_sf_bessel_i1_scaled) :double
  (x :double))

(cl:export 'gsl_sf_bessel_i1_scaled)

(cffi:defcfun ("gsl_sf_bessel_i2_scaled_e" gsl_sf_bessel_i2_scaled_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_i2_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_i2_scaled" gsl_sf_bessel_i2_scaled) :double
  (x :double))

(cl:export 'gsl_sf_bessel_i2_scaled)

(cffi:defcfun ("gsl_sf_bessel_il_scaled_e" gsl_sf_bessel_il_scaled_e) :int
  (l :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_il_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_il_scaled" gsl_sf_bessel_il_scaled) :double
  (l :int)
  (x :double))

(cl:export 'gsl_sf_bessel_il_scaled)

(cffi:defcfun ("gsl_sf_bessel_il_scaled_array" gsl_sf_bessel_il_scaled_array) :int
  (lmax :int)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_bessel_il_scaled_array)

(cffi:defcfun ("gsl_sf_bessel_k0_scaled_e" gsl_sf_bessel_k0_scaled_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_k0_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_k0_scaled" gsl_sf_bessel_k0_scaled) :double
  (x :double))

(cl:export 'gsl_sf_bessel_k0_scaled)

(cffi:defcfun ("gsl_sf_bessel_k1_scaled_e" gsl_sf_bessel_k1_scaled_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_k1_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_k1_scaled" gsl_sf_bessel_k1_scaled) :double
  (x :double))

(cl:export 'gsl_sf_bessel_k1_scaled)

(cffi:defcfun ("gsl_sf_bessel_k2_scaled_e" gsl_sf_bessel_k2_scaled_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_k2_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_k2_scaled" gsl_sf_bessel_k2_scaled) :double
  (x :double))

(cl:export 'gsl_sf_bessel_k2_scaled)

(cffi:defcfun ("gsl_sf_bessel_kl_scaled_e" gsl_sf_bessel_kl_scaled_e) :int
  (l :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_kl_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_kl_scaled" gsl_sf_bessel_kl_scaled) :double
  (l :int)
  (x :double))

(cl:export 'gsl_sf_bessel_kl_scaled)

(cffi:defcfun ("gsl_sf_bessel_kl_scaled_array" gsl_sf_bessel_kl_scaled_array) :int
  (lmax :int)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_bessel_kl_scaled_array)

(cffi:defcfun ("gsl_sf_bessel_Jnu_e" gsl_sf_bessel_Jnu_e) :int
  (nu :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_Jnu_e)

(cffi:defcfun ("gsl_sf_bessel_Jnu" gsl_sf_bessel_Jnu) :double
  (nu :double)
  (x :double))

(cl:export 'gsl_sf_bessel_Jnu)

(cffi:defcfun ("gsl_sf_bessel_Ynu_e" gsl_sf_bessel_Ynu_e) :int
  (nu :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_Ynu_e)

(cffi:defcfun ("gsl_sf_bessel_Ynu" gsl_sf_bessel_Ynu) :double
  (nu :double)
  (x :double))

(cl:export 'gsl_sf_bessel_Ynu)

(cffi:defcfun ("gsl_sf_bessel_sequence_Jnu_e" gsl_sf_bessel_sequence_Jnu_e) :int
  (nu :double)
  (mode :unsigned-int)
  (size :pointer)
  (v :pointer))

(cl:export 'gsl_sf_bessel_sequence_Jnu_e)

(cffi:defcfun ("gsl_sf_bessel_Inu_scaled_e" gsl_sf_bessel_Inu_scaled_e) :int
  (nu :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_Inu_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_Inu_scaled" gsl_sf_bessel_Inu_scaled) :double
  (nu :double)
  (x :double))

(cl:export 'gsl_sf_bessel_Inu_scaled)

(cffi:defcfun ("gsl_sf_bessel_Inu_e" gsl_sf_bessel_Inu_e) :int
  (nu :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_Inu_e)

(cffi:defcfun ("gsl_sf_bessel_Inu" gsl_sf_bessel_Inu) :double
  (nu :double)
  (x :double))

(cl:export 'gsl_sf_bessel_Inu)

(cffi:defcfun ("gsl_sf_bessel_Knu_scaled_e" gsl_sf_bessel_Knu_scaled_e) :int
  (nu :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_Knu_scaled_e)

(cffi:defcfun ("gsl_sf_bessel_Knu_scaled" gsl_sf_bessel_Knu_scaled) :double
  (nu :double)
  (x :double))

(cl:export 'gsl_sf_bessel_Knu_scaled)

(cffi:defcfun ("gsl_sf_bessel_Knu_scaled_e10_e" gsl_sf_bessel_Knu_scaled_e10_e) :int
  (nu :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_Knu_scaled_e10_e)

(cffi:defcfun ("gsl_sf_bessel_Knu_e" gsl_sf_bessel_Knu_e) :int
  (nu :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_Knu_e)

(cffi:defcfun ("gsl_sf_bessel_Knu" gsl_sf_bessel_Knu) :double
  (nu :double)
  (x :double))

(cl:export 'gsl_sf_bessel_Knu)

(cffi:defcfun ("gsl_sf_bessel_lnKnu_e" gsl_sf_bessel_lnKnu_e) :int
  (nu :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_bessel_lnKnu_e)

(cffi:defcfun ("gsl_sf_bessel_lnKnu" gsl_sf_bessel_lnKnu) :double
  (nu :double)
  (x :double))

(cl:export 'gsl_sf_bessel_lnKnu)

(cffi:defcfun ("gsl_sf_bessel_zero_J0_e" gsl_sf_bessel_zero_J0_e) :int
  (s :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_bessel_zero_J0_e)

(cffi:defcfun ("gsl_sf_bessel_zero_J0" gsl_sf_bessel_zero_J0) :double
  (s :unsigned-int))

(cl:export 'gsl_sf_bessel_zero_J0)

(cffi:defcfun ("gsl_sf_bessel_zero_J1_e" gsl_sf_bessel_zero_J1_e) :int
  (s :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_bessel_zero_J1_e)

(cffi:defcfun ("gsl_sf_bessel_zero_J1" gsl_sf_bessel_zero_J1) :double
  (s :unsigned-int))

(cl:export 'gsl_sf_bessel_zero_J1)

(cffi:defcfun ("gsl_sf_bessel_zero_Jnu_e" gsl_sf_bessel_zero_Jnu_e) :int
  (nu :double)
  (s :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_bessel_zero_Jnu_e)

(cffi:defcfun ("gsl_sf_bessel_zero_Jnu" gsl_sf_bessel_zero_Jnu) :double
  (nu :double)
  (s :unsigned-int))

(cl:export 'gsl_sf_bessel_zero_Jnu)

(cffi:defcfun ("gsl_sf_clausen_e" gsl_sf_clausen_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_clausen_e)

(cffi:defcfun ("gsl_sf_clausen" gsl_sf_clausen) :double
  (x :double))

(cl:export 'gsl_sf_clausen)

(cffi:defcfun ("gsl_sf_hydrogenicR_1_e" gsl_sf_hydrogenicR_1_e) :int
  (Z :double)
  (r :double)
  (result :pointer))

(cl:export 'gsl_sf_hydrogenicR_1_e)

(cffi:defcfun ("gsl_sf_hydrogenicR_1" gsl_sf_hydrogenicR_1) :double
  (Z :double)
  (r :double))

(cl:export 'gsl_sf_hydrogenicR_1)

(cffi:defcfun ("gsl_sf_hydrogenicR_e" gsl_sf_hydrogenicR_e) :int
  (n :int)
  (l :int)
  (Z :double)
  (r :double)
  (result :pointer))

(cl:export 'gsl_sf_hydrogenicR_e)

(cffi:defcfun ("gsl_sf_hydrogenicR" gsl_sf_hydrogenicR) :double
  (n :int)
  (l :int)
  (Z :double)
  (r :double))

(cl:export 'gsl_sf_hydrogenicR)

(cffi:defcfun ("gsl_sf_coulomb_wave_FG_e" gsl_sf_coulomb_wave_FG_e) :int
  (eta :double)
  (x :double)
  (lam_F :double)
  (k_lam_G :int)
  (F :pointer)
  (Fp :pointer)
  (G :pointer)
  (Gp :pointer)
  (exp_F :pointer)
  (exp_G :pointer))

(cl:export 'gsl_sf_coulomb_wave_FG_e)

(cffi:defcfun ("gsl_sf_coulomb_wave_F_array" gsl_sf_coulomb_wave_F_array) :int
  (lam_min :double)
  (kmax :int)
  (eta :double)
  (x :double)
  (fc_array :pointer)
  (F_exponent :pointer))

(cl:export 'gsl_sf_coulomb_wave_F_array)

(cffi:defcfun ("gsl_sf_coulomb_wave_FG_array" gsl_sf_coulomb_wave_FG_array) :int
  (lam_min :double)
  (kmax :int)
  (eta :double)
  (x :double)
  (fc_array :pointer)
  (gc_array :pointer)
  (F_exponent :pointer)
  (G_exponent :pointer))

(cl:export 'gsl_sf_coulomb_wave_FG_array)

(cffi:defcfun ("gsl_sf_coulomb_wave_FGp_array" gsl_sf_coulomb_wave_FGp_array) :int
  (lam_min :double)
  (kmax :int)
  (eta :double)
  (x :double)
  (fc_array :pointer)
  (fcp_array :pointer)
  (gc_array :pointer)
  (gcp_array :pointer)
  (F_exponent :pointer)
  (G_exponent :pointer))

(cl:export 'gsl_sf_coulomb_wave_FGp_array)

(cffi:defcfun ("gsl_sf_coulomb_wave_sphF_array" gsl_sf_coulomb_wave_sphF_array) :int
  (lam_min :double)
  (kmax :int)
  (eta :double)
  (x :double)
  (fc_array :pointer)
  (F_exponent :pointer))

(cl:export 'gsl_sf_coulomb_wave_sphF_array)

(cffi:defcfun ("gsl_sf_coulomb_CL_e" gsl_sf_coulomb_CL_e) :int
  (L :double)
  (eta :double)
  (result :pointer))

(cl:export 'gsl_sf_coulomb_CL_e)

(cffi:defcfun ("gsl_sf_coulomb_CL_array" gsl_sf_coulomb_CL_array) :int
  (Lmin :double)
  (kmax :int)
  (eta :double)
  (cl :pointer))

(cl:export 'gsl_sf_coulomb_CL_array)

(cffi:defcfun ("gsl_sf_coupling_3j_e" gsl_sf_coupling_3j_e) :int
  (two_ja :int)
  (two_jb :int)
  (two_jc :int)
  (two_ma :int)
  (two_mb :int)
  (two_mc :int)
  (result :pointer))

(cl:export 'gsl_sf_coupling_3j_e)

(cffi:defcfun ("gsl_sf_coupling_3j" gsl_sf_coupling_3j) :double
  (two_ja :int)
  (two_jb :int)
  (two_jc :int)
  (two_ma :int)
  (two_mb :int)
  (two_mc :int))

(cl:export 'gsl_sf_coupling_3j)

(cffi:defcfun ("gsl_sf_coupling_6j_e" gsl_sf_coupling_6j_e) :int
  (two_ja :int)
  (two_jb :int)
  (two_jc :int)
  (two_jd :int)
  (two_je :int)
  (two_jf :int)
  (result :pointer))

(cl:export 'gsl_sf_coupling_6j_e)

(cffi:defcfun ("gsl_sf_coupling_6j" gsl_sf_coupling_6j) :double
  (two_ja :int)
  (two_jb :int)
  (two_jc :int)
  (two_jd :int)
  (two_je :int)
  (two_jf :int))

(cl:export 'gsl_sf_coupling_6j)

(cffi:defcfun ("gsl_sf_coupling_RacahW_e" gsl_sf_coupling_RacahW_e) :int
  (two_ja :int)
  (two_jb :int)
  (two_jc :int)
  (two_jd :int)
  (two_je :int)
  (two_jf :int)
  (result :pointer))

(cl:export 'gsl_sf_coupling_RacahW_e)

(cffi:defcfun ("gsl_sf_coupling_RacahW" gsl_sf_coupling_RacahW) :double
  (two_ja :int)
  (two_jb :int)
  (two_jc :int)
  (two_jd :int)
  (two_je :int)
  (two_jf :int))

(cl:export 'gsl_sf_coupling_RacahW)

(cffi:defcfun ("gsl_sf_coupling_9j_e" gsl_sf_coupling_9j_e) :int
  (two_ja :int)
  (two_jb :int)
  (two_jc :int)
  (two_jd :int)
  (two_je :int)
  (two_jf :int)
  (two_jg :int)
  (two_jh :int)
  (two_ji :int)
  (result :pointer))

(cl:export 'gsl_sf_coupling_9j_e)

(cffi:defcfun ("gsl_sf_coupling_9j" gsl_sf_coupling_9j) :double
  (two_ja :int)
  (two_jb :int)
  (two_jc :int)
  (two_jd :int)
  (two_je :int)
  (two_jf :int)
  (two_jg :int)
  (two_jh :int)
  (two_ji :int))

(cl:export 'gsl_sf_coupling_9j)

(cffi:defcfun ("gsl_sf_coupling_6j_INCORRECT_e" gsl_sf_coupling_6j_INCORRECT_e) :int
  (two_ja :int)
  (two_jb :int)
  (two_jc :int)
  (two_jd :int)
  (two_je :int)
  (two_jf :int)
  (result :pointer))

(cl:export 'gsl_sf_coupling_6j_INCORRECT_e)

(cffi:defcfun ("gsl_sf_coupling_6j_INCORRECT" gsl_sf_coupling_6j_INCORRECT) :double
  (two_ja :int)
  (two_jb :int)
  (two_jc :int)
  (two_jd :int)
  (two_je :int)
  (two_jf :int))

(cl:export 'gsl_sf_coupling_6j_INCORRECT)

(cffi:defcfun ("gsl_sf_dawson_e" gsl_sf_dawson_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_dawson_e)

(cffi:defcfun ("gsl_sf_dawson" gsl_sf_dawson) :double
  (x :double))

(cl:export 'gsl_sf_dawson)

(cffi:defcfun ("gsl_sf_debye_1_e" gsl_sf_debye_1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_debye_1_e)

(cffi:defcfun ("gsl_sf_debye_1" gsl_sf_debye_1) :double
  (x :double))

(cl:export 'gsl_sf_debye_1)

(cffi:defcfun ("gsl_sf_debye_2_e" gsl_sf_debye_2_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_debye_2_e)

(cffi:defcfun ("gsl_sf_debye_2" gsl_sf_debye_2) :double
  (x :double))

(cl:export 'gsl_sf_debye_2)

(cffi:defcfun ("gsl_sf_debye_3_e" gsl_sf_debye_3_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_debye_3_e)

(cffi:defcfun ("gsl_sf_debye_3" gsl_sf_debye_3) :double
  (x :double))

(cl:export 'gsl_sf_debye_3)

(cffi:defcfun ("gsl_sf_debye_4_e" gsl_sf_debye_4_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_debye_4_e)

(cffi:defcfun ("gsl_sf_debye_4" gsl_sf_debye_4) :double
  (x :double))

(cl:export 'gsl_sf_debye_4)

(cffi:defcfun ("gsl_sf_debye_5_e" gsl_sf_debye_5_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_debye_5_e)

(cffi:defcfun ("gsl_sf_debye_5" gsl_sf_debye_5) :double
  (x :double))

(cl:export 'gsl_sf_debye_5)

(cffi:defcfun ("gsl_sf_debye_6_e" gsl_sf_debye_6_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_debye_6_e)

(cffi:defcfun ("gsl_sf_debye_6" gsl_sf_debye_6) :double
  (x :double))

(cl:export 'gsl_sf_debye_6)

(cffi:defcfun ("gsl_sf_dilog_e" gsl_sf_dilog_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_dilog_e)

(cffi:defcfun ("gsl_sf_dilog" gsl_sf_dilog) :double
  (x :double))

(cl:export 'gsl_sf_dilog)

(cffi:defcfun ("gsl_sf_complex_dilog_xy_e" gsl_sf_complex_dilog_xy_e) :int
  (x :double)
  (y :double)
  (result_re :pointer)
  (result_im :pointer))

(cl:export 'gsl_sf_complex_dilog_xy_e)

(cffi:defcfun ("gsl_sf_complex_dilog_e" gsl_sf_complex_dilog_e) :int
  (r :double)
  (theta :double)
  (result_re :pointer)
  (result_im :pointer))

(cl:export 'gsl_sf_complex_dilog_e)

(cffi:defcfun ("gsl_sf_complex_spence_xy_e" gsl_sf_complex_spence_xy_e) :int
  (x :double)
  (y :double)
  (real_sp :pointer)
  (imag_sp :pointer))

(cl:export 'gsl_sf_complex_spence_xy_e)

(cffi:defcfun ("gsl_sf_multiply_e" gsl_sf_multiply_e) :int
  (x :double)
  (y :double)
  (result :pointer))

(cl:export 'gsl_sf_multiply_e)

(cffi:defcfun ("gsl_sf_multiply" gsl_sf_multiply) :double
  (x :double)
  (y :double))

(cl:export 'gsl_sf_multiply)

(cffi:defcfun ("gsl_sf_multiply_err_e" gsl_sf_multiply_err_e) :int
  (x :double)
  (dx :double)
  (y :double)
  (dy :double)
  (result :pointer))

(cl:export 'gsl_sf_multiply_err_e)

(cffi:defcfun ("gsl_sf_ellint_Kcomp_e" gsl_sf_ellint_Kcomp_e) :int
  (k :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_ellint_Kcomp_e)

(cffi:defcfun ("gsl_sf_ellint_Kcomp" gsl_sf_ellint_Kcomp) :double
  (k :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_ellint_Kcomp)

(cffi:defcfun ("gsl_sf_ellint_Ecomp_e" gsl_sf_ellint_Ecomp_e) :int
  (k :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_ellint_Ecomp_e)

(cffi:defcfun ("gsl_sf_ellint_Ecomp" gsl_sf_ellint_Ecomp) :double
  (k :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_ellint_Ecomp)

(cffi:defcfun ("gsl_sf_ellint_Pcomp_e" gsl_sf_ellint_Pcomp_e) :int
  (k :double)
  (n :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_ellint_Pcomp_e)

(cffi:defcfun ("gsl_sf_ellint_Pcomp" gsl_sf_ellint_Pcomp) :double
  (k :double)
  (n :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_ellint_Pcomp)

(cffi:defcfun ("gsl_sf_ellint_Dcomp_e" gsl_sf_ellint_Dcomp_e) :int
  (k :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_ellint_Dcomp_e)

(cffi:defcfun ("gsl_sf_ellint_Dcomp" gsl_sf_ellint_Dcomp) :double
  (k :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_ellint_Dcomp)

(cffi:defcfun ("gsl_sf_ellint_F_e" gsl_sf_ellint_F_e) :int
  (phi :double)
  (k :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_ellint_F_e)

(cffi:defcfun ("gsl_sf_ellint_F" gsl_sf_ellint_F) :double
  (phi :double)
  (k :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_ellint_F)

(cffi:defcfun ("gsl_sf_ellint_E_e" gsl_sf_ellint_E_e) :int
  (phi :double)
  (k :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_ellint_E_e)

(cffi:defcfun ("gsl_sf_ellint_E" gsl_sf_ellint_E) :double
  (phi :double)
  (k :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_ellint_E)

(cffi:defcfun ("gsl_sf_ellint_P_e" gsl_sf_ellint_P_e) :int
  (phi :double)
  (k :double)
  (n :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_ellint_P_e)

(cffi:defcfun ("gsl_sf_ellint_P" gsl_sf_ellint_P) :double
  (phi :double)
  (k :double)
  (n :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_ellint_P)

(cffi:defcfun ("gsl_sf_ellint_D_e" gsl_sf_ellint_D_e) :int
  (phi :double)
  (k :double)
  (n :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_ellint_D_e)

(cffi:defcfun ("gsl_sf_ellint_D" gsl_sf_ellint_D) :double
  (phi :double)
  (k :double)
  (n :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_ellint_D)

(cffi:defcfun ("gsl_sf_ellint_RC_e" gsl_sf_ellint_RC_e) :int
  (x :double)
  (y :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_ellint_RC_e)

(cffi:defcfun ("gsl_sf_ellint_RC" gsl_sf_ellint_RC) :double
  (x :double)
  (y :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_ellint_RC)

(cffi:defcfun ("gsl_sf_ellint_RD_e" gsl_sf_ellint_RD_e) :int
  (x :double)
  (y :double)
  (z :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_ellint_RD_e)

(cffi:defcfun ("gsl_sf_ellint_RD" gsl_sf_ellint_RD) :double
  (x :double)
  (y :double)
  (z :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_ellint_RD)

(cffi:defcfun ("gsl_sf_ellint_RF_e" gsl_sf_ellint_RF_e) :int
  (x :double)
  (y :double)
  (z :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_ellint_RF_e)

(cffi:defcfun ("gsl_sf_ellint_RF" gsl_sf_ellint_RF) :double
  (x :double)
  (y :double)
  (z :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_ellint_RF)

(cffi:defcfun ("gsl_sf_ellint_RJ_e" gsl_sf_ellint_RJ_e) :int
  (x :double)
  (y :double)
  (z :double)
  (p :double)
  (mode :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_ellint_RJ_e)

(cffi:defcfun ("gsl_sf_ellint_RJ" gsl_sf_ellint_RJ) :double
  (x :double)
  (y :double)
  (z :double)
  (p :double)
  (mode :unsigned-int))

(cl:export 'gsl_sf_ellint_RJ)

(cffi:defcfun ("gsl_sf_elljac_e" gsl_sf_elljac_e) :int
  (u :double)
  (m :double)
  (sn :pointer)
  (cn :pointer)
  (dn :pointer))

(cl:export 'gsl_sf_elljac_e)

(cffi:defcfun ("gsl_sf_erfc_e" gsl_sf_erfc_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_erfc_e)

(cffi:defcfun ("gsl_sf_erfc" gsl_sf_erfc) :double
  (x :double))

(cl:export 'gsl_sf_erfc)

(cffi:defcfun ("gsl_sf_log_erfc_e" gsl_sf_log_erfc_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_log_erfc_e)

(cffi:defcfun ("gsl_sf_log_erfc" gsl_sf_log_erfc) :double
  (x :double))

(cl:export 'gsl_sf_log_erfc)

(cffi:defcfun ("gsl_sf_erf_e" gsl_sf_erf_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_erf_e)

(cffi:defcfun ("gsl_sf_erf" gsl_sf_erf) :double
  (x :double))

(cl:export 'gsl_sf_erf)

(cffi:defcfun ("gsl_sf_erf_Z_e" gsl_sf_erf_Z_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_erf_Z_e)

(cffi:defcfun ("gsl_sf_erf_Q_e" gsl_sf_erf_Q_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_erf_Q_e)

(cffi:defcfun ("gsl_sf_erf_Z" gsl_sf_erf_Z) :double
  (x :double))

(cl:export 'gsl_sf_erf_Z)

(cffi:defcfun ("gsl_sf_erf_Q" gsl_sf_erf_Q) :double
  (x :double))

(cl:export 'gsl_sf_erf_Q)

(cffi:defcfun ("gsl_sf_hazard_e" gsl_sf_hazard_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_hazard_e)

(cffi:defcfun ("gsl_sf_hazard" gsl_sf_hazard) :double
  (x :double))

(cl:export 'gsl_sf_hazard)

(cffi:defcfun ("gsl_sf_exp_e" gsl_sf_exp_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_exp_e)

(cffi:defcfun ("gsl_sf_exp" gsl_sf_exp) :double
  (x :double))

(cl:export 'gsl_sf_exp)

(cffi:defcfun ("gsl_sf_exp_e10_e" gsl_sf_exp_e10_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_exp_e10_e)

(cffi:defcfun ("gsl_sf_exp_mult_e" gsl_sf_exp_mult_e) :int
  (x :double)
  (y :double)
  (result :pointer))

(cl:export 'gsl_sf_exp_mult_e)

(cffi:defcfun ("gsl_sf_exp_mult" gsl_sf_exp_mult) :double
  (x :double)
  (y :double))

(cl:export 'gsl_sf_exp_mult)

(cffi:defcfun ("gsl_sf_exp_mult_e10_e" gsl_sf_exp_mult_e10_e) :int
  (x :double)
  (y :double)
  (result :pointer))

(cl:export 'gsl_sf_exp_mult_e10_e)

(cffi:defcfun ("gsl_sf_expm1_e" gsl_sf_expm1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_expm1_e)

(cffi:defcfun ("gsl_sf_expm1" gsl_sf_expm1) :double
  (x :double))

(cl:export 'gsl_sf_expm1)

(cffi:defcfun ("gsl_sf_exprel_e" gsl_sf_exprel_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_exprel_e)

(cffi:defcfun ("gsl_sf_exprel" gsl_sf_exprel) :double
  (x :double))

(cl:export 'gsl_sf_exprel)

(cffi:defcfun ("gsl_sf_exprel_2_e" gsl_sf_exprel_2_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_exprel_2_e)

(cffi:defcfun ("gsl_sf_exprel_2" gsl_sf_exprel_2) :double
  (x :double))

(cl:export 'gsl_sf_exprel_2)

(cffi:defcfun ("gsl_sf_exprel_n_e" gsl_sf_exprel_n_e) :int
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_exprel_n_e)

(cffi:defcfun ("gsl_sf_exprel_n" gsl_sf_exprel_n) :double
  (n :int)
  (x :double))

(cl:export 'gsl_sf_exprel_n)

(cffi:defcfun ("gsl_sf_exprel_n_CF_e" gsl_sf_exprel_n_CF_e) :int
  (n :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_exprel_n_CF_e)

(cffi:defcfun ("gsl_sf_exp_err_e" gsl_sf_exp_err_e) :int
  (x :double)
  (dx :double)
  (result :pointer))

(cl:export 'gsl_sf_exp_err_e)

(cffi:defcfun ("gsl_sf_exp_err_e10_e" gsl_sf_exp_err_e10_e) :int
  (x :double)
  (dx :double)
  (result :pointer))

(cl:export 'gsl_sf_exp_err_e10_e)

(cffi:defcfun ("gsl_sf_exp_mult_err_e" gsl_sf_exp_mult_err_e) :int
  (x :double)
  (dx :double)
  (y :double)
  (dy :double)
  (result :pointer))

(cl:export 'gsl_sf_exp_mult_err_e)

(cffi:defcfun ("gsl_sf_exp_mult_err_e10_e" gsl_sf_exp_mult_err_e10_e) :int
  (x :double)
  (dx :double)
  (y :double)
  (dy :double)
  (result :pointer))

(cl:export 'gsl_sf_exp_mult_err_e10_e)

(cffi:defcfun ("gsl_sf_expint_E1_e" gsl_sf_expint_E1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_expint_E1_e)

(cffi:defcfun ("gsl_sf_expint_E1" gsl_sf_expint_E1) :double
  (x :double))

(cl:export 'gsl_sf_expint_E1)

(cffi:defcfun ("gsl_sf_expint_E2_e" gsl_sf_expint_E2_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_expint_E2_e)

(cffi:defcfun ("gsl_sf_expint_E2" gsl_sf_expint_E2) :double
  (x :double))

(cl:export 'gsl_sf_expint_E2)

(cffi:defcfun ("gsl_sf_expint_En_e" gsl_sf_expint_En_e) :int
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_expint_En_e)

(cffi:defcfun ("gsl_sf_expint_En" gsl_sf_expint_En) :double
  (n :int)
  (x :double))

(cl:export 'gsl_sf_expint_En)

(cffi:defcfun ("gsl_sf_expint_E1_scaled_e" gsl_sf_expint_E1_scaled_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_expint_E1_scaled_e)

(cffi:defcfun ("gsl_sf_expint_E1_scaled" gsl_sf_expint_E1_scaled) :double
  (x :double))

(cl:export 'gsl_sf_expint_E1_scaled)

(cffi:defcfun ("gsl_sf_expint_E2_scaled_e" gsl_sf_expint_E2_scaled_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_expint_E2_scaled_e)

(cffi:defcfun ("gsl_sf_expint_E2_scaled" gsl_sf_expint_E2_scaled) :double
  (x :double))

(cl:export 'gsl_sf_expint_E2_scaled)

(cffi:defcfun ("gsl_sf_expint_En_scaled_e" gsl_sf_expint_En_scaled_e) :int
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_expint_En_scaled_e)

(cffi:defcfun ("gsl_sf_expint_En_scaled" gsl_sf_expint_En_scaled) :double
  (n :int)
  (x :double))

(cl:export 'gsl_sf_expint_En_scaled)

(cffi:defcfun ("gsl_sf_expint_Ei_e" gsl_sf_expint_Ei_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_expint_Ei_e)

(cffi:defcfun ("gsl_sf_expint_Ei" gsl_sf_expint_Ei) :double
  (x :double))

(cl:export 'gsl_sf_expint_Ei)

(cffi:defcfun ("gsl_sf_expint_Ei_scaled_e" gsl_sf_expint_Ei_scaled_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_expint_Ei_scaled_e)

(cffi:defcfun ("gsl_sf_expint_Ei_scaled" gsl_sf_expint_Ei_scaled) :double
  (x :double))

(cl:export 'gsl_sf_expint_Ei_scaled)

(cffi:defcfun ("gsl_sf_Shi_e" gsl_sf_Shi_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_Shi_e)

(cffi:defcfun ("gsl_sf_Shi" gsl_sf_Shi) :double
  (x :double))

(cl:export 'gsl_sf_Shi)

(cffi:defcfun ("gsl_sf_Chi_e" gsl_sf_Chi_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_Chi_e)

(cffi:defcfun ("gsl_sf_Chi" gsl_sf_Chi) :double
  (x :double))

(cl:export 'gsl_sf_Chi)

(cffi:defcfun ("gsl_sf_expint_3_e" gsl_sf_expint_3_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_expint_3_e)

(cffi:defcfun ("gsl_sf_expint_3" gsl_sf_expint_3) :double
  (x :double))

(cl:export 'gsl_sf_expint_3)

(cffi:defcfun ("gsl_sf_Si_e" gsl_sf_Si_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_Si_e)

(cffi:defcfun ("gsl_sf_Si" gsl_sf_Si) :double
  (x :double))

(cl:export 'gsl_sf_Si)

(cffi:defcfun ("gsl_sf_Ci_e" gsl_sf_Ci_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_Ci_e)

(cffi:defcfun ("gsl_sf_Ci" gsl_sf_Ci) :double
  (x :double))

(cl:export 'gsl_sf_Ci)

(cffi:defcfun ("gsl_sf_atanint_e" gsl_sf_atanint_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_atanint_e)

(cffi:defcfun ("gsl_sf_atanint" gsl_sf_atanint) :double
  (x :double))

(cl:export 'gsl_sf_atanint)

(cffi:defcfun ("gsl_sf_fermi_dirac_m1_e" gsl_sf_fermi_dirac_m1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_fermi_dirac_m1_e)

(cffi:defcfun ("gsl_sf_fermi_dirac_m1" gsl_sf_fermi_dirac_m1) :double
  (x :double))

(cl:export 'gsl_sf_fermi_dirac_m1)

(cffi:defcfun ("gsl_sf_fermi_dirac_0_e" gsl_sf_fermi_dirac_0_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_fermi_dirac_0_e)

(cffi:defcfun ("gsl_sf_fermi_dirac_0" gsl_sf_fermi_dirac_0) :double
  (x :double))

(cl:export 'gsl_sf_fermi_dirac_0)

(cffi:defcfun ("gsl_sf_fermi_dirac_1_e" gsl_sf_fermi_dirac_1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_fermi_dirac_1_e)

(cffi:defcfun ("gsl_sf_fermi_dirac_1" gsl_sf_fermi_dirac_1) :double
  (x :double))

(cl:export 'gsl_sf_fermi_dirac_1)

(cffi:defcfun ("gsl_sf_fermi_dirac_2_e" gsl_sf_fermi_dirac_2_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_fermi_dirac_2_e)

(cffi:defcfun ("gsl_sf_fermi_dirac_2" gsl_sf_fermi_dirac_2) :double
  (x :double))

(cl:export 'gsl_sf_fermi_dirac_2)

(cffi:defcfun ("gsl_sf_fermi_dirac_int_e" gsl_sf_fermi_dirac_int_e) :int
  (j :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_fermi_dirac_int_e)

(cffi:defcfun ("gsl_sf_fermi_dirac_int" gsl_sf_fermi_dirac_int) :double
  (j :int)
  (x :double))

(cl:export 'gsl_sf_fermi_dirac_int)

(cffi:defcfun ("gsl_sf_fermi_dirac_mhalf_e" gsl_sf_fermi_dirac_mhalf_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_fermi_dirac_mhalf_e)

(cffi:defcfun ("gsl_sf_fermi_dirac_mhalf" gsl_sf_fermi_dirac_mhalf) :double
  (x :double))

(cl:export 'gsl_sf_fermi_dirac_mhalf)

(cffi:defcfun ("gsl_sf_fermi_dirac_half_e" gsl_sf_fermi_dirac_half_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_fermi_dirac_half_e)

(cffi:defcfun ("gsl_sf_fermi_dirac_half" gsl_sf_fermi_dirac_half) :double
  (x :double))

(cl:export 'gsl_sf_fermi_dirac_half)

(cffi:defcfun ("gsl_sf_fermi_dirac_3half_e" gsl_sf_fermi_dirac_3half_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_fermi_dirac_3half_e)

(cffi:defcfun ("gsl_sf_fermi_dirac_3half" gsl_sf_fermi_dirac_3half) :double
  (x :double))

(cl:export 'gsl_sf_fermi_dirac_3half)

(cffi:defcfun ("gsl_sf_fermi_dirac_inc_0_e" gsl_sf_fermi_dirac_inc_0_e) :int
  (x :double)
  (b :double)
  (result :pointer))

(cl:export 'gsl_sf_fermi_dirac_inc_0_e)

(cffi:defcfun ("gsl_sf_fermi_dirac_inc_0" gsl_sf_fermi_dirac_inc_0) :double
  (x :double)
  (b :double))

(cl:export 'gsl_sf_fermi_dirac_inc_0)

(cffi:defcfun ("gsl_sf_lngamma_e" gsl_sf_lngamma_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_lngamma_e)

(cffi:defcfun ("gsl_sf_lngamma" gsl_sf_lngamma) :double
  (x :double))

(cl:export 'gsl_sf_lngamma)

(cffi:defcfun ("gsl_sf_lngamma_sgn_e" gsl_sf_lngamma_sgn_e) :int
  (x :double)
  (result_lg :pointer)
  (sgn :pointer))

(cl:export 'gsl_sf_lngamma_sgn_e)

(cffi:defcfun ("gsl_sf_gamma_e" gsl_sf_gamma_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_gamma_e)

(cffi:defcfun ("gsl_sf_gamma" gsl_sf_gamma) :double
  (x :double))

(cl:export 'gsl_sf_gamma)

(cffi:defcfun ("gsl_sf_gammastar_e" gsl_sf_gammastar_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_gammastar_e)

(cffi:defcfun ("gsl_sf_gammastar" gsl_sf_gammastar) :double
  (x :double))

(cl:export 'gsl_sf_gammastar)

(cffi:defcfun ("gsl_sf_gammainv_e" gsl_sf_gammainv_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_gammainv_e)

(cffi:defcfun ("gsl_sf_gammainv" gsl_sf_gammainv) :double
  (x :double))

(cl:export 'gsl_sf_gammainv)

(cffi:defcfun ("gsl_sf_lngamma_complex_e" gsl_sf_lngamma_complex_e) :int
  (zr :double)
  (zi :double)
  (lnr :pointer)
  (arg :pointer))

(cl:export 'gsl_sf_lngamma_complex_e)

(cffi:defcfun ("gsl_sf_taylorcoeff_e" gsl_sf_taylorcoeff_e) :int
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_taylorcoeff_e)

(cffi:defcfun ("gsl_sf_taylorcoeff" gsl_sf_taylorcoeff) :double
  (n :int)
  (x :double))

(cl:export 'gsl_sf_taylorcoeff)

(cffi:defcfun ("gsl_sf_fact_e" gsl_sf_fact_e) :int
  (n :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_fact_e)

(cffi:defcfun ("gsl_sf_fact" gsl_sf_fact) :double
  (n :unsigned-int))

(cl:export 'gsl_sf_fact)

(cffi:defcfun ("gsl_sf_doublefact_e" gsl_sf_doublefact_e) :int
  (n :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_doublefact_e)

(cffi:defcfun ("gsl_sf_doublefact" gsl_sf_doublefact) :double
  (n :unsigned-int))

(cl:export 'gsl_sf_doublefact)

(cffi:defcfun ("gsl_sf_lnfact_e" gsl_sf_lnfact_e) :int
  (n :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_lnfact_e)

(cffi:defcfun ("gsl_sf_lnfact" gsl_sf_lnfact) :double
  (n :unsigned-int))

(cl:export 'gsl_sf_lnfact)

(cffi:defcfun ("gsl_sf_lndoublefact_e" gsl_sf_lndoublefact_e) :int
  (n :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_lndoublefact_e)

(cffi:defcfun ("gsl_sf_lndoublefact" gsl_sf_lndoublefact) :double
  (n :unsigned-int))

(cl:export 'gsl_sf_lndoublefact)

(cffi:defcfun ("gsl_sf_lnchoose_e" gsl_sf_lnchoose_e) :int
  (n :unsigned-int)
  (m :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_lnchoose_e)

(cffi:defcfun ("gsl_sf_lnchoose" gsl_sf_lnchoose) :double
  (n :unsigned-int)
  (m :unsigned-int))

(cl:export 'gsl_sf_lnchoose)

(cffi:defcfun ("gsl_sf_choose_e" gsl_sf_choose_e) :int
  (n :unsigned-int)
  (m :unsigned-int)
  (result :pointer))

(cl:export 'gsl_sf_choose_e)

(cffi:defcfun ("gsl_sf_choose" gsl_sf_choose) :double
  (n :unsigned-int)
  (m :unsigned-int))

(cl:export 'gsl_sf_choose)

(cffi:defcfun ("gsl_sf_lnpoch_e" gsl_sf_lnpoch_e) :int
  (a :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_lnpoch_e)

(cffi:defcfun ("gsl_sf_lnpoch" gsl_sf_lnpoch) :double
  (a :double)
  (x :double))

(cl:export 'gsl_sf_lnpoch)

(cffi:defcfun ("gsl_sf_lnpoch_sgn_e" gsl_sf_lnpoch_sgn_e) :int
  (a :double)
  (x :double)
  (result :pointer)
  (sgn :pointer))

(cl:export 'gsl_sf_lnpoch_sgn_e)

(cffi:defcfun ("gsl_sf_poch_e" gsl_sf_poch_e) :int
  (a :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_poch_e)

(cffi:defcfun ("gsl_sf_poch" gsl_sf_poch) :double
  (a :double)
  (x :double))

(cl:export 'gsl_sf_poch)

(cffi:defcfun ("gsl_sf_pochrel_e" gsl_sf_pochrel_e) :int
  (a :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_pochrel_e)

(cffi:defcfun ("gsl_sf_pochrel" gsl_sf_pochrel) :double
  (a :double)
  (x :double))

(cl:export 'gsl_sf_pochrel)

(cffi:defcfun ("gsl_sf_gamma_inc_Q_e" gsl_sf_gamma_inc_Q_e) :int
  (a :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_gamma_inc_Q_e)

(cffi:defcfun ("gsl_sf_gamma_inc_Q" gsl_sf_gamma_inc_Q) :double
  (a :double)
  (x :double))

(cl:export 'gsl_sf_gamma_inc_Q)

(cffi:defcfun ("gsl_sf_gamma_inc_P_e" gsl_sf_gamma_inc_P_e) :int
  (a :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_gamma_inc_P_e)

(cffi:defcfun ("gsl_sf_gamma_inc_P" gsl_sf_gamma_inc_P) :double
  (a :double)
  (x :double))

(cl:export 'gsl_sf_gamma_inc_P)

(cffi:defcfun ("gsl_sf_gamma_inc_e" gsl_sf_gamma_inc_e) :int
  (a :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_gamma_inc_e)

(cffi:defcfun ("gsl_sf_gamma_inc" gsl_sf_gamma_inc) :double
  (a :double)
  (x :double))

(cl:export 'gsl_sf_gamma_inc)

(cffi:defcfun ("gsl_sf_lnbeta_e" gsl_sf_lnbeta_e) :int
  (a :double)
  (b :double)
  (result :pointer))

(cl:export 'gsl_sf_lnbeta_e)

(cffi:defcfun ("gsl_sf_lnbeta" gsl_sf_lnbeta) :double
  (a :double)
  (b :double))

(cl:export 'gsl_sf_lnbeta)

(cffi:defcfun ("gsl_sf_lnbeta_sgn_e" gsl_sf_lnbeta_sgn_e) :int
  (x :double)
  (y :double)
  (result :pointer)
  (sgn :pointer))

(cl:export 'gsl_sf_lnbeta_sgn_e)

(cffi:defcfun ("gsl_sf_beta_e" gsl_sf_beta_e) :int
  (a :double)
  (b :double)
  (result :pointer))

(cl:export 'gsl_sf_beta_e)

(cffi:defcfun ("gsl_sf_beta" gsl_sf_beta) :double
  (a :double)
  (b :double))

(cl:export 'gsl_sf_beta)

(cffi:defcfun ("gsl_sf_beta_inc_e" gsl_sf_beta_inc_e) :int
  (a :double)
  (b :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_beta_inc_e)

(cffi:defcfun ("gsl_sf_beta_inc" gsl_sf_beta_inc) :double
  (a :double)
  (b :double)
  (x :double))

(cl:export 'gsl_sf_beta_inc)

(cl:defconstant GSL_SF_GAMMA_XMAX 171.0d0)

(cl:export 'GSL_SF_GAMMA_XMAX)

(cl:defconstant GSL_SF_FACT_NMAX 170)

(cl:export 'GSL_SF_FACT_NMAX)

(cl:defconstant GSL_SF_DOUBLEFACT_NMAX 297)

(cl:export 'GSL_SF_DOUBLEFACT_NMAX)

(cffi:defcfun ("gsl_sf_gegenpoly_1_e" gsl_sf_gegenpoly_1_e) :int
  (lambda :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_gegenpoly_1_e)

(cffi:defcfun ("gsl_sf_gegenpoly_2_e" gsl_sf_gegenpoly_2_e) :int
  (lambda :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_gegenpoly_2_e)

(cffi:defcfun ("gsl_sf_gegenpoly_3_e" gsl_sf_gegenpoly_3_e) :int
  (lambda :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_gegenpoly_3_e)

(cffi:defcfun ("gsl_sf_gegenpoly_1" gsl_sf_gegenpoly_1) :double
  (lambda :double)
  (x :double))

(cl:export 'gsl_sf_gegenpoly_1)

(cffi:defcfun ("gsl_sf_gegenpoly_2" gsl_sf_gegenpoly_2) :double
  (lambda :double)
  (x :double))

(cl:export 'gsl_sf_gegenpoly_2)

(cffi:defcfun ("gsl_sf_gegenpoly_3" gsl_sf_gegenpoly_3) :double
  (lambda :double)
  (x :double))

(cl:export 'gsl_sf_gegenpoly_3)

(cffi:defcfun ("gsl_sf_gegenpoly_n_e" gsl_sf_gegenpoly_n_e) :int
  (n :int)
  (lambda :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_gegenpoly_n_e)

(cffi:defcfun ("gsl_sf_gegenpoly_n" gsl_sf_gegenpoly_n) :double
  (n :int)
  (lambda :double)
  (x :double))

(cl:export 'gsl_sf_gegenpoly_n)

(cffi:defcfun ("gsl_sf_gegenpoly_array" gsl_sf_gegenpoly_array) :int
  (nmax :int)
  (lambda :double)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_gegenpoly_array)

(cffi:defcfun ("gsl_sf_hyperg_0F1_e" gsl_sf_hyperg_0F1_e) :int
  (c :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_hyperg_0F1_e)

(cffi:defcfun ("gsl_sf_hyperg_0F1" gsl_sf_hyperg_0F1) :double
  (c :double)
  (x :double))

(cl:export 'gsl_sf_hyperg_0F1)

(cffi:defcfun ("gsl_sf_hyperg_1F1_int_e" gsl_sf_hyperg_1F1_int_e) :int
  (m :int)
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_hyperg_1F1_int_e)

(cffi:defcfun ("gsl_sf_hyperg_1F1_int" gsl_sf_hyperg_1F1_int) :double
  (m :int)
  (n :int)
  (x :double))

(cl:export 'gsl_sf_hyperg_1F1_int)

(cffi:defcfun ("gsl_sf_hyperg_1F1_e" gsl_sf_hyperg_1F1_e) :int
  (a :double)
  (b :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_hyperg_1F1_e)

(cffi:defcfun ("gsl_sf_hyperg_1F1" gsl_sf_hyperg_1F1) :double
  (a :double)
  (b :double)
  (x :double))

(cl:export 'gsl_sf_hyperg_1F1)

(cffi:defcfun ("gsl_sf_hyperg_U_int_e" gsl_sf_hyperg_U_int_e) :int
  (m :int)
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_hyperg_U_int_e)

(cffi:defcfun ("gsl_sf_hyperg_U_int" gsl_sf_hyperg_U_int) :double
  (m :int)
  (n :int)
  (x :double))

(cl:export 'gsl_sf_hyperg_U_int)

(cffi:defcfun ("gsl_sf_hyperg_U_int_e10_e" gsl_sf_hyperg_U_int_e10_e) :int
  (m :int)
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_hyperg_U_int_e10_e)

(cffi:defcfun ("gsl_sf_hyperg_U_e" gsl_sf_hyperg_U_e) :int
  (a :double)
  (b :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_hyperg_U_e)

(cffi:defcfun ("gsl_sf_hyperg_U" gsl_sf_hyperg_U) :double
  (a :double)
  (b :double)
  (x :double))

(cl:export 'gsl_sf_hyperg_U)

(cffi:defcfun ("gsl_sf_hyperg_U_e10_e" gsl_sf_hyperg_U_e10_e) :int
  (a :double)
  (b :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_hyperg_U_e10_e)

(cffi:defcfun ("gsl_sf_hyperg_2F1_e" gsl_sf_hyperg_2F1_e) :int
  (a :double)
  (b :double)
  (c :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_hyperg_2F1_e)

(cffi:defcfun ("gsl_sf_hyperg_2F1" gsl_sf_hyperg_2F1) :double
  (a :double)
  (b :double)
  (c :double)
  (x :double))

(cl:export 'gsl_sf_hyperg_2F1)

(cffi:defcfun ("gsl_sf_hyperg_2F1_conj_e" gsl_sf_hyperg_2F1_conj_e) :int
  (aR :double)
  (aI :double)
  (c :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_hyperg_2F1_conj_e)

(cffi:defcfun ("gsl_sf_hyperg_2F1_conj" gsl_sf_hyperg_2F1_conj) :double
  (aR :double)
  (aI :double)
  (c :double)
  (x :double))

(cl:export 'gsl_sf_hyperg_2F1_conj)

(cffi:defcfun ("gsl_sf_hyperg_2F1_renorm_e" gsl_sf_hyperg_2F1_renorm_e) :int
  (a :double)
  (b :double)
  (c :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_hyperg_2F1_renorm_e)

(cffi:defcfun ("gsl_sf_hyperg_2F1_renorm" gsl_sf_hyperg_2F1_renorm) :double
  (a :double)
  (b :double)
  (c :double)
  (x :double))

(cl:export 'gsl_sf_hyperg_2F1_renorm)

(cffi:defcfun ("gsl_sf_hyperg_2F1_conj_renorm_e" gsl_sf_hyperg_2F1_conj_renorm_e) :int
  (aR :double)
  (aI :double)
  (c :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_hyperg_2F1_conj_renorm_e)

(cffi:defcfun ("gsl_sf_hyperg_2F1_conj_renorm" gsl_sf_hyperg_2F1_conj_renorm) :double
  (aR :double)
  (aI :double)
  (c :double)
  (x :double))

(cl:export 'gsl_sf_hyperg_2F1_conj_renorm)

(cffi:defcfun ("gsl_sf_hyperg_2F0_e" gsl_sf_hyperg_2F0_e) :int
  (a :double)
  (b :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_hyperg_2F0_e)

(cffi:defcfun ("gsl_sf_hyperg_2F0" gsl_sf_hyperg_2F0) :double
  (a :double)
  (b :double)
  (x :double))

(cl:export 'gsl_sf_hyperg_2F0)

(cffi:defcfun ("gsl_sf_laguerre_1_e" gsl_sf_laguerre_1_e) :int
  (a :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_laguerre_1_e)

(cffi:defcfun ("gsl_sf_laguerre_2_e" gsl_sf_laguerre_2_e) :int
  (a :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_laguerre_2_e)

(cffi:defcfun ("gsl_sf_laguerre_3_e" gsl_sf_laguerre_3_e) :int
  (a :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_laguerre_3_e)

(cffi:defcfun ("gsl_sf_laguerre_1" gsl_sf_laguerre_1) :double
  (a :double)
  (x :double))

(cl:export 'gsl_sf_laguerre_1)

(cffi:defcfun ("gsl_sf_laguerre_2" gsl_sf_laguerre_2) :double
  (a :double)
  (x :double))

(cl:export 'gsl_sf_laguerre_2)

(cffi:defcfun ("gsl_sf_laguerre_3" gsl_sf_laguerre_3) :double
  (a :double)
  (x :double))

(cl:export 'gsl_sf_laguerre_3)

(cffi:defcfun ("gsl_sf_laguerre_n_e" gsl_sf_laguerre_n_e) :int
  (n :int)
  (a :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_laguerre_n_e)

(cffi:defcfun ("gsl_sf_laguerre_n" gsl_sf_laguerre_n) :double
  (n :int)
  (a :double)
  (x :double))

(cl:export 'gsl_sf_laguerre_n)

(cffi:defcfun ("gsl_sf_lambert_W0_e" gsl_sf_lambert_W0_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_lambert_W0_e)

(cffi:defcfun ("gsl_sf_lambert_W0" gsl_sf_lambert_W0) :double
  (x :double))

(cl:export 'gsl_sf_lambert_W0)

(cffi:defcfun ("gsl_sf_lambert_Wm1_e" gsl_sf_lambert_Wm1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_lambert_Wm1_e)

(cffi:defcfun ("gsl_sf_lambert_Wm1" gsl_sf_lambert_Wm1) :double
  (x :double))

(cl:export 'gsl_sf_lambert_Wm1)

(cffi:defcfun ("gsl_sf_legendre_Pl_e" gsl_sf_legendre_Pl_e) :int
  (l :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_legendre_Pl_e)

(cffi:defcfun ("gsl_sf_legendre_Pl" gsl_sf_legendre_Pl) :double
  (l :int)
  (x :double))

(cl:export 'gsl_sf_legendre_Pl)

(cffi:defcfun ("gsl_sf_legendre_Pl_array" gsl_sf_legendre_Pl_array) :int
  (lmax :int)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_legendre_Pl_array)

(cffi:defcfun ("gsl_sf_legendre_Pl_deriv_array" gsl_sf_legendre_Pl_deriv_array) :int
  (lmax :int)
  (x :double)
  (result_array :pointer)
  (result_deriv_array :pointer))

(cl:export 'gsl_sf_legendre_Pl_deriv_array)

(cffi:defcfun ("gsl_sf_legendre_P1_e" gsl_sf_legendre_P1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_legendre_P1_e)

(cffi:defcfun ("gsl_sf_legendre_P2_e" gsl_sf_legendre_P2_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_legendre_P2_e)

(cffi:defcfun ("gsl_sf_legendre_P3_e" gsl_sf_legendre_P3_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_legendre_P3_e)

(cffi:defcfun ("gsl_sf_legendre_P1" gsl_sf_legendre_P1) :double
  (x :double))

(cl:export 'gsl_sf_legendre_P1)

(cffi:defcfun ("gsl_sf_legendre_P2" gsl_sf_legendre_P2) :double
  (x :double))

(cl:export 'gsl_sf_legendre_P2)

(cffi:defcfun ("gsl_sf_legendre_P3" gsl_sf_legendre_P3) :double
  (x :double))

(cl:export 'gsl_sf_legendre_P3)

(cffi:defcfun ("gsl_sf_legendre_Q0_e" gsl_sf_legendre_Q0_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_legendre_Q0_e)

(cffi:defcfun ("gsl_sf_legendre_Q0" gsl_sf_legendre_Q0) :double
  (x :double))

(cl:export 'gsl_sf_legendre_Q0)

(cffi:defcfun ("gsl_sf_legendre_Q1_e" gsl_sf_legendre_Q1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_legendre_Q1_e)

(cffi:defcfun ("gsl_sf_legendre_Q1" gsl_sf_legendre_Q1) :double
  (x :double))

(cl:export 'gsl_sf_legendre_Q1)

(cffi:defcfun ("gsl_sf_legendre_Ql_e" gsl_sf_legendre_Ql_e) :int
  (l :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_legendre_Ql_e)

(cffi:defcfun ("gsl_sf_legendre_Ql" gsl_sf_legendre_Ql) :double
  (l :int)
  (x :double))

(cl:export 'gsl_sf_legendre_Ql)

(cffi:defcfun ("gsl_sf_legendre_Plm_e" gsl_sf_legendre_Plm_e) :int
  (l :int)
  (m :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_legendre_Plm_e)

(cffi:defcfun ("gsl_sf_legendre_Plm" gsl_sf_legendre_Plm) :double
  (l :int)
  (m :int)
  (x :double))

(cl:export 'gsl_sf_legendre_Plm)

(cffi:defcfun ("gsl_sf_legendre_Plm_array" gsl_sf_legendre_Plm_array) :int
  (lmax :int)
  (m :int)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_legendre_Plm_array)

(cffi:defcfun ("gsl_sf_legendre_Plm_deriv_array" gsl_sf_legendre_Plm_deriv_array) :int
  (lmax :int)
  (m :int)
  (x :double)
  (result_array :pointer)
  (result_deriv_array :pointer))

(cl:export 'gsl_sf_legendre_Plm_deriv_array)

(cffi:defcfun ("gsl_sf_legendre_sphPlm_e" gsl_sf_legendre_sphPlm_e) :int
  (l :int)
  (m :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_legendre_sphPlm_e)

(cffi:defcfun ("gsl_sf_legendre_sphPlm" gsl_sf_legendre_sphPlm) :double
  (l :int)
  (m :int)
  (x :double))

(cl:export 'gsl_sf_legendre_sphPlm)

(cffi:defcfun ("gsl_sf_legendre_sphPlm_array" gsl_sf_legendre_sphPlm_array) :int
  (lmax :int)
  (m :int)
  (x :double)
  (result_array :pointer))

(cl:export 'gsl_sf_legendre_sphPlm_array)

(cffi:defcfun ("gsl_sf_legendre_sphPlm_deriv_array" gsl_sf_legendre_sphPlm_deriv_array) :int
  (lmax :int)
  (m :int)
  (x :double)
  (result_array :pointer)
  (result_deriv_array :pointer))

(cl:export 'gsl_sf_legendre_sphPlm_deriv_array)

(cffi:defcfun ("gsl_sf_legendre_array_size" gsl_sf_legendre_array_size) :int
  (lmax :int)
  (m :int))

(cl:export 'gsl_sf_legendre_array_size)

(cffi:defcfun ("gsl_sf_conicalP_half_e" gsl_sf_conicalP_half_e) :int
  (lambda :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_conicalP_half_e)

(cffi:defcfun ("gsl_sf_conicalP_half" gsl_sf_conicalP_half) :double
  (lambda :double)
  (x :double))

(cl:export 'gsl_sf_conicalP_half)

(cffi:defcfun ("gsl_sf_conicalP_mhalf_e" gsl_sf_conicalP_mhalf_e) :int
  (lambda :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_conicalP_mhalf_e)

(cffi:defcfun ("gsl_sf_conicalP_mhalf" gsl_sf_conicalP_mhalf) :double
  (lambda :double)
  (x :double))

(cl:export 'gsl_sf_conicalP_mhalf)

(cffi:defcfun ("gsl_sf_conicalP_0_e" gsl_sf_conicalP_0_e) :int
  (lambda :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_conicalP_0_e)

(cffi:defcfun ("gsl_sf_conicalP_0" gsl_sf_conicalP_0) :double
  (lambda :double)
  (x :double))

(cl:export 'gsl_sf_conicalP_0)

(cffi:defcfun ("gsl_sf_conicalP_1_e" gsl_sf_conicalP_1_e) :int
  (lambda :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_conicalP_1_e)

(cffi:defcfun ("gsl_sf_conicalP_1" gsl_sf_conicalP_1) :double
  (lambda :double)
  (x :double))

(cl:export 'gsl_sf_conicalP_1)

(cffi:defcfun ("gsl_sf_conicalP_sph_reg_e" gsl_sf_conicalP_sph_reg_e) :int
  (l :int)
  (lambda :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_conicalP_sph_reg_e)

(cffi:defcfun ("gsl_sf_conicalP_sph_reg" gsl_sf_conicalP_sph_reg) :double
  (l :int)
  (lambda :double)
  (x :double))

(cl:export 'gsl_sf_conicalP_sph_reg)

(cffi:defcfun ("gsl_sf_conicalP_cyl_reg_e" gsl_sf_conicalP_cyl_reg_e) :int
  (m :int)
  (lambda :double)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_conicalP_cyl_reg_e)

(cffi:defcfun ("gsl_sf_conicalP_cyl_reg" gsl_sf_conicalP_cyl_reg) :double
  (m :int)
  (lambda :double)
  (x :double))

(cl:export 'gsl_sf_conicalP_cyl_reg)

(cffi:defcfun ("gsl_sf_legendre_H3d_0_e" gsl_sf_legendre_H3d_0_e) :int
  (lambda :double)
  (eta :double)
  (result :pointer))

(cl:export 'gsl_sf_legendre_H3d_0_e)

(cffi:defcfun ("gsl_sf_legendre_H3d_0" gsl_sf_legendre_H3d_0) :double
  (lambda :double)
  (eta :double))

(cl:export 'gsl_sf_legendre_H3d_0)

(cffi:defcfun ("gsl_sf_legendre_H3d_1_e" gsl_sf_legendre_H3d_1_e) :int
  (lambda :double)
  (eta :double)
  (result :pointer))

(cl:export 'gsl_sf_legendre_H3d_1_e)

(cffi:defcfun ("gsl_sf_legendre_H3d_1" gsl_sf_legendre_H3d_1) :double
  (lambda :double)
  (eta :double))

(cl:export 'gsl_sf_legendre_H3d_1)

(cffi:defcfun ("gsl_sf_legendre_H3d_e" gsl_sf_legendre_H3d_e) :int
  (l :int)
  (lambda :double)
  (eta :double)
  (result :pointer))

(cl:export 'gsl_sf_legendre_H3d_e)

(cffi:defcfun ("gsl_sf_legendre_H3d" gsl_sf_legendre_H3d) :double
  (l :int)
  (lambda :double)
  (eta :double))

(cl:export 'gsl_sf_legendre_H3d)

(cffi:defcfun ("gsl_sf_legendre_H3d_array" gsl_sf_legendre_H3d_array) :int
  (lmax :int)
  (lambda :double)
  (eta :double)
  (result_array :pointer))

(cl:export 'gsl_sf_legendre_H3d_array)

(cffi:defcfun ("gsl_sf_log_e" gsl_sf_log_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_log_e)

(cffi:defcfun ("gsl_sf_log" gsl_sf_log) :double
  (x :double))

(cl:export 'gsl_sf_log)

(cffi:defcfun ("gsl_sf_log_abs_e" gsl_sf_log_abs_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_log_abs_e)

(cffi:defcfun ("gsl_sf_log_abs" gsl_sf_log_abs) :double
  (x :double))

(cl:export 'gsl_sf_log_abs)

(cffi:defcfun ("gsl_sf_complex_log_e" gsl_sf_complex_log_e) :int
  (zr :double)
  (zi :double)
  (lnr :pointer)
  (theta :pointer))

(cl:export 'gsl_sf_complex_log_e)

(cffi:defcfun ("gsl_sf_log_1plusx_e" gsl_sf_log_1plusx_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_log_1plusx_e)

(cffi:defcfun ("gsl_sf_log_1plusx" gsl_sf_log_1plusx) :double
  (x :double))

(cl:export 'gsl_sf_log_1plusx)

(cffi:defcfun ("gsl_sf_log_1plusx_mx_e" gsl_sf_log_1plusx_mx_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_log_1plusx_mx_e)

(cffi:defcfun ("gsl_sf_log_1plusx_mx" gsl_sf_log_1plusx_mx) :double
  (x :double))

(cl:export 'gsl_sf_log_1plusx_mx)

(cl:defconstant GSL_SF_MATHIEU_COEFF 100)

(cl:export 'GSL_SF_MATHIEU_COEFF)

(cffi:defcstruct gsl_sf_mathieu_workspace
	(size :pointer)
	(even_order :pointer)
	(odd_order :pointer)
	(extra_values :int)
	(qa :double)
	(qb :double)
	(aa :pointer)
	(bb :pointer)
	(dd :pointer)
	(ee :pointer)
	(tt :pointer)
	(e2 :pointer)
	(zz :pointer)
	(eval :pointer)
	(evec :pointer)
	(wmat :pointer))

(cl:export 'gsl_sf_mathieu_workspace)

(cl:export 'size)

(cl:export 'even_order)

(cl:export 'odd_order)

(cl:export 'extra_values)

(cl:export 'qa)

(cl:export 'qb)

(cl:export 'aa)

(cl:export 'bb)

(cl:export 'dd)

(cl:export 'ee)

(cl:export 'tt)

(cl:export 'e2)

(cl:export 'zz)

(cl:export 'eval)

(cl:export 'evec)

(cl:export 'wmat)

(cffi:defcfun ("gsl_sf_mathieu_a_array" gsl_sf_mathieu_a_array) :int
  (order_min :int)
  (order_max :int)
  (qq :double)
  (work :pointer)
  (result_array :pointer))

(cl:export 'gsl_sf_mathieu_a_array)

(cffi:defcfun ("gsl_sf_mathieu_b_array" gsl_sf_mathieu_b_array) :int
  (order_min :int)
  (order_max :int)
  (qq :double)
  (work :pointer)
  (result_array :pointer))

(cl:export 'gsl_sf_mathieu_b_array)

(cffi:defcfun ("gsl_sf_mathieu_a" gsl_sf_mathieu_a) :int
  (order :int)
  (qq :double)
  (result :pointer))

(cl:export 'gsl_sf_mathieu_a)

(cffi:defcfun ("gsl_sf_mathieu_b" gsl_sf_mathieu_b) :int
  (order :int)
  (qq :double)
  (result :pointer))

(cl:export 'gsl_sf_mathieu_b)

(cffi:defcfun ("gsl_sf_mathieu_a_coeff" gsl_sf_mathieu_a_coeff) :int
  (order :int)
  (qq :double)
  (aa :double)
  (coeff :pointer))

(cl:export 'gsl_sf_mathieu_a_coeff)

(cffi:defcfun ("gsl_sf_mathieu_b_coeff" gsl_sf_mathieu_b_coeff) :int
  (order :int)
  (qq :double)
  (aa :double)
  (coeff :pointer))

(cl:export 'gsl_sf_mathieu_b_coeff)

(cffi:defcfun ("gsl_sf_mathieu_alloc" gsl_sf_mathieu_alloc) :pointer
  (nn :pointer)
  (qq :double))

(cl:export 'gsl_sf_mathieu_alloc)

(cffi:defcfun ("gsl_sf_mathieu_free" gsl_sf_mathieu_free) :void
  (workspace :pointer))

(cl:export 'gsl_sf_mathieu_free)

(cffi:defcfun ("gsl_sf_mathieu_ce" gsl_sf_mathieu_ce) :int
  (order :int)
  (qq :double)
  (zz :double)
  (result :pointer))

(cl:export 'gsl_sf_mathieu_ce)

(cffi:defcfun ("gsl_sf_mathieu_se" gsl_sf_mathieu_se) :int
  (order :int)
  (qq :double)
  (zz :double)
  (result :pointer))

(cl:export 'gsl_sf_mathieu_se)

(cffi:defcfun ("gsl_sf_mathieu_ce_array" gsl_sf_mathieu_ce_array) :int
  (nmin :int)
  (nmax :int)
  (qq :double)
  (zz :double)
  (work :pointer)
  (result_array :pointer))

(cl:export 'gsl_sf_mathieu_ce_array)

(cffi:defcfun ("gsl_sf_mathieu_se_array" gsl_sf_mathieu_se_array) :int
  (nmin :int)
  (nmax :int)
  (qq :double)
  (zz :double)
  (work :pointer)
  (result_array :pointer))

(cl:export 'gsl_sf_mathieu_se_array)

(cffi:defcfun ("gsl_sf_mathieu_Mc" gsl_sf_mathieu_Mc) :int
  (kind :int)
  (order :int)
  (qq :double)
  (zz :double)
  (result :pointer))

(cl:export 'gsl_sf_mathieu_Mc)

(cffi:defcfun ("gsl_sf_mathieu_Ms" gsl_sf_mathieu_Ms) :int
  (kind :int)
  (order :int)
  (qq :double)
  (zz :double)
  (result :pointer))

(cl:export 'gsl_sf_mathieu_Ms)

(cffi:defcfun ("gsl_sf_mathieu_Mc_array" gsl_sf_mathieu_Mc_array) :int
  (kind :int)
  (nmin :int)
  (nmax :int)
  (qq :double)
  (zz :double)
  (work :pointer)
  (result_array :pointer))

(cl:export 'gsl_sf_mathieu_Mc_array)

(cffi:defcfun ("gsl_sf_mathieu_Ms_array" gsl_sf_mathieu_Ms_array) :int
  (kind :int)
  (nmin :int)
  (nmax :int)
  (qq :double)
  (zz :double)
  (work :pointer)
  (result_array :pointer))

(cl:export 'gsl_sf_mathieu_Ms_array)

(cffi:defcfun ("gsl_sf_pow_int_e" gsl_sf_pow_int_e) :int
  (x :double)
  (n :int)
  (result :pointer))

(cl:export 'gsl_sf_pow_int_e)

(cffi:defcfun ("gsl_sf_pow_int" gsl_sf_pow_int) :double
  (x :double)
  (n :int))

(cl:export 'gsl_sf_pow_int)

(cffi:defcfun ("gsl_sf_psi_int_e" gsl_sf_psi_int_e) :int
  (n :int)
  (result :pointer))

(cl:export 'gsl_sf_psi_int_e)

(cffi:defcfun ("gsl_sf_psi_int" gsl_sf_psi_int) :double
  (n :int))

(cl:export 'gsl_sf_psi_int)

(cffi:defcfun ("gsl_sf_psi_e" gsl_sf_psi_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_psi_e)

(cffi:defcfun ("gsl_sf_psi" gsl_sf_psi) :double
  (x :double))

(cl:export 'gsl_sf_psi)

(cffi:defcfun ("gsl_sf_psi_1piy_e" gsl_sf_psi_1piy_e) :int
  (y :double)
  (result :pointer))

(cl:export 'gsl_sf_psi_1piy_e)

(cffi:defcfun ("gsl_sf_psi_1piy" gsl_sf_psi_1piy) :double
  (y :double))

(cl:export 'gsl_sf_psi_1piy)

(cffi:defcfun ("gsl_sf_complex_psi_e" gsl_sf_complex_psi_e) :int
  (x :double)
  (y :double)
  (result_re :pointer)
  (result_im :pointer))

(cl:export 'gsl_sf_complex_psi_e)

(cffi:defcfun ("gsl_sf_psi_1_int_e" gsl_sf_psi_1_int_e) :int
  (n :int)
  (result :pointer))

(cl:export 'gsl_sf_psi_1_int_e)

(cffi:defcfun ("gsl_sf_psi_1_int" gsl_sf_psi_1_int) :double
  (n :int))

(cl:export 'gsl_sf_psi_1_int)

(cffi:defcfun ("gsl_sf_psi_1_e" gsl_sf_psi_1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_psi_1_e)

(cffi:defcfun ("gsl_sf_psi_1" gsl_sf_psi_1) :double
  (x :double))

(cl:export 'gsl_sf_psi_1)

(cffi:defcfun ("gsl_sf_psi_n_e" gsl_sf_psi_n_e) :int
  (n :int)
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_psi_n_e)

(cffi:defcfun ("gsl_sf_psi_n" gsl_sf_psi_n) :double
  (n :int)
  (x :double))

(cl:export 'gsl_sf_psi_n)

(cffi:defcstruct gsl_sf_result_struct
	(val :double)
	(err :double))

(cl:export 'gsl_sf_result_struct)

(cl:export 'val)

(cl:export 'err)

(cffi:defcstruct gsl_sf_result_e10_struct
	(val :double)
	(err :double)
	(e10 :int))

(cl:export 'gsl_sf_result_e10_struct)

(cl:export 'val)

(cl:export 'err)

(cl:export 'e10)

(cffi:defcfun ("gsl_sf_result_smash_e" gsl_sf_result_smash_e) :int
  (re :pointer)
  (r :pointer))

(cl:export 'gsl_sf_result_smash_e)

(cffi:defcfun ("gsl_sf_synchrotron_1_e" gsl_sf_synchrotron_1_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_synchrotron_1_e)

(cffi:defcfun ("gsl_sf_synchrotron_1" gsl_sf_synchrotron_1) :double
  (x :double))

(cl:export 'gsl_sf_synchrotron_1)

(cffi:defcfun ("gsl_sf_synchrotron_2_e" gsl_sf_synchrotron_2_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_synchrotron_2_e)

(cffi:defcfun ("gsl_sf_synchrotron_2" gsl_sf_synchrotron_2) :double
  (x :double))

(cl:export 'gsl_sf_synchrotron_2)

(cffi:defcfun ("gsl_sf_transport_2_e" gsl_sf_transport_2_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_transport_2_e)

(cffi:defcfun ("gsl_sf_transport_2" gsl_sf_transport_2) :double
  (x :double))

(cl:export 'gsl_sf_transport_2)

(cffi:defcfun ("gsl_sf_transport_3_e" gsl_sf_transport_3_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_transport_3_e)

(cffi:defcfun ("gsl_sf_transport_3" gsl_sf_transport_3) :double
  (x :double))

(cl:export 'gsl_sf_transport_3)

(cffi:defcfun ("gsl_sf_transport_4_e" gsl_sf_transport_4_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_transport_4_e)

(cffi:defcfun ("gsl_sf_transport_4" gsl_sf_transport_4) :double
  (x :double))

(cl:export 'gsl_sf_transport_4)

(cffi:defcfun ("gsl_sf_transport_5_e" gsl_sf_transport_5_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_transport_5_e)

(cffi:defcfun ("gsl_sf_transport_5" gsl_sf_transport_5) :double
  (x :double))

(cl:export 'gsl_sf_transport_5)

(cffi:defcfun ("gsl_sf_sin_e" gsl_sf_sin_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_sin_e)

(cffi:defcfun ("gsl_sf_sin" gsl_sf_sin) :double
  (x :double))

(cl:export 'gsl_sf_sin)

(cffi:defcfun ("gsl_sf_cos_e" gsl_sf_cos_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_cos_e)

(cffi:defcfun ("gsl_sf_cos" gsl_sf_cos) :double
  (x :double))

(cl:export 'gsl_sf_cos)

(cffi:defcfun ("gsl_sf_hypot_e" gsl_sf_hypot_e) :int
  (x :double)
  (y :double)
  (result :pointer))

(cl:export 'gsl_sf_hypot_e)

(cffi:defcfun ("gsl_sf_hypot" gsl_sf_hypot) :double
  (x :double)
  (y :double))

(cl:export 'gsl_sf_hypot)

(cffi:defcfun ("gsl_sf_complex_sin_e" gsl_sf_complex_sin_e) :int
  (zr :double)
  (zi :double)
  (szr :pointer)
  (szi :pointer))

(cl:export 'gsl_sf_complex_sin_e)

(cffi:defcfun ("gsl_sf_complex_cos_e" gsl_sf_complex_cos_e) :int
  (zr :double)
  (zi :double)
  (czr :pointer)
  (czi :pointer))

(cl:export 'gsl_sf_complex_cos_e)

(cffi:defcfun ("gsl_sf_complex_logsin_e" gsl_sf_complex_logsin_e) :int
  (zr :double)
  (zi :double)
  (lszr :pointer)
  (lszi :pointer))

(cl:export 'gsl_sf_complex_logsin_e)

(cffi:defcfun ("gsl_sf_sinc_e" gsl_sf_sinc_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_sinc_e)

(cffi:defcfun ("gsl_sf_sinc" gsl_sf_sinc) :double
  (x :double))

(cl:export 'gsl_sf_sinc)

(cffi:defcfun ("gsl_sf_lnsinh_e" gsl_sf_lnsinh_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_lnsinh_e)

(cffi:defcfun ("gsl_sf_lnsinh" gsl_sf_lnsinh) :double
  (x :double))

(cl:export 'gsl_sf_lnsinh)

(cffi:defcfun ("gsl_sf_lncosh_e" gsl_sf_lncosh_e) :int
  (x :double)
  (result :pointer))

(cl:export 'gsl_sf_lncosh_e)

(cffi:defcfun ("gsl_sf_lncosh" gsl_sf_lncosh) :double
  (x :double))

(cl:export 'gsl_sf_lncosh)

(cffi:defcfun ("gsl_sf_polar_to_rect" gsl_sf_polar_to_rect) :int
  (r :double)
  (theta :double)
  (x :pointer)
  (y :pointer))

(cl:export 'gsl_sf_polar_to_rect)

(cffi:defcfun ("gsl_sf_rect_to_polar" gsl_sf_rect_to_polar) :int
  (x :double)
  (y :double)
  (r :pointer)
  (theta :pointer))

(cl:export 'gsl_sf_rect_to_polar)

(cffi:defcfun ("gsl_sf_sin_err_e" gsl_sf_sin_err_e) :int
  (x :double)
  (dx :double)
  (result :pointer))

(cl:export 'gsl_sf_sin_err_e)

(cffi:defcfun ("gsl_sf_cos_err_e" gsl_sf_cos_err_e) :int
  (x :double)
  (dx :double)
  (result :pointer))

(cl:export 'gsl_sf_cos_err_e)

(cffi:defcfun ("gsl_sf_angle_restrict_symm_e" gsl_sf_angle_restrict_symm_e) :int
  (theta :pointer))

(cl:export 'gsl_sf_angle_restrict_symm_e)

(cffi:defcfun ("gsl_sf_angle_restrict_symm" gsl_sf_angle_restrict_symm) :double
  (theta :double))

(cl:export 'gsl_sf_angle_restrict_symm)

(cffi:defcfun ("gsl_sf_angle_restrict_pos_e" gsl_sf_angle_restrict_pos_e) :int
  (theta :pointer))

(cl:export 'gsl_sf_angle_restrict_pos_e)

(cffi:defcfun ("gsl_sf_angle_restrict_pos" gsl_sf_angle_restrict_pos) :double
  (theta :double))

(cl:export 'gsl_sf_angle_restrict_pos)

(cffi:defcfun ("gsl_sf_angle_restrict_symm_err_e" gsl_sf_angle_restrict_symm_err_e) :int
  (theta :double)
  (result :pointer))

(cl:export 'gsl_sf_angle_restrict_symm_err_e)

(cffi:defcfun ("gsl_sf_angle_restrict_pos_err_e" gsl_sf_angle_restrict_pos_err_e) :int
  (theta :double)
  (result :pointer))

(cl:export 'gsl_sf_angle_restrict_pos_err_e)

(cffi:defcfun ("gsl_sf_zeta_int_e" gsl_sf_zeta_int_e) :int
  (n :int)
  (result :pointer))

(cl:export 'gsl_sf_zeta_int_e)

(cffi:defcfun ("gsl_sf_zeta_int" gsl_sf_zeta_int) :double
  (n :int))

(cl:export 'gsl_sf_zeta_int)

(cffi:defcfun ("gsl_sf_zeta_e" gsl_sf_zeta_e) :int
  (s :double)
  (result :pointer))

(cl:export 'gsl_sf_zeta_e)

(cffi:defcfun ("gsl_sf_zeta" gsl_sf_zeta) :double
  (s :double))

(cl:export 'gsl_sf_zeta)

(cffi:defcfun ("gsl_sf_zetam1_e" gsl_sf_zetam1_e) :int
  (s :double)
  (result :pointer))

(cl:export 'gsl_sf_zetam1_e)

(cffi:defcfun ("gsl_sf_zetam1" gsl_sf_zetam1) :double
  (s :double))

(cl:export 'gsl_sf_zetam1)

(cffi:defcfun ("gsl_sf_zetam1_int_e" gsl_sf_zetam1_int_e) :int
  (s :int)
  (result :pointer))

(cl:export 'gsl_sf_zetam1_int_e)

(cffi:defcfun ("gsl_sf_zetam1_int" gsl_sf_zetam1_int) :double
  (s :int))

(cl:export 'gsl_sf_zetam1_int)

(cffi:defcfun ("gsl_sf_hzeta_e" gsl_sf_hzeta_e) :int
  (s :double)
  (q :double)
  (result :pointer))

(cl:export 'gsl_sf_hzeta_e)

(cffi:defcfun ("gsl_sf_hzeta" gsl_sf_hzeta) :double
  (s :double)
  (q :double))

(cl:export 'gsl_sf_hzeta)

(cffi:defcfun ("gsl_sf_eta_int_e" gsl_sf_eta_int_e) :int
  (n :int)
  (result :pointer))

(cl:export 'gsl_sf_eta_int_e)

(cffi:defcfun ("gsl_sf_eta_int" gsl_sf_eta_int) :double
  (n :int))

(cl:export 'gsl_sf_eta_int)

(cffi:defcfun ("gsl_sf_eta_e" gsl_sf_eta_e) :int
  (s :double)
  (result :pointer))

(cl:export 'gsl_sf_eta_e)

(cffi:defcfun ("gsl_sf_eta" gsl_sf_eta) :double
  (s :double))

(cl:export 'gsl_sf_eta)

(cffi:defcstruct gsl_siman_params_t
	(n_tries :int)
	(iters_fixed_T :int)
	(step_size :double)
	(k :double)
	(t_initial :double)
	(mu_t :double)
	(t_min :double))

(cl:export 'gsl_siman_params_t)

(cl:export 'n_tries)

(cl:export 'iters_fixed_T)

(cl:export 'step_size)

(cl:export 'k)

(cl:export 't_initial)

(cl:export 'mu_t)

(cl:export 't_min)

(cffi:defcfun ("gsl_siman_solve" gsl_siman_solve) :void
  (r :pointer)
  (x0_p :pointer)
  (Ef :pointer)
  (take_step :pointer)
  (distance :pointer)
  (print_position :pointer)
  (copyfunc :pointer)
  (copy_constructor :pointer)
  (destructor :pointer)
  (element_size :pointer)
  (params gsl_siman_params_t))

(cl:export 'gsl_siman_solve)

(cffi:defcfun ("gsl_siman_solve_many" gsl_siman_solve_many) :void
  (r :pointer)
  (x0_p :pointer)
  (Ef :pointer)
  (take_step :pointer)
  (distance :pointer)
  (print_position :pointer)
  (element_size :pointer)
  (params gsl_siman_params_t))

(cl:export 'gsl_siman_solve_many)

(cffi:defcfun ("gsl_sort_char" gsl_sort_char) :void
  (data :string)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_char)

(cffi:defcfun ("gsl_sort2_char" gsl_sort2_char) :void
  (data1 :string)
  (stride1 :pointer)
  (data2 :string)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_sort2_char)

(cffi:defcfun ("gsl_sort_char_index" gsl_sort_char_index) :void
  (p :pointer)
  (data :string)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_char_index)

(cffi:defcfun ("gsl_sort_char_smallest" gsl_sort_char_smallest) :int
  (dest :string)
  (k :pointer)
  (src :string)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_char_smallest)

(cffi:defcfun ("gsl_sort_char_smallest_index" gsl_sort_char_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (src :string)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_char_smallest_index)

(cffi:defcfun ("gsl_sort_char_largest" gsl_sort_char_largest) :int
  (dest :string)
  (k :pointer)
  (src :string)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_char_largest)

(cffi:defcfun ("gsl_sort_char_largest_index" gsl_sort_char_largest_index) :int
  (p :pointer)
  (k :pointer)
  (src :string)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_char_largest_index)

(cffi:defcfun ("gsl_sort" gsl_sort) :void
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort)

(cffi:defcfun ("gsl_sort2" gsl_sort2) :void
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_sort2)

(cffi:defcfun ("gsl_sort_index" gsl_sort_index) :void
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_index)

(cffi:defcfun ("gsl_sort_smallest" gsl_sort_smallest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_smallest)

(cffi:defcfun ("gsl_sort_smallest_index" gsl_sort_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_smallest_index)

(cffi:defcfun ("gsl_sort_largest" gsl_sort_largest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_largest)

(cffi:defcfun ("gsl_sort_largest_index" gsl_sort_largest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_largest_index)

(cffi:defcfun ("gsl_sort_float" gsl_sort_float) :void
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_float)

(cffi:defcfun ("gsl_sort2_float" gsl_sort2_float) :void
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_sort2_float)

(cffi:defcfun ("gsl_sort_float_index" gsl_sort_float_index) :void
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_float_index)

(cffi:defcfun ("gsl_sort_float_smallest" gsl_sort_float_smallest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_float_smallest)

(cffi:defcfun ("gsl_sort_float_smallest_index" gsl_sort_float_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_float_smallest_index)

(cffi:defcfun ("gsl_sort_float_largest" gsl_sort_float_largest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_float_largest)

(cffi:defcfun ("gsl_sort_float_largest_index" gsl_sort_float_largest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_float_largest_index)

(cffi:defcfun ("gsl_sort_int" gsl_sort_int) :void
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_int)

(cffi:defcfun ("gsl_sort2_int" gsl_sort2_int) :void
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_sort2_int)

(cffi:defcfun ("gsl_sort_int_index" gsl_sort_int_index) :void
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_int_index)

(cffi:defcfun ("gsl_sort_int_smallest" gsl_sort_int_smallest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_int_smallest)

(cffi:defcfun ("gsl_sort_int_smallest_index" gsl_sort_int_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_int_smallest_index)

(cffi:defcfun ("gsl_sort_int_largest" gsl_sort_int_largest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_int_largest)

(cffi:defcfun ("gsl_sort_int_largest_index" gsl_sort_int_largest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_int_largest_index)

(cffi:defcfun ("gsl_sort_long" gsl_sort_long) :void
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_long)

(cffi:defcfun ("gsl_sort2_long" gsl_sort2_long) :void
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_sort2_long)

(cffi:defcfun ("gsl_sort_long_index" gsl_sort_long_index) :void
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_long_index)

(cffi:defcfun ("gsl_sort_long_smallest" gsl_sort_long_smallest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_long_smallest)

(cffi:defcfun ("gsl_sort_long_smallest_index" gsl_sort_long_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_long_smallest_index)

(cffi:defcfun ("gsl_sort_long_largest" gsl_sort_long_largest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_long_largest)

(cffi:defcfun ("gsl_sort_long_largest_index" gsl_sort_long_largest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_long_largest_index)

(cffi:defcfun ("gsl_sort_long_double" gsl_sort_long_double) :void
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_long_double)

(cffi:defcfun ("gsl_sort2_long_double" gsl_sort2_long_double) :void
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_sort2_long_double)

(cffi:defcfun ("gsl_sort_long_double_index" gsl_sort_long_double_index) :void
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_long_double_index)

(cffi:defcfun ("gsl_sort_long_double_smallest" gsl_sort_long_double_smallest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_long_double_smallest)

(cffi:defcfun ("gsl_sort_long_double_smallest_index" gsl_sort_long_double_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_long_double_smallest_index)

(cffi:defcfun ("gsl_sort_long_double_largest" gsl_sort_long_double_largest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_long_double_largest)

(cffi:defcfun ("gsl_sort_long_double_largest_index" gsl_sort_long_double_largest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_long_double_largest_index)

(cffi:defcfun ("gsl_sort_short" gsl_sort_short) :void
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_short)

(cffi:defcfun ("gsl_sort2_short" gsl_sort2_short) :void
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_sort2_short)

(cffi:defcfun ("gsl_sort_short_index" gsl_sort_short_index) :void
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_short_index)

(cffi:defcfun ("gsl_sort_short_smallest" gsl_sort_short_smallest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_short_smallest)

(cffi:defcfun ("gsl_sort_short_smallest_index" gsl_sort_short_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_short_smallest_index)

(cffi:defcfun ("gsl_sort_short_largest" gsl_sort_short_largest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_short_largest)

(cffi:defcfun ("gsl_sort_short_largest_index" gsl_sort_short_largest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_short_largest_index)

(cffi:defcfun ("gsl_sort_uchar" gsl_sort_uchar) :void
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_uchar)

(cffi:defcfun ("gsl_sort2_uchar" gsl_sort2_uchar) :void
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_sort2_uchar)

(cffi:defcfun ("gsl_sort_uchar_index" gsl_sort_uchar_index) :void
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_uchar_index)

(cffi:defcfun ("gsl_sort_uchar_smallest" gsl_sort_uchar_smallest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_uchar_smallest)

(cffi:defcfun ("gsl_sort_uchar_smallest_index" gsl_sort_uchar_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_uchar_smallest_index)

(cffi:defcfun ("gsl_sort_uchar_largest" gsl_sort_uchar_largest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_uchar_largest)

(cffi:defcfun ("gsl_sort_uchar_largest_index" gsl_sort_uchar_largest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_uchar_largest_index)

(cffi:defcfun ("gsl_sort_uint" gsl_sort_uint) :void
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_uint)

(cffi:defcfun ("gsl_sort2_uint" gsl_sort2_uint) :void
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_sort2_uint)

(cffi:defcfun ("gsl_sort_uint_index" gsl_sort_uint_index) :void
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_uint_index)

(cffi:defcfun ("gsl_sort_uint_smallest" gsl_sort_uint_smallest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_uint_smallest)

(cffi:defcfun ("gsl_sort_uint_smallest_index" gsl_sort_uint_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_uint_smallest_index)

(cffi:defcfun ("gsl_sort_uint_largest" gsl_sort_uint_largest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_uint_largest)

(cffi:defcfun ("gsl_sort_uint_largest_index" gsl_sort_uint_largest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_uint_largest_index)

(cffi:defcfun ("gsl_sort_ulong" gsl_sort_ulong) :void
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_ulong)

(cffi:defcfun ("gsl_sort2_ulong" gsl_sort2_ulong) :void
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_sort2_ulong)

(cffi:defcfun ("gsl_sort_ulong_index" gsl_sort_ulong_index) :void
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_ulong_index)

(cffi:defcfun ("gsl_sort_ulong_smallest" gsl_sort_ulong_smallest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_ulong_smallest)

(cffi:defcfun ("gsl_sort_ulong_smallest_index" gsl_sort_ulong_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_ulong_smallest_index)

(cffi:defcfun ("gsl_sort_ulong_largest" gsl_sort_ulong_largest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_ulong_largest)

(cffi:defcfun ("gsl_sort_ulong_largest_index" gsl_sort_ulong_largest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_ulong_largest_index)

(cffi:defcfun ("gsl_sort_ushort" gsl_sort_ushort) :void
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_ushort)

(cffi:defcfun ("gsl_sort2_ushort" gsl_sort2_ushort) :void
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_sort2_ushort)

(cffi:defcfun ("gsl_sort_ushort_index" gsl_sort_ushort_index) :void
  (p :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_ushort_index)

(cffi:defcfun ("gsl_sort_ushort_smallest" gsl_sort_ushort_smallest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_ushort_smallest)

(cffi:defcfun ("gsl_sort_ushort_smallest_index" gsl_sort_ushort_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_ushort_smallest_index)

(cffi:defcfun ("gsl_sort_ushort_largest" gsl_sort_ushort_largest) :int
  (dest :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_ushort_largest)

(cffi:defcfun ("gsl_sort_ushort_largest_index" gsl_sort_ushort_largest_index) :int
  (p :pointer)
  (k :pointer)
  (src :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_sort_ushort_largest_index)

(cffi:defcfun ("gsl_sort_vector_char" gsl_sort_vector_char) :void
  (v :pointer))

(cl:export 'gsl_sort_vector_char)

(cffi:defcfun ("gsl_sort_vector2_char" gsl_sort_vector2_char) :void
  (v1 :pointer)
  (v2 :pointer))

(cl:export 'gsl_sort_vector2_char)

(cffi:defcfun ("gsl_sort_vector_char_index" gsl_sort_vector_char_index) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_char_index)

(cffi:defcfun ("gsl_sort_vector_char_smallest" gsl_sort_vector_char_smallest) :int
  (dest :string)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_char_smallest)

(cffi:defcfun ("gsl_sort_vector_char_largest" gsl_sort_vector_char_largest) :int
  (dest :string)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_char_largest)

(cffi:defcfun ("gsl_sort_vector_char_smallest_index" gsl_sort_vector_char_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_char_smallest_index)

(cffi:defcfun ("gsl_sort_vector_char_largest_index" gsl_sort_vector_char_largest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_char_largest_index)

(cffi:defcfun ("gsl_sort_vector" gsl_sort_vector) :void
  (v :pointer))

(cl:export 'gsl_sort_vector)

(cffi:defcfun ("gsl_sort_vector2" gsl_sort_vector2) :void
  (v1 :pointer)
  (v2 :pointer))

(cl:export 'gsl_sort_vector2)

(cffi:defcfun ("gsl_sort_vector_index" gsl_sort_vector_index) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_index)

(cffi:defcfun ("gsl_sort_vector_smallest" gsl_sort_vector_smallest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_smallest)

(cffi:defcfun ("gsl_sort_vector_largest" gsl_sort_vector_largest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_largest)

(cffi:defcfun ("gsl_sort_vector_smallest_index" gsl_sort_vector_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_smallest_index)

(cffi:defcfun ("gsl_sort_vector_largest_index" gsl_sort_vector_largest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_largest_index)

(cffi:defcfun ("gsl_sort_vector_float" gsl_sort_vector_float) :void
  (v :pointer))

(cl:export 'gsl_sort_vector_float)

(cffi:defcfun ("gsl_sort_vector2_float" gsl_sort_vector2_float) :void
  (v1 :pointer)
  (v2 :pointer))

(cl:export 'gsl_sort_vector2_float)

(cffi:defcfun ("gsl_sort_vector_float_index" gsl_sort_vector_float_index) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_float_index)

(cffi:defcfun ("gsl_sort_vector_float_smallest" gsl_sort_vector_float_smallest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_float_smallest)

(cffi:defcfun ("gsl_sort_vector_float_largest" gsl_sort_vector_float_largest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_float_largest)

(cffi:defcfun ("gsl_sort_vector_float_smallest_index" gsl_sort_vector_float_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_float_smallest_index)

(cffi:defcfun ("gsl_sort_vector_float_largest_index" gsl_sort_vector_float_largest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_float_largest_index)

(cffi:defcfun ("gsl_sort_vector_int" gsl_sort_vector_int) :void
  (v :pointer))

(cl:export 'gsl_sort_vector_int)

(cffi:defcfun ("gsl_sort_vector2_int" gsl_sort_vector2_int) :void
  (v1 :pointer)
  (v2 :pointer))

(cl:export 'gsl_sort_vector2_int)

(cffi:defcfun ("gsl_sort_vector_int_index" gsl_sort_vector_int_index) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_int_index)

(cffi:defcfun ("gsl_sort_vector_int_smallest" gsl_sort_vector_int_smallest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_int_smallest)

(cffi:defcfun ("gsl_sort_vector_int_largest" gsl_sort_vector_int_largest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_int_largest)

(cffi:defcfun ("gsl_sort_vector_int_smallest_index" gsl_sort_vector_int_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_int_smallest_index)

(cffi:defcfun ("gsl_sort_vector_int_largest_index" gsl_sort_vector_int_largest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_int_largest_index)

(cffi:defcfun ("gsl_sort_vector_long" gsl_sort_vector_long) :void
  (v :pointer))

(cl:export 'gsl_sort_vector_long)

(cffi:defcfun ("gsl_sort_vector2_long" gsl_sort_vector2_long) :void
  (v1 :pointer)
  (v2 :pointer))

(cl:export 'gsl_sort_vector2_long)

(cffi:defcfun ("gsl_sort_vector_long_index" gsl_sort_vector_long_index) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_long_index)

(cffi:defcfun ("gsl_sort_vector_long_smallest" gsl_sort_vector_long_smallest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_long_smallest)

(cffi:defcfun ("gsl_sort_vector_long_largest" gsl_sort_vector_long_largest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_long_largest)

(cffi:defcfun ("gsl_sort_vector_long_smallest_index" gsl_sort_vector_long_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_long_smallest_index)

(cffi:defcfun ("gsl_sort_vector_long_largest_index" gsl_sort_vector_long_largest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_long_largest_index)

(cffi:defcfun ("gsl_sort_vector_long_double" gsl_sort_vector_long_double) :void
  (v :pointer))

(cl:export 'gsl_sort_vector_long_double)

(cffi:defcfun ("gsl_sort_vector2_long_double" gsl_sort_vector2_long_double) :void
  (v1 :pointer)
  (v2 :pointer))

(cl:export 'gsl_sort_vector2_long_double)

(cffi:defcfun ("gsl_sort_vector_long_double_index" gsl_sort_vector_long_double_index) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_long_double_index)

(cffi:defcfun ("gsl_sort_vector_long_double_smallest" gsl_sort_vector_long_double_smallest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_long_double_smallest)

(cffi:defcfun ("gsl_sort_vector_long_double_largest" gsl_sort_vector_long_double_largest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_long_double_largest)

(cffi:defcfun ("gsl_sort_vector_long_double_smallest_index" gsl_sort_vector_long_double_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_long_double_smallest_index)

(cffi:defcfun ("gsl_sort_vector_long_double_largest_index" gsl_sort_vector_long_double_largest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_long_double_largest_index)

(cffi:defcfun ("gsl_sort_vector_short" gsl_sort_vector_short) :void
  (v :pointer))

(cl:export 'gsl_sort_vector_short)

(cffi:defcfun ("gsl_sort_vector2_short" gsl_sort_vector2_short) :void
  (v1 :pointer)
  (v2 :pointer))

(cl:export 'gsl_sort_vector2_short)

(cffi:defcfun ("gsl_sort_vector_short_index" gsl_sort_vector_short_index) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_short_index)

(cffi:defcfun ("gsl_sort_vector_short_smallest" gsl_sort_vector_short_smallest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_short_smallest)

(cffi:defcfun ("gsl_sort_vector_short_largest" gsl_sort_vector_short_largest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_short_largest)

(cffi:defcfun ("gsl_sort_vector_short_smallest_index" gsl_sort_vector_short_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_short_smallest_index)

(cffi:defcfun ("gsl_sort_vector_short_largest_index" gsl_sort_vector_short_largest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_short_largest_index)

(cffi:defcfun ("gsl_sort_vector_uchar" gsl_sort_vector_uchar) :void
  (v :pointer))

(cl:export 'gsl_sort_vector_uchar)

(cffi:defcfun ("gsl_sort_vector2_uchar" gsl_sort_vector2_uchar) :void
  (v1 :pointer)
  (v2 :pointer))

(cl:export 'gsl_sort_vector2_uchar)

(cffi:defcfun ("gsl_sort_vector_uchar_index" gsl_sort_vector_uchar_index) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_uchar_index)

(cffi:defcfun ("gsl_sort_vector_uchar_smallest" gsl_sort_vector_uchar_smallest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_uchar_smallest)

(cffi:defcfun ("gsl_sort_vector_uchar_largest" gsl_sort_vector_uchar_largest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_uchar_largest)

(cffi:defcfun ("gsl_sort_vector_uchar_smallest_index" gsl_sort_vector_uchar_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_uchar_smallest_index)

(cffi:defcfun ("gsl_sort_vector_uchar_largest_index" gsl_sort_vector_uchar_largest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_uchar_largest_index)

(cffi:defcfun ("gsl_sort_vector_uint" gsl_sort_vector_uint) :void
  (v :pointer))

(cl:export 'gsl_sort_vector_uint)

(cffi:defcfun ("gsl_sort_vector2_uint" gsl_sort_vector2_uint) :void
  (v1 :pointer)
  (v2 :pointer))

(cl:export 'gsl_sort_vector2_uint)

(cffi:defcfun ("gsl_sort_vector_uint_index" gsl_sort_vector_uint_index) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_uint_index)

(cffi:defcfun ("gsl_sort_vector_uint_smallest" gsl_sort_vector_uint_smallest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_uint_smallest)

(cffi:defcfun ("gsl_sort_vector_uint_largest" gsl_sort_vector_uint_largest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_uint_largest)

(cffi:defcfun ("gsl_sort_vector_uint_smallest_index" gsl_sort_vector_uint_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_uint_smallest_index)

(cffi:defcfun ("gsl_sort_vector_uint_largest_index" gsl_sort_vector_uint_largest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_uint_largest_index)

(cffi:defcfun ("gsl_sort_vector_ulong" gsl_sort_vector_ulong) :void
  (v :pointer))

(cl:export 'gsl_sort_vector_ulong)

(cffi:defcfun ("gsl_sort_vector2_ulong" gsl_sort_vector2_ulong) :void
  (v1 :pointer)
  (v2 :pointer))

(cl:export 'gsl_sort_vector2_ulong)

(cffi:defcfun ("gsl_sort_vector_ulong_index" gsl_sort_vector_ulong_index) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_ulong_index)

(cffi:defcfun ("gsl_sort_vector_ulong_smallest" gsl_sort_vector_ulong_smallest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_ulong_smallest)

(cffi:defcfun ("gsl_sort_vector_ulong_largest" gsl_sort_vector_ulong_largest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_ulong_largest)

(cffi:defcfun ("gsl_sort_vector_ulong_smallest_index" gsl_sort_vector_ulong_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_ulong_smallest_index)

(cffi:defcfun ("gsl_sort_vector_ulong_largest_index" gsl_sort_vector_ulong_largest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_ulong_largest_index)

(cffi:defcfun ("gsl_sort_vector_ushort" gsl_sort_vector_ushort) :void
  (v :pointer))

(cl:export 'gsl_sort_vector_ushort)

(cffi:defcfun ("gsl_sort_vector2_ushort" gsl_sort_vector2_ushort) :void
  (v1 :pointer)
  (v2 :pointer))

(cl:export 'gsl_sort_vector2_ushort)

(cffi:defcfun ("gsl_sort_vector_ushort_index" gsl_sort_vector_ushort_index) :int
  (p :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_ushort_index)

(cffi:defcfun ("gsl_sort_vector_ushort_smallest" gsl_sort_vector_ushort_smallest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_ushort_smallest)

(cffi:defcfun ("gsl_sort_vector_ushort_largest" gsl_sort_vector_ushort_largest) :int
  (dest :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_ushort_largest)

(cffi:defcfun ("gsl_sort_vector_ushort_smallest_index" gsl_sort_vector_ushort_smallest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_ushort_smallest_index)

(cffi:defcfun ("gsl_sort_vector_ushort_largest_index" gsl_sort_vector_ushort_largest_index) :int
  (p :pointer)
  (k :pointer)
  (v :pointer))

(cl:export 'gsl_sort_vector_ushort_largest_index)

(cffi:defcstruct gsl_spline
	(interp :pointer)
	(x :pointer)
	(y :pointer)
	(size :pointer))

(cl:export 'gsl_spline)

(cl:export 'interp)

(cl:export 'x)

(cl:export 'y)

(cl:export 'size)

(cffi:defcfun ("gsl_spline_alloc" gsl_spline_alloc) :pointer
  (t_arg0 :pointer)
  (size :pointer))

(cl:export 'gsl_spline_alloc)

(cffi:defcfun ("gsl_spline_init" gsl_spline_init) :int
  (spline :pointer)
  (xa :pointer)
  (ya :pointer)
  (size :pointer))

(cl:export 'gsl_spline_init)

(cffi:defcfun ("gsl_spline_name" gsl_spline_name) :string
  (spline :pointer))

(cl:export 'gsl_spline_name)

(cffi:defcfun ("gsl_spline_min_size" gsl_spline_min_size) :unsigned-int
  (spline :pointer))

(cl:export 'gsl_spline_min_size)

(cffi:defcfun ("gsl_spline_eval_e" gsl_spline_eval_e) :int
  (spline :pointer)
  (x :double)
  (a :pointer)
  (y :pointer))

(cl:export 'gsl_spline_eval_e)

(cffi:defcfun ("gsl_spline_eval" gsl_spline_eval) :double
  (spline :pointer)
  (x :double)
  (a :pointer))

(cl:export 'gsl_spline_eval)

(cffi:defcfun ("gsl_spline_eval_deriv_e" gsl_spline_eval_deriv_e) :int
  (spline :pointer)
  (x :double)
  (a :pointer)
  (y :pointer))

(cl:export 'gsl_spline_eval_deriv_e)

(cffi:defcfun ("gsl_spline_eval_deriv" gsl_spline_eval_deriv) :double
  (spline :pointer)
  (x :double)
  (a :pointer))

(cl:export 'gsl_spline_eval_deriv)

(cffi:defcfun ("gsl_spline_eval_deriv2_e" gsl_spline_eval_deriv2_e) :int
  (spline :pointer)
  (x :double)
  (a :pointer)
  (y :pointer))

(cl:export 'gsl_spline_eval_deriv2_e)

(cffi:defcfun ("gsl_spline_eval_deriv2" gsl_spline_eval_deriv2) :double
  (spline :pointer)
  (x :double)
  (a :pointer))

(cl:export 'gsl_spline_eval_deriv2)

(cffi:defcfun ("gsl_spline_eval_integ_e" gsl_spline_eval_integ_e) :int
  (spline :pointer)
  (a :double)
  (b :double)
  (acc :pointer)
  (y :pointer))

(cl:export 'gsl_spline_eval_integ_e)

(cffi:defcfun ("gsl_spline_eval_integ" gsl_spline_eval_integ) :double
  (spline :pointer)
  (a :double)
  (b :double)
  (acc :pointer))

(cl:export 'gsl_spline_eval_integ)

(cffi:defcfun ("gsl_spline_free" gsl_spline_free) :void
  (spline :pointer))

(cl:export 'gsl_spline_free)

(cffi:defcfun ("gsl_stats_char_mean" gsl_stats_char_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_mean)

(cffi:defcfun ("gsl_stats_char_variance" gsl_stats_char_variance) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_variance)

(cffi:defcfun ("gsl_stats_char_sd" gsl_stats_char_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_sd)

(cffi:defcfun ("gsl_stats_char_variance_with_fixed_mean" gsl_stats_char_variance_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_char_variance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_char_sd_with_fixed_mean" gsl_stats_char_sd_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_char_sd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_char_tss" gsl_stats_char_tss) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_tss)

(cffi:defcfun ("gsl_stats_char_tss_m" gsl_stats_char_tss_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_char_tss_m)

(cffi:defcfun ("gsl_stats_char_absdev" gsl_stats_char_absdev) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_absdev)

(cffi:defcfun ("gsl_stats_char_skew" gsl_stats_char_skew) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_skew)

(cffi:defcfun ("gsl_stats_char_kurtosis" gsl_stats_char_kurtosis) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_kurtosis)

(cffi:defcfun ("gsl_stats_char_lag1_autocorrelation" gsl_stats_char_lag1_autocorrelation) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_lag1_autocorrelation)

(cffi:defcfun ("gsl_stats_char_covariance" gsl_stats_char_covariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_covariance)

(cffi:defcfun ("gsl_stats_char_correlation" gsl_stats_char_correlation) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_correlation)

(cffi:defcfun ("gsl_stats_char_spearman" gsl_stats_char_spearman) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (work :pointer))

(cl:export 'gsl_stats_char_spearman)

(cffi:defcfun ("gsl_stats_char_variance_m" gsl_stats_char_variance_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_char_variance_m)

(cffi:defcfun ("gsl_stats_char_sd_m" gsl_stats_char_sd_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_char_sd_m)

(cffi:defcfun ("gsl_stats_char_absdev_m" gsl_stats_char_absdev_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_char_absdev_m)

(cffi:defcfun ("gsl_stats_char_skew_m_sd" gsl_stats_char_skew_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_char_skew_m_sd)

(cffi:defcfun ("gsl_stats_char_kurtosis_m_sd" gsl_stats_char_kurtosis_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_char_kurtosis_m_sd)

(cffi:defcfun ("gsl_stats_char_lag1_autocorrelation_m" gsl_stats_char_lag1_autocorrelation_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_char_lag1_autocorrelation_m)

(cffi:defcfun ("gsl_stats_char_covariance_m" gsl_stats_char_covariance_m) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (mean1 :double)
  (mean2 :double))

(cl:export 'gsl_stats_char_covariance_m)

(cffi:defcfun ("gsl_stats_char_pvariance" gsl_stats_char_pvariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_char_pvariance)

(cffi:defcfun ("gsl_stats_char_ttest" gsl_stats_char_ttest) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_char_ttest)

(cffi:defcfun ("gsl_stats_char_max" gsl_stats_char_max) :char
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_max)

(cffi:defcfun ("gsl_stats_char_min" gsl_stats_char_min) :char
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_min)

(cffi:defcfun ("gsl_stats_char_minmax" gsl_stats_char_minmax) :void
  (min :string)
  (max :string)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_minmax)

(cffi:defcfun ("gsl_stats_char_max_index" gsl_stats_char_max_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_max_index)

(cffi:defcfun ("gsl_stats_char_min_index" gsl_stats_char_min_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_min_index)

(cffi:defcfun ("gsl_stats_char_minmax_index" gsl_stats_char_minmax_index) :void
  (min_index :pointer)
  (max_index :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_minmax_index)

(cffi:defcfun ("gsl_stats_char_median_from_sorted_data" gsl_stats_char_median_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_char_median_from_sorted_data)

(cffi:defcfun ("gsl_stats_char_quantile_from_sorted_data" gsl_stats_char_quantile_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer)
  (f :double))

(cl:export 'gsl_stats_char_quantile_from_sorted_data)

(cffi:defcfun ("gsl_stats_mean" gsl_stats_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_mean)

(cffi:defcfun ("gsl_stats_variance" gsl_stats_variance) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_variance)

(cffi:defcfun ("gsl_stats_sd" gsl_stats_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_sd)

(cffi:defcfun ("gsl_stats_variance_with_fixed_mean" gsl_stats_variance_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_variance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_sd_with_fixed_mean" gsl_stats_sd_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_sd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_tss" gsl_stats_tss) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_tss)

(cffi:defcfun ("gsl_stats_tss_m" gsl_stats_tss_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_tss_m)

(cffi:defcfun ("gsl_stats_absdev" gsl_stats_absdev) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_absdev)

(cffi:defcfun ("gsl_stats_skew" gsl_stats_skew) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_skew)

(cffi:defcfun ("gsl_stats_kurtosis" gsl_stats_kurtosis) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_kurtosis)

(cffi:defcfun ("gsl_stats_lag1_autocorrelation" gsl_stats_lag1_autocorrelation) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_lag1_autocorrelation)

(cffi:defcfun ("gsl_stats_covariance" gsl_stats_covariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_covariance)

(cffi:defcfun ("gsl_stats_correlation" gsl_stats_correlation) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_correlation)

(cffi:defcfun ("gsl_stats_spearman" gsl_stats_spearman) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (work :pointer))

(cl:export 'gsl_stats_spearman)

(cffi:defcfun ("gsl_stats_variance_m" gsl_stats_variance_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_variance_m)

(cffi:defcfun ("gsl_stats_sd_m" gsl_stats_sd_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_sd_m)

(cffi:defcfun ("gsl_stats_absdev_m" gsl_stats_absdev_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_absdev_m)

(cffi:defcfun ("gsl_stats_skew_m_sd" gsl_stats_skew_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_skew_m_sd)

(cffi:defcfun ("gsl_stats_kurtosis_m_sd" gsl_stats_kurtosis_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_kurtosis_m_sd)

(cffi:defcfun ("gsl_stats_lag1_autocorrelation_m" gsl_stats_lag1_autocorrelation_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_lag1_autocorrelation_m)

(cffi:defcfun ("gsl_stats_covariance_m" gsl_stats_covariance_m) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (mean1 :double)
  (mean2 :double))

(cl:export 'gsl_stats_covariance_m)

(cffi:defcfun ("gsl_stats_wmean" gsl_stats_wmean) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_wmean)

(cffi:defcfun ("gsl_stats_wvariance" gsl_stats_wvariance) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_wvariance)

(cffi:defcfun ("gsl_stats_wsd" gsl_stats_wsd) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_wsd)

(cffi:defcfun ("gsl_stats_wvariance_with_fixed_mean" gsl_stats_wvariance_with_fixed_mean) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_wvariance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_wsd_with_fixed_mean" gsl_stats_wsd_with_fixed_mean) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_wsd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_wtss" gsl_stats_wtss) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_wtss)

(cffi:defcfun ("gsl_stats_wtss_m" gsl_stats_wtss_m) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double))

(cl:export 'gsl_stats_wtss_m)

(cffi:defcfun ("gsl_stats_wabsdev" gsl_stats_wabsdev) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_wabsdev)

(cffi:defcfun ("gsl_stats_wskew" gsl_stats_wskew) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_wskew)

(cffi:defcfun ("gsl_stats_wkurtosis" gsl_stats_wkurtosis) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_wkurtosis)

(cffi:defcfun ("gsl_stats_wvariance_m" gsl_stats_wvariance_m) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double))

(cl:export 'gsl_stats_wvariance_m)

(cffi:defcfun ("gsl_stats_wsd_m" gsl_stats_wsd_m) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double))

(cl:export 'gsl_stats_wsd_m)

(cffi:defcfun ("gsl_stats_wabsdev_m" gsl_stats_wabsdev_m) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double))

(cl:export 'gsl_stats_wabsdev_m)

(cffi:defcfun ("gsl_stats_wskew_m_sd" gsl_stats_wskew_m_sd) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double)
  (wsd :double))

(cl:export 'gsl_stats_wskew_m_sd)

(cffi:defcfun ("gsl_stats_wkurtosis_m_sd" gsl_stats_wkurtosis_m_sd) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double)
  (wsd :double))

(cl:export 'gsl_stats_wkurtosis_m_sd)

(cffi:defcfun ("gsl_stats_pvariance" gsl_stats_pvariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_pvariance)

(cffi:defcfun ("gsl_stats_ttest" gsl_stats_ttest) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_ttest)

(cffi:defcfun ("gsl_stats_max" gsl_stats_max) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_max)

(cffi:defcfun ("gsl_stats_min" gsl_stats_min) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_min)

(cffi:defcfun ("gsl_stats_minmax" gsl_stats_minmax) :void
  (min :pointer)
  (max :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_minmax)

(cffi:defcfun ("gsl_stats_max_index" gsl_stats_max_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_max_index)

(cffi:defcfun ("gsl_stats_min_index" gsl_stats_min_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_min_index)

(cffi:defcfun ("gsl_stats_minmax_index" gsl_stats_minmax_index) :void
  (min_index :pointer)
  (max_index :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_minmax_index)

(cffi:defcfun ("gsl_stats_median_from_sorted_data" gsl_stats_median_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_median_from_sorted_data)

(cffi:defcfun ("gsl_stats_quantile_from_sorted_data" gsl_stats_quantile_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer)
  (f :double))

(cl:export 'gsl_stats_quantile_from_sorted_data)

(cffi:defcfun ("gsl_stats_float_mean" gsl_stats_float_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_mean)

(cffi:defcfun ("gsl_stats_float_variance" gsl_stats_float_variance) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_variance)

(cffi:defcfun ("gsl_stats_float_sd" gsl_stats_float_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_sd)

(cffi:defcfun ("gsl_stats_float_variance_with_fixed_mean" gsl_stats_float_variance_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_float_variance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_float_sd_with_fixed_mean" gsl_stats_float_sd_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_float_sd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_float_tss" gsl_stats_float_tss) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_tss)

(cffi:defcfun ("gsl_stats_float_tss_m" gsl_stats_float_tss_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_float_tss_m)

(cffi:defcfun ("gsl_stats_float_absdev" gsl_stats_float_absdev) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_absdev)

(cffi:defcfun ("gsl_stats_float_skew" gsl_stats_float_skew) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_skew)

(cffi:defcfun ("gsl_stats_float_kurtosis" gsl_stats_float_kurtosis) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_kurtosis)

(cffi:defcfun ("gsl_stats_float_lag1_autocorrelation" gsl_stats_float_lag1_autocorrelation) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_lag1_autocorrelation)

(cffi:defcfun ("gsl_stats_float_covariance" gsl_stats_float_covariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_covariance)

(cffi:defcfun ("gsl_stats_float_correlation" gsl_stats_float_correlation) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_correlation)

(cffi:defcfun ("gsl_stats_float_spearman" gsl_stats_float_spearman) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (work :pointer))

(cl:export 'gsl_stats_float_spearman)

(cffi:defcfun ("gsl_stats_float_variance_m" gsl_stats_float_variance_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_float_variance_m)

(cffi:defcfun ("gsl_stats_float_sd_m" gsl_stats_float_sd_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_float_sd_m)

(cffi:defcfun ("gsl_stats_float_absdev_m" gsl_stats_float_absdev_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_float_absdev_m)

(cffi:defcfun ("gsl_stats_float_skew_m_sd" gsl_stats_float_skew_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_float_skew_m_sd)

(cffi:defcfun ("gsl_stats_float_kurtosis_m_sd" gsl_stats_float_kurtosis_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_float_kurtosis_m_sd)

(cffi:defcfun ("gsl_stats_float_lag1_autocorrelation_m" gsl_stats_float_lag1_autocorrelation_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_float_lag1_autocorrelation_m)

(cffi:defcfun ("gsl_stats_float_covariance_m" gsl_stats_float_covariance_m) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (mean1 :double)
  (mean2 :double))

(cl:export 'gsl_stats_float_covariance_m)

(cffi:defcfun ("gsl_stats_float_wmean" gsl_stats_float_wmean) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_wmean)

(cffi:defcfun ("gsl_stats_float_wvariance" gsl_stats_float_wvariance) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_wvariance)

(cffi:defcfun ("gsl_stats_float_wsd" gsl_stats_float_wsd) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_wsd)

(cffi:defcfun ("gsl_stats_float_wvariance_with_fixed_mean" gsl_stats_float_wvariance_with_fixed_mean) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_float_wvariance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_float_wsd_with_fixed_mean" gsl_stats_float_wsd_with_fixed_mean) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_float_wsd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_float_wtss" gsl_stats_float_wtss) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_wtss)

(cffi:defcfun ("gsl_stats_float_wtss_m" gsl_stats_float_wtss_m) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double))

(cl:export 'gsl_stats_float_wtss_m)

(cffi:defcfun ("gsl_stats_float_wabsdev" gsl_stats_float_wabsdev) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_wabsdev)

(cffi:defcfun ("gsl_stats_float_wskew" gsl_stats_float_wskew) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_wskew)

(cffi:defcfun ("gsl_stats_float_wkurtosis" gsl_stats_float_wkurtosis) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_wkurtosis)

(cffi:defcfun ("gsl_stats_float_wvariance_m" gsl_stats_float_wvariance_m) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double))

(cl:export 'gsl_stats_float_wvariance_m)

(cffi:defcfun ("gsl_stats_float_wsd_m" gsl_stats_float_wsd_m) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double))

(cl:export 'gsl_stats_float_wsd_m)

(cffi:defcfun ("gsl_stats_float_wabsdev_m" gsl_stats_float_wabsdev_m) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double))

(cl:export 'gsl_stats_float_wabsdev_m)

(cffi:defcfun ("gsl_stats_float_wskew_m_sd" gsl_stats_float_wskew_m_sd) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double)
  (wsd :double))

(cl:export 'gsl_stats_float_wskew_m_sd)

(cffi:defcfun ("gsl_stats_float_wkurtosis_m_sd" gsl_stats_float_wkurtosis_m_sd) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double)
  (wsd :double))

(cl:export 'gsl_stats_float_wkurtosis_m_sd)

(cffi:defcfun ("gsl_stats_float_pvariance" gsl_stats_float_pvariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_float_pvariance)

(cffi:defcfun ("gsl_stats_float_ttest" gsl_stats_float_ttest) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_float_ttest)

(cffi:defcfun ("gsl_stats_float_max" gsl_stats_float_max) :float
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_max)

(cffi:defcfun ("gsl_stats_float_min" gsl_stats_float_min) :float
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_min)

(cffi:defcfun ("gsl_stats_float_minmax" gsl_stats_float_minmax) :void
  (min :pointer)
  (max :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_minmax)

(cffi:defcfun ("gsl_stats_float_max_index" gsl_stats_float_max_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_max_index)

(cffi:defcfun ("gsl_stats_float_min_index" gsl_stats_float_min_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_min_index)

(cffi:defcfun ("gsl_stats_float_minmax_index" gsl_stats_float_minmax_index) :void
  (min_index :pointer)
  (max_index :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_minmax_index)

(cffi:defcfun ("gsl_stats_float_median_from_sorted_data" gsl_stats_float_median_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_float_median_from_sorted_data)

(cffi:defcfun ("gsl_stats_float_quantile_from_sorted_data" gsl_stats_float_quantile_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer)
  (f :double))

(cl:export 'gsl_stats_float_quantile_from_sorted_data)

(cffi:defcfun ("gsl_stats_int_mean" gsl_stats_int_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_mean)

(cffi:defcfun ("gsl_stats_int_variance" gsl_stats_int_variance) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_variance)

(cffi:defcfun ("gsl_stats_int_sd" gsl_stats_int_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_sd)

(cffi:defcfun ("gsl_stats_int_variance_with_fixed_mean" gsl_stats_int_variance_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_int_variance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_int_sd_with_fixed_mean" gsl_stats_int_sd_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_int_sd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_int_tss" gsl_stats_int_tss) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_tss)

(cffi:defcfun ("gsl_stats_int_tss_m" gsl_stats_int_tss_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_int_tss_m)

(cffi:defcfun ("gsl_stats_int_absdev" gsl_stats_int_absdev) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_absdev)

(cffi:defcfun ("gsl_stats_int_skew" gsl_stats_int_skew) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_skew)

(cffi:defcfun ("gsl_stats_int_kurtosis" gsl_stats_int_kurtosis) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_kurtosis)

(cffi:defcfun ("gsl_stats_int_lag1_autocorrelation" gsl_stats_int_lag1_autocorrelation) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_lag1_autocorrelation)

(cffi:defcfun ("gsl_stats_int_covariance" gsl_stats_int_covariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_covariance)

(cffi:defcfun ("gsl_stats_int_correlation" gsl_stats_int_correlation) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_correlation)

(cffi:defcfun ("gsl_stats_int_spearman" gsl_stats_int_spearman) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (work :pointer))

(cl:export 'gsl_stats_int_spearman)

(cffi:defcfun ("gsl_stats_int_variance_m" gsl_stats_int_variance_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_int_variance_m)

(cffi:defcfun ("gsl_stats_int_sd_m" gsl_stats_int_sd_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_int_sd_m)

(cffi:defcfun ("gsl_stats_int_absdev_m" gsl_stats_int_absdev_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_int_absdev_m)

(cffi:defcfun ("gsl_stats_int_skew_m_sd" gsl_stats_int_skew_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_int_skew_m_sd)

(cffi:defcfun ("gsl_stats_int_kurtosis_m_sd" gsl_stats_int_kurtosis_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_int_kurtosis_m_sd)

(cffi:defcfun ("gsl_stats_int_lag1_autocorrelation_m" gsl_stats_int_lag1_autocorrelation_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_int_lag1_autocorrelation_m)

(cffi:defcfun ("gsl_stats_int_covariance_m" gsl_stats_int_covariance_m) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (mean1 :double)
  (mean2 :double))

(cl:export 'gsl_stats_int_covariance_m)

(cffi:defcfun ("gsl_stats_int_pvariance" gsl_stats_int_pvariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_int_pvariance)

(cffi:defcfun ("gsl_stats_int_ttest" gsl_stats_int_ttest) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_int_ttest)

(cffi:defcfun ("gsl_stats_int_max" gsl_stats_int_max) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_max)

(cffi:defcfun ("gsl_stats_int_min" gsl_stats_int_min) :int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_min)

(cffi:defcfun ("gsl_stats_int_minmax" gsl_stats_int_minmax) :void
  (min :pointer)
  (max :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_minmax)

(cffi:defcfun ("gsl_stats_int_max_index" gsl_stats_int_max_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_max_index)

(cffi:defcfun ("gsl_stats_int_min_index" gsl_stats_int_min_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_min_index)

(cffi:defcfun ("gsl_stats_int_minmax_index" gsl_stats_int_minmax_index) :void
  (min_index :pointer)
  (max_index :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_minmax_index)

(cffi:defcfun ("gsl_stats_int_median_from_sorted_data" gsl_stats_int_median_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_int_median_from_sorted_data)

(cffi:defcfun ("gsl_stats_int_quantile_from_sorted_data" gsl_stats_int_quantile_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer)
  (f :double))

(cl:export 'gsl_stats_int_quantile_from_sorted_data)

(cffi:defcfun ("gsl_stats_long_mean" gsl_stats_long_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_mean)

(cffi:defcfun ("gsl_stats_long_variance" gsl_stats_long_variance) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_variance)

(cffi:defcfun ("gsl_stats_long_sd" gsl_stats_long_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_sd)

(cffi:defcfun ("gsl_stats_long_variance_with_fixed_mean" gsl_stats_long_variance_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_variance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_long_sd_with_fixed_mean" gsl_stats_long_sd_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_sd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_long_tss" gsl_stats_long_tss) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_tss)

(cffi:defcfun ("gsl_stats_long_tss_m" gsl_stats_long_tss_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_tss_m)

(cffi:defcfun ("gsl_stats_long_absdev" gsl_stats_long_absdev) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_absdev)

(cffi:defcfun ("gsl_stats_long_skew" gsl_stats_long_skew) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_skew)

(cffi:defcfun ("gsl_stats_long_kurtosis" gsl_stats_long_kurtosis) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_kurtosis)

(cffi:defcfun ("gsl_stats_long_lag1_autocorrelation" gsl_stats_long_lag1_autocorrelation) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_lag1_autocorrelation)

(cffi:defcfun ("gsl_stats_long_covariance" gsl_stats_long_covariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_covariance)

(cffi:defcfun ("gsl_stats_long_correlation" gsl_stats_long_correlation) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_correlation)

(cffi:defcfun ("gsl_stats_long_spearman" gsl_stats_long_spearman) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (work :pointer))

(cl:export 'gsl_stats_long_spearman)

(cffi:defcfun ("gsl_stats_long_variance_m" gsl_stats_long_variance_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_variance_m)

(cffi:defcfun ("gsl_stats_long_sd_m" gsl_stats_long_sd_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_sd_m)

(cffi:defcfun ("gsl_stats_long_absdev_m" gsl_stats_long_absdev_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_absdev_m)

(cffi:defcfun ("gsl_stats_long_skew_m_sd" gsl_stats_long_skew_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_long_skew_m_sd)

(cffi:defcfun ("gsl_stats_long_kurtosis_m_sd" gsl_stats_long_kurtosis_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_long_kurtosis_m_sd)

(cffi:defcfun ("gsl_stats_long_lag1_autocorrelation_m" gsl_stats_long_lag1_autocorrelation_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_lag1_autocorrelation_m)

(cffi:defcfun ("gsl_stats_long_covariance_m" gsl_stats_long_covariance_m) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (mean1 :double)
  (mean2 :double))

(cl:export 'gsl_stats_long_covariance_m)

(cffi:defcfun ("gsl_stats_long_pvariance" gsl_stats_long_pvariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_long_pvariance)

(cffi:defcfun ("gsl_stats_long_ttest" gsl_stats_long_ttest) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_long_ttest)

(cffi:defcfun ("gsl_stats_long_max" gsl_stats_long_max) :long
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_max)

(cffi:defcfun ("gsl_stats_long_min" gsl_stats_long_min) :long
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_min)

(cffi:defcfun ("gsl_stats_long_minmax" gsl_stats_long_minmax) :void
  (min :pointer)
  (max :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_minmax)

(cffi:defcfun ("gsl_stats_long_max_index" gsl_stats_long_max_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_max_index)

(cffi:defcfun ("gsl_stats_long_min_index" gsl_stats_long_min_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_min_index)

(cffi:defcfun ("gsl_stats_long_minmax_index" gsl_stats_long_minmax_index) :void
  (min_index :pointer)
  (max_index :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_minmax_index)

(cffi:defcfun ("gsl_stats_long_median_from_sorted_data" gsl_stats_long_median_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_median_from_sorted_data)

(cffi:defcfun ("gsl_stats_long_quantile_from_sorted_data" gsl_stats_long_quantile_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer)
  (f :double))

(cl:export 'gsl_stats_long_quantile_from_sorted_data)

(cffi:defcfun ("gsl_stats_long_double_mean" gsl_stats_long_double_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_mean)

(cffi:defcfun ("gsl_stats_long_double_variance" gsl_stats_long_double_variance) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_variance)

(cffi:defcfun ("gsl_stats_long_double_sd" gsl_stats_long_double_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_sd)

(cffi:defcfun ("gsl_stats_long_double_variance_with_fixed_mean" gsl_stats_long_double_variance_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_double_variance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_long_double_sd_with_fixed_mean" gsl_stats_long_double_sd_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_double_sd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_long_double_tss" gsl_stats_long_double_tss) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_tss)

(cffi:defcfun ("gsl_stats_long_double_tss_m" gsl_stats_long_double_tss_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_double_tss_m)

(cffi:defcfun ("gsl_stats_long_double_absdev" gsl_stats_long_double_absdev) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_absdev)

(cffi:defcfun ("gsl_stats_long_double_skew" gsl_stats_long_double_skew) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_skew)

(cffi:defcfun ("gsl_stats_long_double_kurtosis" gsl_stats_long_double_kurtosis) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_kurtosis)

(cffi:defcfun ("gsl_stats_long_double_lag1_autocorrelation" gsl_stats_long_double_lag1_autocorrelation) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_lag1_autocorrelation)

(cffi:defcfun ("gsl_stats_long_double_covariance" gsl_stats_long_double_covariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_covariance)

(cffi:defcfun ("gsl_stats_long_double_correlation" gsl_stats_long_double_correlation) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_correlation)

(cffi:defcfun ("gsl_stats_long_double_spearman" gsl_stats_long_double_spearman) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (work :pointer))

(cl:export 'gsl_stats_long_double_spearman)

(cffi:defcfun ("gsl_stats_long_double_variance_m" gsl_stats_long_double_variance_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_double_variance_m)

(cffi:defcfun ("gsl_stats_long_double_sd_m" gsl_stats_long_double_sd_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_double_sd_m)

(cffi:defcfun ("gsl_stats_long_double_absdev_m" gsl_stats_long_double_absdev_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_double_absdev_m)

(cffi:defcfun ("gsl_stats_long_double_skew_m_sd" gsl_stats_long_double_skew_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_long_double_skew_m_sd)

(cffi:defcfun ("gsl_stats_long_double_kurtosis_m_sd" gsl_stats_long_double_kurtosis_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_long_double_kurtosis_m_sd)

(cffi:defcfun ("gsl_stats_long_double_lag1_autocorrelation_m" gsl_stats_long_double_lag1_autocorrelation_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_double_lag1_autocorrelation_m)

(cffi:defcfun ("gsl_stats_long_double_covariance_m" gsl_stats_long_double_covariance_m) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (mean1 :double)
  (mean2 :double))

(cl:export 'gsl_stats_long_double_covariance_m)

(cffi:defcfun ("gsl_stats_long_double_wmean" gsl_stats_long_double_wmean) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_wmean)

(cffi:defcfun ("gsl_stats_long_double_wvariance" gsl_stats_long_double_wvariance) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_wvariance)

(cffi:defcfun ("gsl_stats_long_double_wsd" gsl_stats_long_double_wsd) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_wsd)

(cffi:defcfun ("gsl_stats_long_double_wvariance_with_fixed_mean" gsl_stats_long_double_wvariance_with_fixed_mean) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_double_wvariance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_long_double_wsd_with_fixed_mean" gsl_stats_long_double_wsd_with_fixed_mean) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_long_double_wsd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_long_double_wtss" gsl_stats_long_double_wtss) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_wtss)

(cffi:defcfun ("gsl_stats_long_double_wtss_m" gsl_stats_long_double_wtss_m) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double))

(cl:export 'gsl_stats_long_double_wtss_m)

(cffi:defcfun ("gsl_stats_long_double_wabsdev" gsl_stats_long_double_wabsdev) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_wabsdev)

(cffi:defcfun ("gsl_stats_long_double_wskew" gsl_stats_long_double_wskew) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_wskew)

(cffi:defcfun ("gsl_stats_long_double_wkurtosis" gsl_stats_long_double_wkurtosis) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_wkurtosis)

(cffi:defcfun ("gsl_stats_long_double_wvariance_m" gsl_stats_long_double_wvariance_m) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double))

(cl:export 'gsl_stats_long_double_wvariance_m)

(cffi:defcfun ("gsl_stats_long_double_wsd_m" gsl_stats_long_double_wsd_m) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double))

(cl:export 'gsl_stats_long_double_wsd_m)

(cffi:defcfun ("gsl_stats_long_double_wabsdev_m" gsl_stats_long_double_wabsdev_m) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double))

(cl:export 'gsl_stats_long_double_wabsdev_m)

(cffi:defcfun ("gsl_stats_long_double_wskew_m_sd" gsl_stats_long_double_wskew_m_sd) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double)
  (wsd :double))

(cl:export 'gsl_stats_long_double_wskew_m_sd)

(cffi:defcfun ("gsl_stats_long_double_wkurtosis_m_sd" gsl_stats_long_double_wkurtosis_m_sd) :double
  (w :pointer)
  (wstride :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (wmean :double)
  (wsd :double))

(cl:export 'gsl_stats_long_double_wkurtosis_m_sd)

(cffi:defcfun ("gsl_stats_long_double_pvariance" gsl_stats_long_double_pvariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_long_double_pvariance)

(cffi:defcfun ("gsl_stats_long_double_ttest" gsl_stats_long_double_ttest) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_long_double_ttest)

(cffi:defcfun ("gsl_stats_long_double_max" gsl_stats_long_double_max) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_max)

(cffi:defcfun ("gsl_stats_long_double_min" gsl_stats_long_double_min) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_min)

(cffi:defcfun ("gsl_stats_long_double_minmax" gsl_stats_long_double_minmax) :void
  (min :pointer)
  (max :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_minmax)

(cffi:defcfun ("gsl_stats_long_double_max_index" gsl_stats_long_double_max_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_max_index)

(cffi:defcfun ("gsl_stats_long_double_min_index" gsl_stats_long_double_min_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_min_index)

(cffi:defcfun ("gsl_stats_long_double_minmax_index" gsl_stats_long_double_minmax_index) :void
  (min_index :pointer)
  (max_index :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_minmax_index)

(cffi:defcfun ("gsl_stats_long_double_median_from_sorted_data" gsl_stats_long_double_median_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_long_double_median_from_sorted_data)

(cffi:defcfun ("gsl_stats_long_double_quantile_from_sorted_data" gsl_stats_long_double_quantile_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer)
  (f :double))

(cl:export 'gsl_stats_long_double_quantile_from_sorted_data)

(cffi:defcfun ("gsl_stats_short_mean" gsl_stats_short_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_mean)

(cffi:defcfun ("gsl_stats_short_variance" gsl_stats_short_variance) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_variance)

(cffi:defcfun ("gsl_stats_short_sd" gsl_stats_short_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_sd)

(cffi:defcfun ("gsl_stats_short_variance_with_fixed_mean" gsl_stats_short_variance_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_short_variance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_short_sd_with_fixed_mean" gsl_stats_short_sd_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_short_sd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_short_tss" gsl_stats_short_tss) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_tss)

(cffi:defcfun ("gsl_stats_short_tss_m" gsl_stats_short_tss_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_short_tss_m)

(cffi:defcfun ("gsl_stats_short_absdev" gsl_stats_short_absdev) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_absdev)

(cffi:defcfun ("gsl_stats_short_skew" gsl_stats_short_skew) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_skew)

(cffi:defcfun ("gsl_stats_short_kurtosis" gsl_stats_short_kurtosis) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_kurtosis)

(cffi:defcfun ("gsl_stats_short_lag1_autocorrelation" gsl_stats_short_lag1_autocorrelation) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_lag1_autocorrelation)

(cffi:defcfun ("gsl_stats_short_covariance" gsl_stats_short_covariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_covariance)

(cffi:defcfun ("gsl_stats_short_correlation" gsl_stats_short_correlation) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_correlation)

(cffi:defcfun ("gsl_stats_short_spearman" gsl_stats_short_spearman) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (work :pointer))

(cl:export 'gsl_stats_short_spearman)

(cffi:defcfun ("gsl_stats_short_variance_m" gsl_stats_short_variance_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_short_variance_m)

(cffi:defcfun ("gsl_stats_short_sd_m" gsl_stats_short_sd_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_short_sd_m)

(cffi:defcfun ("gsl_stats_short_absdev_m" gsl_stats_short_absdev_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_short_absdev_m)

(cffi:defcfun ("gsl_stats_short_skew_m_sd" gsl_stats_short_skew_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_short_skew_m_sd)

(cffi:defcfun ("gsl_stats_short_kurtosis_m_sd" gsl_stats_short_kurtosis_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_short_kurtosis_m_sd)

(cffi:defcfun ("gsl_stats_short_lag1_autocorrelation_m" gsl_stats_short_lag1_autocorrelation_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_short_lag1_autocorrelation_m)

(cffi:defcfun ("gsl_stats_short_covariance_m" gsl_stats_short_covariance_m) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (mean1 :double)
  (mean2 :double))

(cl:export 'gsl_stats_short_covariance_m)

(cffi:defcfun ("gsl_stats_short_pvariance" gsl_stats_short_pvariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_short_pvariance)

(cffi:defcfun ("gsl_stats_short_ttest" gsl_stats_short_ttest) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_short_ttest)

(cffi:defcfun ("gsl_stats_short_max" gsl_stats_short_max) :short
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_max)

(cffi:defcfun ("gsl_stats_short_min" gsl_stats_short_min) :short
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_min)

(cffi:defcfun ("gsl_stats_short_minmax" gsl_stats_short_minmax) :void
  (min :pointer)
  (max :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_minmax)

(cffi:defcfun ("gsl_stats_short_max_index" gsl_stats_short_max_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_max_index)

(cffi:defcfun ("gsl_stats_short_min_index" gsl_stats_short_min_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_min_index)

(cffi:defcfun ("gsl_stats_short_minmax_index" gsl_stats_short_minmax_index) :void
  (min_index :pointer)
  (max_index :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_minmax_index)

(cffi:defcfun ("gsl_stats_short_median_from_sorted_data" gsl_stats_short_median_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_short_median_from_sorted_data)

(cffi:defcfun ("gsl_stats_short_quantile_from_sorted_data" gsl_stats_short_quantile_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer)
  (f :double))

(cl:export 'gsl_stats_short_quantile_from_sorted_data)

(cffi:defcfun ("gsl_stats_uchar_mean" gsl_stats_uchar_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_mean)

(cffi:defcfun ("gsl_stats_uchar_variance" gsl_stats_uchar_variance) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_variance)

(cffi:defcfun ("gsl_stats_uchar_sd" gsl_stats_uchar_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_sd)

(cffi:defcfun ("gsl_stats_uchar_variance_with_fixed_mean" gsl_stats_uchar_variance_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uchar_variance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_uchar_sd_with_fixed_mean" gsl_stats_uchar_sd_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uchar_sd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_uchar_tss" gsl_stats_uchar_tss) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_tss)

(cffi:defcfun ("gsl_stats_uchar_tss_m" gsl_stats_uchar_tss_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uchar_tss_m)

(cffi:defcfun ("gsl_stats_uchar_absdev" gsl_stats_uchar_absdev) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_absdev)

(cffi:defcfun ("gsl_stats_uchar_skew" gsl_stats_uchar_skew) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_skew)

(cffi:defcfun ("gsl_stats_uchar_kurtosis" gsl_stats_uchar_kurtosis) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_kurtosis)

(cffi:defcfun ("gsl_stats_uchar_lag1_autocorrelation" gsl_stats_uchar_lag1_autocorrelation) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_lag1_autocorrelation)

(cffi:defcfun ("gsl_stats_uchar_covariance" gsl_stats_uchar_covariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_covariance)

(cffi:defcfun ("gsl_stats_uchar_correlation" gsl_stats_uchar_correlation) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_correlation)

(cffi:defcfun ("gsl_stats_uchar_spearman" gsl_stats_uchar_spearman) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (work :pointer))

(cl:export 'gsl_stats_uchar_spearman)

(cffi:defcfun ("gsl_stats_uchar_variance_m" gsl_stats_uchar_variance_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uchar_variance_m)

(cffi:defcfun ("gsl_stats_uchar_sd_m" gsl_stats_uchar_sd_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uchar_sd_m)

(cffi:defcfun ("gsl_stats_uchar_absdev_m" gsl_stats_uchar_absdev_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uchar_absdev_m)

(cffi:defcfun ("gsl_stats_uchar_skew_m_sd" gsl_stats_uchar_skew_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_uchar_skew_m_sd)

(cffi:defcfun ("gsl_stats_uchar_kurtosis_m_sd" gsl_stats_uchar_kurtosis_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_uchar_kurtosis_m_sd)

(cffi:defcfun ("gsl_stats_uchar_lag1_autocorrelation_m" gsl_stats_uchar_lag1_autocorrelation_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uchar_lag1_autocorrelation_m)

(cffi:defcfun ("gsl_stats_uchar_covariance_m" gsl_stats_uchar_covariance_m) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (mean1 :double)
  (mean2 :double))

(cl:export 'gsl_stats_uchar_covariance_m)

(cffi:defcfun ("gsl_stats_uchar_pvariance" gsl_stats_uchar_pvariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_uchar_pvariance)

(cffi:defcfun ("gsl_stats_uchar_ttest" gsl_stats_uchar_ttest) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_uchar_ttest)

(cffi:defcfun ("gsl_stats_uchar_max" gsl_stats_uchar_max) :unsigned-char
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_max)

(cffi:defcfun ("gsl_stats_uchar_min" gsl_stats_uchar_min) :unsigned-char
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_min)

(cffi:defcfun ("gsl_stats_uchar_minmax" gsl_stats_uchar_minmax) :void
  (min :pointer)
  (max :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_minmax)

(cffi:defcfun ("gsl_stats_uchar_max_index" gsl_stats_uchar_max_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_max_index)

(cffi:defcfun ("gsl_stats_uchar_min_index" gsl_stats_uchar_min_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_min_index)

(cffi:defcfun ("gsl_stats_uchar_minmax_index" gsl_stats_uchar_minmax_index) :void
  (min_index :pointer)
  (max_index :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_minmax_index)

(cffi:defcfun ("gsl_stats_uchar_median_from_sorted_data" gsl_stats_uchar_median_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uchar_median_from_sorted_data)

(cffi:defcfun ("gsl_stats_uchar_quantile_from_sorted_data" gsl_stats_uchar_quantile_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer)
  (f :double))

(cl:export 'gsl_stats_uchar_quantile_from_sorted_data)

(cffi:defcfun ("gsl_stats_uint_mean" gsl_stats_uint_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_mean)

(cffi:defcfun ("gsl_stats_uint_variance" gsl_stats_uint_variance) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_variance)

(cffi:defcfun ("gsl_stats_uint_sd" gsl_stats_uint_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_sd)

(cffi:defcfun ("gsl_stats_uint_variance_with_fixed_mean" gsl_stats_uint_variance_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uint_variance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_uint_sd_with_fixed_mean" gsl_stats_uint_sd_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uint_sd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_uint_tss" gsl_stats_uint_tss) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_tss)

(cffi:defcfun ("gsl_stats_uint_tss_m" gsl_stats_uint_tss_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uint_tss_m)

(cffi:defcfun ("gsl_stats_uint_absdev" gsl_stats_uint_absdev) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_absdev)

(cffi:defcfun ("gsl_stats_uint_skew" gsl_stats_uint_skew) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_skew)

(cffi:defcfun ("gsl_stats_uint_kurtosis" gsl_stats_uint_kurtosis) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_kurtosis)

(cffi:defcfun ("gsl_stats_uint_lag1_autocorrelation" gsl_stats_uint_lag1_autocorrelation) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_lag1_autocorrelation)

(cffi:defcfun ("gsl_stats_uint_covariance" gsl_stats_uint_covariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_covariance)

(cffi:defcfun ("gsl_stats_uint_correlation" gsl_stats_uint_correlation) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_correlation)

(cffi:defcfun ("gsl_stats_uint_spearman" gsl_stats_uint_spearman) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (work :pointer))

(cl:export 'gsl_stats_uint_spearman)

(cffi:defcfun ("gsl_stats_uint_variance_m" gsl_stats_uint_variance_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uint_variance_m)

(cffi:defcfun ("gsl_stats_uint_sd_m" gsl_stats_uint_sd_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uint_sd_m)

(cffi:defcfun ("gsl_stats_uint_absdev_m" gsl_stats_uint_absdev_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uint_absdev_m)

(cffi:defcfun ("gsl_stats_uint_skew_m_sd" gsl_stats_uint_skew_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_uint_skew_m_sd)

(cffi:defcfun ("gsl_stats_uint_kurtosis_m_sd" gsl_stats_uint_kurtosis_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_uint_kurtosis_m_sd)

(cffi:defcfun ("gsl_stats_uint_lag1_autocorrelation_m" gsl_stats_uint_lag1_autocorrelation_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_uint_lag1_autocorrelation_m)

(cffi:defcfun ("gsl_stats_uint_covariance_m" gsl_stats_uint_covariance_m) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (mean1 :double)
  (mean2 :double))

(cl:export 'gsl_stats_uint_covariance_m)

(cffi:defcfun ("gsl_stats_uint_pvariance" gsl_stats_uint_pvariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_uint_pvariance)

(cffi:defcfun ("gsl_stats_uint_ttest" gsl_stats_uint_ttest) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_uint_ttest)

(cffi:defcfun ("gsl_stats_uint_max" gsl_stats_uint_max) :unsigned-int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_max)

(cffi:defcfun ("gsl_stats_uint_min" gsl_stats_uint_min) :unsigned-int
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_min)

(cffi:defcfun ("gsl_stats_uint_minmax" gsl_stats_uint_minmax) :void
  (min :pointer)
  (max :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_minmax)

(cffi:defcfun ("gsl_stats_uint_max_index" gsl_stats_uint_max_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_max_index)

(cffi:defcfun ("gsl_stats_uint_min_index" gsl_stats_uint_min_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_min_index)

(cffi:defcfun ("gsl_stats_uint_minmax_index" gsl_stats_uint_minmax_index) :void
  (min_index :pointer)
  (max_index :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_minmax_index)

(cffi:defcfun ("gsl_stats_uint_median_from_sorted_data" gsl_stats_uint_median_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_uint_median_from_sorted_data)

(cffi:defcfun ("gsl_stats_uint_quantile_from_sorted_data" gsl_stats_uint_quantile_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer)
  (f :double))

(cl:export 'gsl_stats_uint_quantile_from_sorted_data)

(cffi:defcfun ("gsl_stats_ulong_mean" gsl_stats_ulong_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_mean)

(cffi:defcfun ("gsl_stats_ulong_variance" gsl_stats_ulong_variance) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_variance)

(cffi:defcfun ("gsl_stats_ulong_sd" gsl_stats_ulong_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_sd)

(cffi:defcfun ("gsl_stats_ulong_variance_with_fixed_mean" gsl_stats_ulong_variance_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ulong_variance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_ulong_sd_with_fixed_mean" gsl_stats_ulong_sd_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ulong_sd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_ulong_tss" gsl_stats_ulong_tss) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_tss)

(cffi:defcfun ("gsl_stats_ulong_tss_m" gsl_stats_ulong_tss_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ulong_tss_m)

(cffi:defcfun ("gsl_stats_ulong_absdev" gsl_stats_ulong_absdev) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_absdev)

(cffi:defcfun ("gsl_stats_ulong_skew" gsl_stats_ulong_skew) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_skew)

(cffi:defcfun ("gsl_stats_ulong_kurtosis" gsl_stats_ulong_kurtosis) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_kurtosis)

(cffi:defcfun ("gsl_stats_ulong_lag1_autocorrelation" gsl_stats_ulong_lag1_autocorrelation) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_lag1_autocorrelation)

(cffi:defcfun ("gsl_stats_ulong_covariance" gsl_stats_ulong_covariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_covariance)

(cffi:defcfun ("gsl_stats_ulong_correlation" gsl_stats_ulong_correlation) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_correlation)

(cffi:defcfun ("gsl_stats_ulong_spearman" gsl_stats_ulong_spearman) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (work :pointer))

(cl:export 'gsl_stats_ulong_spearman)

(cffi:defcfun ("gsl_stats_ulong_variance_m" gsl_stats_ulong_variance_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ulong_variance_m)

(cffi:defcfun ("gsl_stats_ulong_sd_m" gsl_stats_ulong_sd_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ulong_sd_m)

(cffi:defcfun ("gsl_stats_ulong_absdev_m" gsl_stats_ulong_absdev_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ulong_absdev_m)

(cffi:defcfun ("gsl_stats_ulong_skew_m_sd" gsl_stats_ulong_skew_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_ulong_skew_m_sd)

(cffi:defcfun ("gsl_stats_ulong_kurtosis_m_sd" gsl_stats_ulong_kurtosis_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_ulong_kurtosis_m_sd)

(cffi:defcfun ("gsl_stats_ulong_lag1_autocorrelation_m" gsl_stats_ulong_lag1_autocorrelation_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ulong_lag1_autocorrelation_m)

(cffi:defcfun ("gsl_stats_ulong_covariance_m" gsl_stats_ulong_covariance_m) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (mean1 :double)
  (mean2 :double))

(cl:export 'gsl_stats_ulong_covariance_m)

(cffi:defcfun ("gsl_stats_ulong_pvariance" gsl_stats_ulong_pvariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_ulong_pvariance)

(cffi:defcfun ("gsl_stats_ulong_ttest" gsl_stats_ulong_ttest) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_ulong_ttest)

(cffi:defcfun ("gsl_stats_ulong_max" gsl_stats_ulong_max) :unsigned-long
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_max)

(cffi:defcfun ("gsl_stats_ulong_min" gsl_stats_ulong_min) :unsigned-long
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_min)

(cffi:defcfun ("gsl_stats_ulong_minmax" gsl_stats_ulong_minmax) :void
  (min :pointer)
  (max :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_minmax)

(cffi:defcfun ("gsl_stats_ulong_max_index" gsl_stats_ulong_max_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_max_index)

(cffi:defcfun ("gsl_stats_ulong_min_index" gsl_stats_ulong_min_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_min_index)

(cffi:defcfun ("gsl_stats_ulong_minmax_index" gsl_stats_ulong_minmax_index) :void
  (min_index :pointer)
  (max_index :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_minmax_index)

(cffi:defcfun ("gsl_stats_ulong_median_from_sorted_data" gsl_stats_ulong_median_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ulong_median_from_sorted_data)

(cffi:defcfun ("gsl_stats_ulong_quantile_from_sorted_data" gsl_stats_ulong_quantile_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer)
  (f :double))

(cl:export 'gsl_stats_ulong_quantile_from_sorted_data)

(cffi:defcfun ("gsl_stats_ushort_mean" gsl_stats_ushort_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_mean)

(cffi:defcfun ("gsl_stats_ushort_variance" gsl_stats_ushort_variance) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_variance)

(cffi:defcfun ("gsl_stats_ushort_sd" gsl_stats_ushort_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_sd)

(cffi:defcfun ("gsl_stats_ushort_variance_with_fixed_mean" gsl_stats_ushort_variance_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ushort_variance_with_fixed_mean)

(cffi:defcfun ("gsl_stats_ushort_sd_with_fixed_mean" gsl_stats_ushort_sd_with_fixed_mean) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ushort_sd_with_fixed_mean)

(cffi:defcfun ("gsl_stats_ushort_tss" gsl_stats_ushort_tss) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_tss)

(cffi:defcfun ("gsl_stats_ushort_tss_m" gsl_stats_ushort_tss_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ushort_tss_m)

(cffi:defcfun ("gsl_stats_ushort_absdev" gsl_stats_ushort_absdev) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_absdev)

(cffi:defcfun ("gsl_stats_ushort_skew" gsl_stats_ushort_skew) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_skew)

(cffi:defcfun ("gsl_stats_ushort_kurtosis" gsl_stats_ushort_kurtosis) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_kurtosis)

(cffi:defcfun ("gsl_stats_ushort_lag1_autocorrelation" gsl_stats_ushort_lag1_autocorrelation) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_lag1_autocorrelation)

(cffi:defcfun ("gsl_stats_ushort_covariance" gsl_stats_ushort_covariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_covariance)

(cffi:defcfun ("gsl_stats_ushort_correlation" gsl_stats_ushort_correlation) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_correlation)

(cffi:defcfun ("gsl_stats_ushort_spearman" gsl_stats_ushort_spearman) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (work :pointer))

(cl:export 'gsl_stats_ushort_spearman)

(cffi:defcfun ("gsl_stats_ushort_variance_m" gsl_stats_ushort_variance_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ushort_variance_m)

(cffi:defcfun ("gsl_stats_ushort_sd_m" gsl_stats_ushort_sd_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ushort_sd_m)

(cffi:defcfun ("gsl_stats_ushort_absdev_m" gsl_stats_ushort_absdev_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ushort_absdev_m)

(cffi:defcfun ("gsl_stats_ushort_skew_m_sd" gsl_stats_ushort_skew_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_ushort_skew_m_sd)

(cffi:defcfun ("gsl_stats_ushort_kurtosis_m_sd" gsl_stats_ushort_kurtosis_m_sd) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double)
  (sd :double))

(cl:export 'gsl_stats_ushort_kurtosis_m_sd)

(cffi:defcfun ("gsl_stats_ushort_lag1_autocorrelation_m" gsl_stats_ushort_lag1_autocorrelation_m) :double
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (mean :double))

(cl:export 'gsl_stats_ushort_lag1_autocorrelation_m)

(cffi:defcfun ("gsl_stats_ushort_covariance_m" gsl_stats_ushort_covariance_m) :double
  (data1 :pointer)
  (stride1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n :pointer)
  (mean1 :double)
  (mean2 :double))

(cl:export 'gsl_stats_ushort_covariance_m)

(cffi:defcfun ("gsl_stats_ushort_pvariance" gsl_stats_ushort_pvariance) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_ushort_pvariance)

(cffi:defcfun ("gsl_stats_ushort_ttest" gsl_stats_ushort_ttest) :double
  (data1 :pointer)
  (stride1 :pointer)
  (n1 :pointer)
  (data2 :pointer)
  (stride2 :pointer)
  (n2 :pointer))

(cl:export 'gsl_stats_ushort_ttest)

(cffi:defcfun ("gsl_stats_ushort_max" gsl_stats_ushort_max) :unsigned-short
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_max)

(cffi:defcfun ("gsl_stats_ushort_min" gsl_stats_ushort_min) :unsigned-short
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_min)

(cffi:defcfun ("gsl_stats_ushort_minmax" gsl_stats_ushort_minmax) :void
  (min :pointer)
  (max :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_minmax)

(cffi:defcfun ("gsl_stats_ushort_max_index" gsl_stats_ushort_max_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_max_index)

(cffi:defcfun ("gsl_stats_ushort_min_index" gsl_stats_ushort_min_index) :pointer
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_min_index)

(cffi:defcfun ("gsl_stats_ushort_minmax_index" gsl_stats_ushort_minmax_index) :void
  (min_index :pointer)
  (max_index :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_minmax_index)

(cffi:defcfun ("gsl_stats_ushort_median_from_sorted_data" gsl_stats_ushort_median_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_stats_ushort_median_from_sorted_data)

(cffi:defcfun ("gsl_stats_ushort_quantile_from_sorted_data" gsl_stats_ushort_quantile_from_sorted_data) :double
  (sorted_data :pointer)
  (stride :pointer)
  (n :pointer)
  (f :double))

(cl:export 'gsl_stats_ushort_quantile_from_sorted_data)

(cffi:defcstruct gsl_sum_levin_u_workspace
	(size :pointer)
	(i :pointer)
	(terms_used :pointer)
	(sum_plain :double)
	(q_num :pointer)
	(q_den :pointer)
	(dq_num :pointer)
	(dq_den :pointer)
	(dsum :pointer))

(cl:export 'gsl_sum_levin_u_workspace)

(cl:export 'size)

(cl:export 'i)

(cl:export 'terms_used)

(cl:export 'sum_plain)

(cl:export 'q_num)

(cl:export 'q_den)

(cl:export 'dq_num)

(cl:export 'dq_den)

(cl:export 'dsum)

(cffi:defcfun ("gsl_sum_levin_u_alloc" gsl_sum_levin_u_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_sum_levin_u_alloc)

(cffi:defcfun ("gsl_sum_levin_u_free" gsl_sum_levin_u_free) :void
  (w :pointer))

(cl:export 'gsl_sum_levin_u_free)

(cffi:defcfun ("gsl_sum_levin_u_accel" gsl_sum_levin_u_accel) :int
  (array :pointer)
  (n :pointer)
  (w :pointer)
  (sum_accel :pointer)
  (abserr :pointer))

(cl:export 'gsl_sum_levin_u_accel)

(cffi:defcfun ("gsl_sum_levin_u_minmax" gsl_sum_levin_u_minmax) :int
  (array :pointer)
  (n :pointer)
  (min_terms :pointer)
  (max_terms :pointer)
  (w :pointer)
  (sum_accel :pointer)
  (abserr :pointer))

(cl:export 'gsl_sum_levin_u_minmax)

(cffi:defcfun ("gsl_sum_levin_u_step" gsl_sum_levin_u_step) :int
  (term :double)
  (n :pointer)
  (nmax :pointer)
  (w :pointer)
  (sum_accel :pointer))

(cl:export 'gsl_sum_levin_u_step)

(cffi:defcstruct gsl_sum_levin_utrunc_workspace
	(size :pointer)
	(i :pointer)
	(terms_used :pointer)
	(sum_plain :double)
	(q_num :pointer)
	(q_den :pointer)
	(dsum :pointer))

(cl:export 'gsl_sum_levin_utrunc_workspace)

(cl:export 'size)

(cl:export 'i)

(cl:export 'terms_used)

(cl:export 'sum_plain)

(cl:export 'q_num)

(cl:export 'q_den)

(cl:export 'dsum)

(cffi:defcfun ("gsl_sum_levin_utrunc_alloc" gsl_sum_levin_utrunc_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_sum_levin_utrunc_alloc)

(cffi:defcfun ("gsl_sum_levin_utrunc_free" gsl_sum_levin_utrunc_free) :void
  (w :pointer))

(cl:export 'gsl_sum_levin_utrunc_free)

(cffi:defcfun ("gsl_sum_levin_utrunc_accel" gsl_sum_levin_utrunc_accel) :int
  (array :pointer)
  (n :pointer)
  (w :pointer)
  (sum_accel :pointer)
  (abserr_trunc :pointer))

(cl:export 'gsl_sum_levin_utrunc_accel)

(cffi:defcfun ("gsl_sum_levin_utrunc_minmax" gsl_sum_levin_utrunc_minmax) :int
  (array :pointer)
  (n :pointer)
  (min_terms :pointer)
  (max_terms :pointer)
  (w :pointer)
  (sum_accel :pointer)
  (abserr_trunc :pointer))

(cl:export 'gsl_sum_levin_utrunc_minmax)

(cffi:defcfun ("gsl_sum_levin_utrunc_step" gsl_sum_levin_utrunc_step) :int
  (term :double)
  (n :pointer)
  (w :pointer)
  (sum_accel :pointer))

(cl:export 'gsl_sum_levin_utrunc_step)

(cffi:defcfun ("gsl_log1p" gsl_log1p) :double
  (x :double))

(cl:export 'gsl_log1p)

(cffi:defcfun ("gsl_expm1" gsl_expm1) :double
  (x :double))

(cl:export 'gsl_expm1)

(cffi:defcfun ("gsl_hypot" gsl_hypot) :double
  (x :double)
  (y :double))

(cl:export 'gsl_hypot)

(cffi:defcfun ("gsl_hypot3" gsl_hypot3) :double
  (x :double)
  (y :double)
  (z :double))

(cl:export 'gsl_hypot3)

(cffi:defcfun ("gsl_acosh" gsl_acosh) :double
  (x :double))

(cl:export 'gsl_acosh)

(cffi:defcfun ("gsl_asinh" gsl_asinh) :double
  (x :double))

(cl:export 'gsl_asinh)

(cffi:defcfun ("gsl_atanh" gsl_atanh) :double
  (x :double))

(cl:export 'gsl_atanh)

(cffi:defcfun ("gsl_isnan" gsl_isnan) :int
  (x :double))

(cl:export 'gsl_isnan)

(cffi:defcfun ("gsl_isinf" gsl_isinf) :int
  (x :double))

(cl:export 'gsl_isinf)

(cffi:defcfun ("gsl_finite" gsl_finite) :int
  (x :double))

(cl:export 'gsl_finite)

(cffi:defcfun ("gsl_nan" gsl_nan) :double)

(cl:export 'gsl_nan)

(cffi:defcfun ("gsl_posinf" gsl_posinf) :double)

(cl:export 'gsl_posinf)

(cffi:defcfun ("gsl_neginf" gsl_neginf) :double)

(cl:export 'gsl_neginf)

(cffi:defcfun ("gsl_fdiv" gsl_fdiv) :double
  (x :double)
  (y :double))

(cl:export 'gsl_fdiv)

(cffi:defcfun ("gsl_coerce_double" gsl_coerce_double) :double
  (x :double))

(cl:export 'gsl_coerce_double)

(cffi:defcfun ("gsl_coerce_float" gsl_coerce_float) :float
  (x :float))

(cl:export 'gsl_coerce_float)

(cffi:defcfun ("gsl_coerce_long_double" gsl_coerce_long_double) :pointer
  (x :pointer))

(cl:export 'gsl_coerce_long_double)

(cffi:defcfun ("gsl_ldexp" gsl_ldexp) :double
  (x :double)
  (e :int))

(cl:export 'gsl_ldexp)

(cffi:defcfun ("gsl_frexp" gsl_frexp) :double
  (x :double)
  (e :pointer))

(cl:export 'gsl_frexp)

(cffi:defcfun ("gsl_fcmp" gsl_fcmp) :int
  (x1 :double)
  (x2 :double)
  (epsilon :double))

(cl:export 'gsl_fcmp)

(cffi:defcfun ("gsl_test" gsl_test) :void
  (status :int)
  (test_description :string)
  &rest)

(cl:export 'gsl_test)

(cffi:defcfun ("gsl_test_rel" gsl_test_rel) :void
  (result :double)
  (expected :double)
  (relative_error :double)
  (test_description :string)
  &rest)

(cl:export 'gsl_test_rel)

(cffi:defcfun ("gsl_test_abs" gsl_test_abs) :void
  (result :double)
  (expected :double)
  (absolute_error :double)
  (test_description :string)
  &rest)

(cl:export 'gsl_test_abs)

(cffi:defcfun ("gsl_test_factor" gsl_test_factor) :void
  (result :double)
  (expected :double)
  (factor :double)
  (test_description :string)
  &rest)

(cl:export 'gsl_test_factor)

(cffi:defcfun ("gsl_test_int" gsl_test_int) :void
  (result :int)
  (expected :int)
  (test_description :string)
  &rest)

(cl:export 'gsl_test_int)

(cffi:defcfun ("gsl_test_str" gsl_test_str) :void
  (result :string)
  (expected :string)
  (test_description :string)
  &rest)

(cl:export 'gsl_test_str)

(cffi:defcfun ("gsl_test_verbose" gsl_test_verbose) :void
  (verbose :int))

(cl:export 'gsl_test_verbose)

(cffi:defcfun ("gsl_test_summary" gsl_test_summary) :int)

(cl:export 'gsl_test_summary)

(cffi:defcstruct gsl_vector_char
	(size :pointer)
	(stride :pointer)
	(data :string)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector_char)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_char_view
	(vector gsl_vector_char))

(cl:export '_gsl_vector_char_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_char_const_view
	(vector gsl_vector_char))

(cl:export '_gsl_vector_char_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_char_alloc" gsl_vector_char_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_char_alloc)

(cffi:defcfun ("gsl_vector_char_calloc" gsl_vector_char_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_char_calloc)

(cffi:defcfun ("gsl_vector_char_alloc_from_block" gsl_vector_char_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_char_alloc_from_block)

(cffi:defcfun ("gsl_vector_char_alloc_from_vector" gsl_vector_char_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_char_alloc_from_vector)

(cffi:defcfun ("gsl_vector_char_free" gsl_vector_char_free) :void
  (v :pointer))

(cl:export 'gsl_vector_char_free)

(cffi:defcfun ("gsl_vector_char_view_array" gsl_vector_char_view_array) _gsl_vector_char_view
  (v :string)
  (n :pointer))

(cl:export 'gsl_vector_char_view_array)

(cffi:defcfun ("gsl_vector_char_view_array_with_stride" gsl_vector_char_view_array_with_stride) _gsl_vector_char_view
  (base :string)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_char_view_array_with_stride)

(cffi:defcfun ("gsl_vector_char_const_view_array" gsl_vector_char_const_view_array) _gsl_vector_char_const_view
  (v :string)
  (n :pointer))

(cl:export 'gsl_vector_char_const_view_array)

(cffi:defcfun ("gsl_vector_char_const_view_array_with_stride" gsl_vector_char_const_view_array_with_stride) _gsl_vector_char_const_view
  (base :string)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_char_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_char_subvector" gsl_vector_char_subvector) _gsl_vector_char_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_char_subvector)

(cffi:defcfun ("gsl_vector_char_subvector_with_stride" gsl_vector_char_subvector_with_stride) _gsl_vector_char_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_char_subvector_with_stride)

(cffi:defcfun ("gsl_vector_char_const_subvector" gsl_vector_char_const_subvector) _gsl_vector_char_const_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_char_const_subvector)

(cffi:defcfun ("gsl_vector_char_const_subvector_with_stride" gsl_vector_char_const_subvector_with_stride) _gsl_vector_char_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_char_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_char_set_zero" gsl_vector_char_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_char_set_zero)

(cffi:defcfun ("gsl_vector_char_set_all" gsl_vector_char_set_all) :void
  (v :pointer)
  (x :char))

(cl:export 'gsl_vector_char_set_all)

(cffi:defcfun ("gsl_vector_char_set_basis" gsl_vector_char_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_char_set_basis)

(cffi:defcfun ("gsl_vector_char_fread" gsl_vector_char_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_char_fread)

(cffi:defcfun ("gsl_vector_char_fwrite" gsl_vector_char_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_char_fwrite)

(cffi:defcfun ("gsl_vector_char_fscanf" gsl_vector_char_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_char_fscanf)

(cffi:defcfun ("gsl_vector_char_fprintf" gsl_vector_char_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_char_fprintf)

(cffi:defcfun ("gsl_vector_char_memcpy" gsl_vector_char_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_char_memcpy)

(cffi:defcfun ("gsl_vector_char_reverse" gsl_vector_char_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_char_reverse)

(cffi:defcfun ("gsl_vector_char_swap" gsl_vector_char_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_char_swap)

(cffi:defcfun ("gsl_vector_char_swap_elements" gsl_vector_char_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_char_swap_elements)

(cffi:defcfun ("gsl_vector_char_max" gsl_vector_char_max) :char
  (v :pointer))

(cl:export 'gsl_vector_char_max)

(cffi:defcfun ("gsl_vector_char_min" gsl_vector_char_min) :char
  (v :pointer))

(cl:export 'gsl_vector_char_min)

(cffi:defcfun ("gsl_vector_char_minmax" gsl_vector_char_minmax) :void
  (v :pointer)
  (min_out :string)
  (max_out :string))

(cl:export 'gsl_vector_char_minmax)

(cffi:defcfun ("gsl_vector_char_max_index" gsl_vector_char_max_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_char_max_index)

(cffi:defcfun ("gsl_vector_char_min_index" gsl_vector_char_min_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_char_min_index)

(cffi:defcfun ("gsl_vector_char_minmax_index" gsl_vector_char_minmax_index) :void
  (v :pointer)
  (imin :pointer)
  (imax :pointer))

(cl:export 'gsl_vector_char_minmax_index)

(cffi:defcfun ("gsl_vector_char_add" gsl_vector_char_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_char_add)

(cffi:defcfun ("gsl_vector_char_sub" gsl_vector_char_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_char_sub)

(cffi:defcfun ("gsl_vector_char_mul" gsl_vector_char_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_char_mul)

(cffi:defcfun ("gsl_vector_char_div" gsl_vector_char_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_char_div)

(cffi:defcfun ("gsl_vector_char_scale" gsl_vector_char_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_char_scale)

(cffi:defcfun ("gsl_vector_char_add_constant" gsl_vector_char_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_char_add_constant)

(cffi:defcfun ("gsl_vector_char_equal" gsl_vector_char_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_char_equal)

(cffi:defcfun ("gsl_vector_char_isnull" gsl_vector_char_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_char_isnull)

(cffi:defcfun ("gsl_vector_char_ispos" gsl_vector_char_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_char_ispos)

(cffi:defcfun ("gsl_vector_char_isneg" gsl_vector_char_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_char_isneg)

(cffi:defcfun ("gsl_vector_char_isnonneg" gsl_vector_char_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_char_isnonneg)

(cffi:defcfun ("gsl_vector_char_get" gsl_vector_char_get) :char
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_char_get)

(cffi:defcfun ("gsl_vector_char_set" gsl_vector_char_set) :void
  (v :pointer)
  (i :pointer)
  (x :char))

(cl:export 'gsl_vector_char_set)

(cffi:defcfun ("gsl_vector_char_ptr" gsl_vector_char_ptr) :string
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_char_ptr)

(cffi:defcfun ("gsl_vector_char_const_ptr" gsl_vector_char_const_ptr) :string
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_char_const_ptr)

(cffi:defcstruct gsl_vector_complex
	(size :pointer)
	(stride :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector_complex)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_complex_view
	(vector gsl_vector_complex))

(cl:export '_gsl_vector_complex_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_complex_const_view
	(vector gsl_vector_complex))

(cl:export '_gsl_vector_complex_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_complex_alloc" gsl_vector_complex_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_complex_alloc)

(cffi:defcfun ("gsl_vector_complex_calloc" gsl_vector_complex_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_complex_calloc)

(cffi:defcfun ("gsl_vector_complex_alloc_from_block" gsl_vector_complex_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_complex_alloc_from_block)

(cffi:defcfun ("gsl_vector_complex_alloc_from_vector" gsl_vector_complex_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_complex_alloc_from_vector)

(cffi:defcfun ("gsl_vector_complex_free" gsl_vector_complex_free) :void
  (v :pointer))

(cl:export 'gsl_vector_complex_free)

(cffi:defcfun ("gsl_vector_complex_view_array" gsl_vector_complex_view_array) _gsl_vector_complex_view
  (base :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_view_array)

(cffi:defcfun ("gsl_vector_complex_view_array_with_stride" gsl_vector_complex_view_array_with_stride) _gsl_vector_complex_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_view_array_with_stride)

(cffi:defcfun ("gsl_vector_complex_const_view_array" gsl_vector_complex_const_view_array) _gsl_vector_complex_const_view
  (base :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_const_view_array)

(cffi:defcfun ("gsl_vector_complex_const_view_array_with_stride" gsl_vector_complex_const_view_array_with_stride) _gsl_vector_complex_const_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_complex_subvector" gsl_vector_complex_subvector) _gsl_vector_complex_view
  (base :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_subvector)

(cffi:defcfun ("gsl_vector_complex_subvector_with_stride" gsl_vector_complex_subvector_with_stride) _gsl_vector_complex_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_subvector_with_stride)

(cffi:defcfun ("gsl_vector_complex_const_subvector" gsl_vector_complex_const_subvector) _gsl_vector_complex_const_view
  (base :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_const_subvector)

(cffi:defcfun ("gsl_vector_complex_const_subvector_with_stride" gsl_vector_complex_const_subvector_with_stride) _gsl_vector_complex_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_complex_real" gsl_vector_complex_real) :pointer
  (v :pointer))

(cl:export 'gsl_vector_complex_real)

(cffi:defcfun ("gsl_vector_complex_imag" gsl_vector_complex_imag) :pointer
  (v :pointer))

(cl:export 'gsl_vector_complex_imag)

(cffi:defcfun ("gsl_vector_complex_const_real" gsl_vector_complex_const_real) :pointer
  (v :pointer))

(cl:export 'gsl_vector_complex_const_real)

(cffi:defcfun ("gsl_vector_complex_const_imag" gsl_vector_complex_const_imag) :pointer
  (v :pointer))

(cl:export 'gsl_vector_complex_const_imag)

(cffi:defcfun ("gsl_vector_complex_set_zero" gsl_vector_complex_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_complex_set_zero)

(cffi:defcfun ("gsl_vector_complex_set_all" gsl_vector_complex_set_all) :void
  (v :pointer)
  (z gsl_complex))

(cl:export 'gsl_vector_complex_set_all)

(cffi:defcfun ("gsl_vector_complex_set_basis" gsl_vector_complex_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_set_basis)

(cffi:defcfun ("gsl_vector_complex_fread" gsl_vector_complex_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_complex_fread)

(cffi:defcfun ("gsl_vector_complex_fwrite" gsl_vector_complex_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_complex_fwrite)

(cffi:defcfun ("gsl_vector_complex_fscanf" gsl_vector_complex_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_complex_fscanf)

(cffi:defcfun ("gsl_vector_complex_fprintf" gsl_vector_complex_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_complex_fprintf)

(cffi:defcfun ("gsl_vector_complex_memcpy" gsl_vector_complex_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_complex_memcpy)

(cffi:defcfun ("gsl_vector_complex_reverse" gsl_vector_complex_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_reverse)

(cffi:defcfun ("gsl_vector_complex_swap" gsl_vector_complex_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_complex_swap)

(cffi:defcfun ("gsl_vector_complex_swap_elements" gsl_vector_complex_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_complex_swap_elements)

(cffi:defcfun ("gsl_vector_complex_equal" gsl_vector_complex_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_complex_equal)

(cffi:defcfun ("gsl_vector_complex_isnull" gsl_vector_complex_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_isnull)

(cffi:defcfun ("gsl_vector_complex_ispos" gsl_vector_complex_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_ispos)

(cffi:defcfun ("gsl_vector_complex_isneg" gsl_vector_complex_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_isneg)

(cffi:defcfun ("gsl_vector_complex_isnonneg" gsl_vector_complex_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_isnonneg)

(cffi:defcfun ("gsl_vector_complex_add" gsl_vector_complex_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_complex_add)

(cffi:defcfun ("gsl_vector_complex_sub" gsl_vector_complex_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_complex_sub)

(cffi:defcfun ("gsl_vector_complex_mul" gsl_vector_complex_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_complex_mul)

(cffi:defcfun ("gsl_vector_complex_div" gsl_vector_complex_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_complex_div)

(cffi:defcfun ("gsl_vector_complex_scale" gsl_vector_complex_scale) :int
  (a :pointer)
  (x gsl_complex))

(cl:export 'gsl_vector_complex_scale)

(cffi:defcfun ("gsl_vector_complex_add_constant" gsl_vector_complex_add_constant) :int
  (a :pointer)
  (x gsl_complex))

(cl:export 'gsl_vector_complex_add_constant)

(cffi:defcfun ("gsl_vector_complex_get" gsl_vector_complex_get) gsl_complex
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_get)

(cffi:defcfun ("gsl_vector_complex_set" gsl_vector_complex_set) :void
  (v :pointer)
  (i :pointer)
  (z gsl_complex))

(cl:export 'gsl_vector_complex_set)

(cffi:defcfun ("gsl_vector_complex_ptr" gsl_vector_complex_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_ptr)

(cffi:defcfun ("gsl_vector_complex_const_ptr" gsl_vector_complex_const_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_const_ptr)

(cffi:defcstruct gsl_vector_complex_float
	(size :pointer)
	(stride :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector_complex_float)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_complex_float_view
	(vector gsl_vector_complex_float))

(cl:export '_gsl_vector_complex_float_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_complex_float_const_view
	(vector gsl_vector_complex_float))

(cl:export '_gsl_vector_complex_float_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_complex_float_alloc" gsl_vector_complex_float_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_complex_float_alloc)

(cffi:defcfun ("gsl_vector_complex_float_calloc" gsl_vector_complex_float_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_complex_float_calloc)

(cffi:defcfun ("gsl_vector_complex_float_alloc_from_block" gsl_vector_complex_float_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_complex_float_alloc_from_block)

(cffi:defcfun ("gsl_vector_complex_float_alloc_from_vector" gsl_vector_complex_float_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_complex_float_alloc_from_vector)

(cffi:defcfun ("gsl_vector_complex_float_free" gsl_vector_complex_float_free) :void
  (v :pointer))

(cl:export 'gsl_vector_complex_float_free)

(cffi:defcfun ("gsl_vector_complex_float_view_array" gsl_vector_complex_float_view_array) _gsl_vector_complex_float_view
  (base :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_float_view_array)

(cffi:defcfun ("gsl_vector_complex_float_view_array_with_stride" gsl_vector_complex_float_view_array_with_stride) _gsl_vector_complex_float_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_float_view_array_with_stride)

(cffi:defcfun ("gsl_vector_complex_float_const_view_array" gsl_vector_complex_float_const_view_array) _gsl_vector_complex_float_const_view
  (base :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_float_const_view_array)

(cffi:defcfun ("gsl_vector_complex_float_const_view_array_with_stride" gsl_vector_complex_float_const_view_array_with_stride) _gsl_vector_complex_float_const_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_float_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_complex_float_subvector" gsl_vector_complex_float_subvector) _gsl_vector_complex_float_view
  (base :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_float_subvector)

(cffi:defcfun ("gsl_vector_complex_float_subvector_with_stride" gsl_vector_complex_float_subvector_with_stride) _gsl_vector_complex_float_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_float_subvector_with_stride)

(cffi:defcfun ("gsl_vector_complex_float_const_subvector" gsl_vector_complex_float_const_subvector) _gsl_vector_complex_float_const_view
  (base :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_float_const_subvector)

(cffi:defcfun ("gsl_vector_complex_float_const_subvector_with_stride" gsl_vector_complex_float_const_subvector_with_stride) _gsl_vector_complex_float_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_float_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_complex_float_real" gsl_vector_complex_float_real) :pointer
  (v :pointer))

(cl:export 'gsl_vector_complex_float_real)

(cffi:defcfun ("gsl_vector_complex_float_imag" gsl_vector_complex_float_imag) :pointer
  (v :pointer))

(cl:export 'gsl_vector_complex_float_imag)

(cffi:defcfun ("gsl_vector_complex_float_const_real" gsl_vector_complex_float_const_real) :pointer
  (v :pointer))

(cl:export 'gsl_vector_complex_float_const_real)

(cffi:defcfun ("gsl_vector_complex_float_const_imag" gsl_vector_complex_float_const_imag) :pointer
  (v :pointer))

(cl:export 'gsl_vector_complex_float_const_imag)

(cffi:defcfun ("gsl_vector_complex_float_set_zero" gsl_vector_complex_float_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_complex_float_set_zero)

(cffi:defcfun ("gsl_vector_complex_float_set_all" gsl_vector_complex_float_set_all) :void
  (v :pointer)
  (z gsl_complex_float))

(cl:export 'gsl_vector_complex_float_set_all)

(cffi:defcfun ("gsl_vector_complex_float_set_basis" gsl_vector_complex_float_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_float_set_basis)

(cffi:defcfun ("gsl_vector_complex_float_fread" gsl_vector_complex_float_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_complex_float_fread)

(cffi:defcfun ("gsl_vector_complex_float_fwrite" gsl_vector_complex_float_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_complex_float_fwrite)

(cffi:defcfun ("gsl_vector_complex_float_fscanf" gsl_vector_complex_float_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_complex_float_fscanf)

(cffi:defcfun ("gsl_vector_complex_float_fprintf" gsl_vector_complex_float_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_complex_float_fprintf)

(cffi:defcfun ("gsl_vector_complex_float_memcpy" gsl_vector_complex_float_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_complex_float_memcpy)

(cffi:defcfun ("gsl_vector_complex_float_reverse" gsl_vector_complex_float_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_float_reverse)

(cffi:defcfun ("gsl_vector_complex_float_swap" gsl_vector_complex_float_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_complex_float_swap)

(cffi:defcfun ("gsl_vector_complex_float_swap_elements" gsl_vector_complex_float_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_complex_float_swap_elements)

(cffi:defcfun ("gsl_vector_complex_float_equal" gsl_vector_complex_float_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_complex_float_equal)

(cffi:defcfun ("gsl_vector_complex_float_isnull" gsl_vector_complex_float_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_float_isnull)

(cffi:defcfun ("gsl_vector_complex_float_ispos" gsl_vector_complex_float_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_float_ispos)

(cffi:defcfun ("gsl_vector_complex_float_isneg" gsl_vector_complex_float_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_float_isneg)

(cffi:defcfun ("gsl_vector_complex_float_isnonneg" gsl_vector_complex_float_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_float_isnonneg)

(cffi:defcfun ("gsl_vector_complex_float_add" gsl_vector_complex_float_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_complex_float_add)

(cffi:defcfun ("gsl_vector_complex_float_sub" gsl_vector_complex_float_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_complex_float_sub)

(cffi:defcfun ("gsl_vector_complex_float_mul" gsl_vector_complex_float_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_complex_float_mul)

(cffi:defcfun ("gsl_vector_complex_float_div" gsl_vector_complex_float_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_complex_float_div)

(cffi:defcfun ("gsl_vector_complex_float_scale" gsl_vector_complex_float_scale) :int
  (a :pointer)
  (x gsl_complex_float))

(cl:export 'gsl_vector_complex_float_scale)

(cffi:defcfun ("gsl_vector_complex_float_add_constant" gsl_vector_complex_float_add_constant) :int
  (a :pointer)
  (x gsl_complex_float))

(cl:export 'gsl_vector_complex_float_add_constant)

(cffi:defcfun ("gsl_vector_complex_float_get" gsl_vector_complex_float_get) gsl_complex_float
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_float_get)

(cffi:defcfun ("gsl_vector_complex_float_set" gsl_vector_complex_float_set) :void
  (v :pointer)
  (i :pointer)
  (z gsl_complex_float))

(cl:export 'gsl_vector_complex_float_set)

(cffi:defcfun ("gsl_vector_complex_float_ptr" gsl_vector_complex_float_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_float_ptr)

(cffi:defcfun ("gsl_vector_complex_float_const_ptr" gsl_vector_complex_float_const_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_float_const_ptr)

(cffi:defcstruct gsl_vector_complex_long_double
	(size :pointer)
	(stride :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector_complex_long_double)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_complex_long_double_view
	(vector gsl_vector_complex_long_double))

(cl:export '_gsl_vector_complex_long_double_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_complex_long_double_const_view
	(vector gsl_vector_complex_long_double))

(cl:export '_gsl_vector_complex_long_double_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_complex_long_double_alloc" gsl_vector_complex_long_double_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_complex_long_double_alloc)

(cffi:defcfun ("gsl_vector_complex_long_double_calloc" gsl_vector_complex_long_double_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_complex_long_double_calloc)

(cffi:defcfun ("gsl_vector_complex_long_double_alloc_from_block" gsl_vector_complex_long_double_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_complex_long_double_alloc_from_block)

(cffi:defcfun ("gsl_vector_complex_long_double_alloc_from_vector" gsl_vector_complex_long_double_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_complex_long_double_alloc_from_vector)

(cffi:defcfun ("gsl_vector_complex_long_double_free" gsl_vector_complex_long_double_free) :void
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_free)

(cffi:defcfun ("gsl_vector_complex_long_double_view_array" gsl_vector_complex_long_double_view_array) _gsl_vector_complex_long_double_view
  (base :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_long_double_view_array)

(cffi:defcfun ("gsl_vector_complex_long_double_view_array_with_stride" gsl_vector_complex_long_double_view_array_with_stride) _gsl_vector_complex_long_double_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_long_double_view_array_with_stride)

(cffi:defcfun ("gsl_vector_complex_long_double_const_view_array" gsl_vector_complex_long_double_const_view_array) _gsl_vector_complex_long_double_const_view
  (base :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_long_double_const_view_array)

(cffi:defcfun ("gsl_vector_complex_long_double_const_view_array_with_stride" gsl_vector_complex_long_double_const_view_array_with_stride) _gsl_vector_complex_long_double_const_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_long_double_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_complex_long_double_subvector" gsl_vector_complex_long_double_subvector) _gsl_vector_complex_long_double_view
  (base :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_long_double_subvector)

(cffi:defcfun ("gsl_vector_complex_long_double_subvector_with_stride" gsl_vector_complex_long_double_subvector_with_stride) _gsl_vector_complex_long_double_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_long_double_subvector_with_stride)

(cffi:defcfun ("gsl_vector_complex_long_double_const_subvector" gsl_vector_complex_long_double_const_subvector) _gsl_vector_complex_long_double_const_view
  (base :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_long_double_const_subvector)

(cffi:defcfun ("gsl_vector_complex_long_double_const_subvector_with_stride" gsl_vector_complex_long_double_const_subvector_with_stride) _gsl_vector_complex_long_double_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_complex_long_double_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_complex_long_double_real" gsl_vector_complex_long_double_real) :pointer
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_real)

(cffi:defcfun ("gsl_vector_complex_long_double_imag" gsl_vector_complex_long_double_imag) :pointer
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_imag)

(cffi:defcfun ("gsl_vector_complex_long_double_const_real" gsl_vector_complex_long_double_const_real) :pointer
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_const_real)

(cffi:defcfun ("gsl_vector_complex_long_double_const_imag" gsl_vector_complex_long_double_const_imag) :pointer
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_const_imag)

(cffi:defcfun ("gsl_vector_complex_long_double_set_zero" gsl_vector_complex_long_double_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_set_zero)

(cffi:defcfun ("gsl_vector_complex_long_double_set_all" gsl_vector_complex_long_double_set_all) :void
  (v :pointer)
  (z gsl_complex_long_double))

(cl:export 'gsl_vector_complex_long_double_set_all)

(cffi:defcfun ("gsl_vector_complex_long_double_set_basis" gsl_vector_complex_long_double_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_long_double_set_basis)

(cffi:defcfun ("gsl_vector_complex_long_double_fread" gsl_vector_complex_long_double_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_fread)

(cffi:defcfun ("gsl_vector_complex_long_double_fwrite" gsl_vector_complex_long_double_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_fwrite)

(cffi:defcfun ("gsl_vector_complex_long_double_fscanf" gsl_vector_complex_long_double_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_fscanf)

(cffi:defcfun ("gsl_vector_complex_long_double_fprintf" gsl_vector_complex_long_double_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_complex_long_double_fprintf)

(cffi:defcfun ("gsl_vector_complex_long_double_memcpy" gsl_vector_complex_long_double_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_complex_long_double_memcpy)

(cffi:defcfun ("gsl_vector_complex_long_double_reverse" gsl_vector_complex_long_double_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_reverse)

(cffi:defcfun ("gsl_vector_complex_long_double_swap" gsl_vector_complex_long_double_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_complex_long_double_swap)

(cffi:defcfun ("gsl_vector_complex_long_double_swap_elements" gsl_vector_complex_long_double_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_complex_long_double_swap_elements)

(cffi:defcfun ("gsl_vector_complex_long_double_equal" gsl_vector_complex_long_double_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_equal)

(cffi:defcfun ("gsl_vector_complex_long_double_isnull" gsl_vector_complex_long_double_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_isnull)

(cffi:defcfun ("gsl_vector_complex_long_double_ispos" gsl_vector_complex_long_double_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_ispos)

(cffi:defcfun ("gsl_vector_complex_long_double_isneg" gsl_vector_complex_long_double_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_isneg)

(cffi:defcfun ("gsl_vector_complex_long_double_isnonneg" gsl_vector_complex_long_double_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_complex_long_double_isnonneg)

(cffi:defcfun ("gsl_vector_complex_long_double_add" gsl_vector_complex_long_double_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_complex_long_double_add)

(cffi:defcfun ("gsl_vector_complex_long_double_sub" gsl_vector_complex_long_double_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_complex_long_double_sub)

(cffi:defcfun ("gsl_vector_complex_long_double_mul" gsl_vector_complex_long_double_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_complex_long_double_mul)

(cffi:defcfun ("gsl_vector_complex_long_double_div" gsl_vector_complex_long_double_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_complex_long_double_div)

(cffi:defcfun ("gsl_vector_complex_long_double_scale" gsl_vector_complex_long_double_scale) :int
  (a :pointer)
  (x gsl_complex_long_double))

(cl:export 'gsl_vector_complex_long_double_scale)

(cffi:defcfun ("gsl_vector_complex_long_double_add_constant" gsl_vector_complex_long_double_add_constant) :int
  (a :pointer)
  (x gsl_complex_long_double))

(cl:export 'gsl_vector_complex_long_double_add_constant)

(cffi:defcfun ("gsl_vector_complex_long_double_get" gsl_vector_complex_long_double_get) gsl_complex_long_double
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_long_double_get)

(cffi:defcfun ("gsl_vector_complex_long_double_set" gsl_vector_complex_long_double_set) :void
  (v :pointer)
  (i :pointer)
  (z gsl_complex_long_double))

(cl:export 'gsl_vector_complex_long_double_set)

(cffi:defcfun ("gsl_vector_complex_long_double_ptr" gsl_vector_complex_long_double_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_long_double_ptr)

(cffi:defcfun ("gsl_vector_complex_long_double_const_ptr" gsl_vector_complex_long_double_const_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_complex_long_double_const_ptr)

(cffi:defcstruct gsl_vector
	(size :pointer)
	(stride :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_view
	(vector gsl_vector))

(cl:export '_gsl_vector_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_const_view
	(vector gsl_vector))

(cl:export '_gsl_vector_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_alloc" gsl_vector_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_alloc)

(cffi:defcfun ("gsl_vector_calloc" gsl_vector_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_calloc)

(cffi:defcfun ("gsl_vector_alloc_from_block" gsl_vector_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_alloc_from_block)

(cffi:defcfun ("gsl_vector_alloc_from_vector" gsl_vector_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_alloc_from_vector)

(cffi:defcfun ("gsl_vector_free" gsl_vector_free) :void
  (v :pointer))

(cl:export 'gsl_vector_free)

(cffi:defcfun ("gsl_vector_view_array" gsl_vector_view_array) _gsl_vector_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_view_array)

(cffi:defcfun ("gsl_vector_view_array_with_stride" gsl_vector_view_array_with_stride) _gsl_vector_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_view_array_with_stride)

(cffi:defcfun ("gsl_vector_const_view_array" gsl_vector_const_view_array) _gsl_vector_const_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_const_view_array)

(cffi:defcfun ("gsl_vector_const_view_array_with_stride" gsl_vector_const_view_array_with_stride) _gsl_vector_const_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_subvector" gsl_vector_subvector) _gsl_vector_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_subvector)

(cffi:defcfun ("gsl_vector_subvector_with_stride" gsl_vector_subvector_with_stride) _gsl_vector_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_subvector_with_stride)

(cffi:defcfun ("gsl_vector_const_subvector" gsl_vector_const_subvector) _gsl_vector_const_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_const_subvector)

(cffi:defcfun ("gsl_vector_const_subvector_with_stride" gsl_vector_const_subvector_with_stride) _gsl_vector_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_set_zero" gsl_vector_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_set_zero)

(cffi:defcfun ("gsl_vector_set_all" gsl_vector_set_all) :void
  (v :pointer)
  (x :double))

(cl:export 'gsl_vector_set_all)

(cffi:defcfun ("gsl_vector_set_basis" gsl_vector_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_set_basis)

(cffi:defcfun ("gsl_vector_fread" gsl_vector_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_fread)

(cffi:defcfun ("gsl_vector_fwrite" gsl_vector_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_fwrite)

(cffi:defcfun ("gsl_vector_fscanf" gsl_vector_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_fscanf)

(cffi:defcfun ("gsl_vector_fprintf" gsl_vector_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_fprintf)

(cffi:defcfun ("gsl_vector_memcpy" gsl_vector_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_memcpy)

(cffi:defcfun ("gsl_vector_reverse" gsl_vector_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_reverse)

(cffi:defcfun ("gsl_vector_swap" gsl_vector_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_swap)

(cffi:defcfun ("gsl_vector_swap_elements" gsl_vector_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_swap_elements)

(cffi:defcfun ("gsl_vector_max" gsl_vector_max) :double
  (v :pointer))

(cl:export 'gsl_vector_max)

(cffi:defcfun ("gsl_vector_min" gsl_vector_min) :double
  (v :pointer))

(cl:export 'gsl_vector_min)

(cffi:defcfun ("gsl_vector_minmax" gsl_vector_minmax) :void
  (v :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_vector_minmax)

(cffi:defcfun ("gsl_vector_max_index" gsl_vector_max_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_max_index)

(cffi:defcfun ("gsl_vector_min_index" gsl_vector_min_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_min_index)

(cffi:defcfun ("gsl_vector_minmax_index" gsl_vector_minmax_index) :void
  (v :pointer)
  (imin :pointer)
  (imax :pointer))

(cl:export 'gsl_vector_minmax_index)

(cffi:defcfun ("gsl_vector_add" gsl_vector_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_add)

(cffi:defcfun ("gsl_vector_sub" gsl_vector_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_sub)

(cffi:defcfun ("gsl_vector_mul" gsl_vector_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_mul)

(cffi:defcfun ("gsl_vector_div" gsl_vector_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_div)

(cffi:defcfun ("gsl_vector_scale" gsl_vector_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_scale)

(cffi:defcfun ("gsl_vector_add_constant" gsl_vector_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_add_constant)

(cffi:defcfun ("gsl_vector_equal" gsl_vector_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_equal)

(cffi:defcfun ("gsl_vector_isnull" gsl_vector_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_isnull)

(cffi:defcfun ("gsl_vector_ispos" gsl_vector_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_ispos)

(cffi:defcfun ("gsl_vector_isneg" gsl_vector_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_isneg)

(cffi:defcfun ("gsl_vector_isnonneg" gsl_vector_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_isnonneg)

(cffi:defcfun ("gsl_vector_get" gsl_vector_get) :double
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_get)

(cffi:defcfun ("gsl_vector_set" gsl_vector_set) :void
  (v :pointer)
  (i :pointer)
  (x :double))

(cl:export 'gsl_vector_set)

(cffi:defcfun ("gsl_vector_ptr" gsl_vector_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_ptr)

(cffi:defcfun ("gsl_vector_const_ptr" gsl_vector_const_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_const_ptr)

(cffi:defcstruct gsl_vector_float
	(size :pointer)
	(stride :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector_float)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_float_view
	(vector gsl_vector_float))

(cl:export '_gsl_vector_float_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_float_const_view
	(vector gsl_vector_float))

(cl:export '_gsl_vector_float_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_float_alloc" gsl_vector_float_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_float_alloc)

(cffi:defcfun ("gsl_vector_float_calloc" gsl_vector_float_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_float_calloc)

(cffi:defcfun ("gsl_vector_float_alloc_from_block" gsl_vector_float_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_float_alloc_from_block)

(cffi:defcfun ("gsl_vector_float_alloc_from_vector" gsl_vector_float_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_float_alloc_from_vector)

(cffi:defcfun ("gsl_vector_float_free" gsl_vector_float_free) :void
  (v :pointer))

(cl:export 'gsl_vector_float_free)

(cffi:defcfun ("gsl_vector_float_view_array" gsl_vector_float_view_array) _gsl_vector_float_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_float_view_array)

(cffi:defcfun ("gsl_vector_float_view_array_with_stride" gsl_vector_float_view_array_with_stride) _gsl_vector_float_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_float_view_array_with_stride)

(cffi:defcfun ("gsl_vector_float_const_view_array" gsl_vector_float_const_view_array) _gsl_vector_float_const_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_float_const_view_array)

(cffi:defcfun ("gsl_vector_float_const_view_array_with_stride" gsl_vector_float_const_view_array_with_stride) _gsl_vector_float_const_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_float_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_float_subvector" gsl_vector_float_subvector) _gsl_vector_float_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_float_subvector)

(cffi:defcfun ("gsl_vector_float_subvector_with_stride" gsl_vector_float_subvector_with_stride) _gsl_vector_float_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_float_subvector_with_stride)

(cffi:defcfun ("gsl_vector_float_const_subvector" gsl_vector_float_const_subvector) _gsl_vector_float_const_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_float_const_subvector)

(cffi:defcfun ("gsl_vector_float_const_subvector_with_stride" gsl_vector_float_const_subvector_with_stride) _gsl_vector_float_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_float_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_float_set_zero" gsl_vector_float_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_float_set_zero)

(cffi:defcfun ("gsl_vector_float_set_all" gsl_vector_float_set_all) :void
  (v :pointer)
  (x :float))

(cl:export 'gsl_vector_float_set_all)

(cffi:defcfun ("gsl_vector_float_set_basis" gsl_vector_float_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_float_set_basis)

(cffi:defcfun ("gsl_vector_float_fread" gsl_vector_float_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_float_fread)

(cffi:defcfun ("gsl_vector_float_fwrite" gsl_vector_float_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_float_fwrite)

(cffi:defcfun ("gsl_vector_float_fscanf" gsl_vector_float_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_float_fscanf)

(cffi:defcfun ("gsl_vector_float_fprintf" gsl_vector_float_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_float_fprintf)

(cffi:defcfun ("gsl_vector_float_memcpy" gsl_vector_float_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_float_memcpy)

(cffi:defcfun ("gsl_vector_float_reverse" gsl_vector_float_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_float_reverse)

(cffi:defcfun ("gsl_vector_float_swap" gsl_vector_float_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_float_swap)

(cffi:defcfun ("gsl_vector_float_swap_elements" gsl_vector_float_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_float_swap_elements)

(cffi:defcfun ("gsl_vector_float_max" gsl_vector_float_max) :float
  (v :pointer))

(cl:export 'gsl_vector_float_max)

(cffi:defcfun ("gsl_vector_float_min" gsl_vector_float_min) :float
  (v :pointer))

(cl:export 'gsl_vector_float_min)

(cffi:defcfun ("gsl_vector_float_minmax" gsl_vector_float_minmax) :void
  (v :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_vector_float_minmax)

(cffi:defcfun ("gsl_vector_float_max_index" gsl_vector_float_max_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_float_max_index)

(cffi:defcfun ("gsl_vector_float_min_index" gsl_vector_float_min_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_float_min_index)

(cffi:defcfun ("gsl_vector_float_minmax_index" gsl_vector_float_minmax_index) :void
  (v :pointer)
  (imin :pointer)
  (imax :pointer))

(cl:export 'gsl_vector_float_minmax_index)

(cffi:defcfun ("gsl_vector_float_add" gsl_vector_float_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_float_add)

(cffi:defcfun ("gsl_vector_float_sub" gsl_vector_float_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_float_sub)

(cffi:defcfun ("gsl_vector_float_mul" gsl_vector_float_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_float_mul)

(cffi:defcfun ("gsl_vector_float_div" gsl_vector_float_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_float_div)

(cffi:defcfun ("gsl_vector_float_scale" gsl_vector_float_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_float_scale)

(cffi:defcfun ("gsl_vector_float_add_constant" gsl_vector_float_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_float_add_constant)

(cffi:defcfun ("gsl_vector_float_equal" gsl_vector_float_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_float_equal)

(cffi:defcfun ("gsl_vector_float_isnull" gsl_vector_float_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_float_isnull)

(cffi:defcfun ("gsl_vector_float_ispos" gsl_vector_float_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_float_ispos)

(cffi:defcfun ("gsl_vector_float_isneg" gsl_vector_float_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_float_isneg)

(cffi:defcfun ("gsl_vector_float_isnonneg" gsl_vector_float_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_float_isnonneg)

(cffi:defcfun ("gsl_vector_float_get" gsl_vector_float_get) :float
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_float_get)

(cffi:defcfun ("gsl_vector_float_set" gsl_vector_float_set) :void
  (v :pointer)
  (i :pointer)
  (x :float))

(cl:export 'gsl_vector_float_set)

(cffi:defcfun ("gsl_vector_float_ptr" gsl_vector_float_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_float_ptr)

(cffi:defcfun ("gsl_vector_float_const_ptr" gsl_vector_float_const_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_float_const_ptr)

(cffi:defcstruct gsl_vector_int
	(size :pointer)
	(stride :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector_int)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_int_view
	(vector gsl_vector_int))

(cl:export '_gsl_vector_int_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_int_const_view
	(vector gsl_vector_int))

(cl:export '_gsl_vector_int_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_int_alloc" gsl_vector_int_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_int_alloc)

(cffi:defcfun ("gsl_vector_int_calloc" gsl_vector_int_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_int_calloc)

(cffi:defcfun ("gsl_vector_int_alloc_from_block" gsl_vector_int_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_int_alloc_from_block)

(cffi:defcfun ("gsl_vector_int_alloc_from_vector" gsl_vector_int_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_int_alloc_from_vector)

(cffi:defcfun ("gsl_vector_int_free" gsl_vector_int_free) :void
  (v :pointer))

(cl:export 'gsl_vector_int_free)

(cffi:defcfun ("gsl_vector_int_view_array" gsl_vector_int_view_array) _gsl_vector_int_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_int_view_array)

(cffi:defcfun ("gsl_vector_int_view_array_with_stride" gsl_vector_int_view_array_with_stride) _gsl_vector_int_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_int_view_array_with_stride)

(cffi:defcfun ("gsl_vector_int_const_view_array" gsl_vector_int_const_view_array) _gsl_vector_int_const_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_int_const_view_array)

(cffi:defcfun ("gsl_vector_int_const_view_array_with_stride" gsl_vector_int_const_view_array_with_stride) _gsl_vector_int_const_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_int_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_int_subvector" gsl_vector_int_subvector) _gsl_vector_int_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_int_subvector)

(cffi:defcfun ("gsl_vector_int_subvector_with_stride" gsl_vector_int_subvector_with_stride) _gsl_vector_int_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_int_subvector_with_stride)

(cffi:defcfun ("gsl_vector_int_const_subvector" gsl_vector_int_const_subvector) _gsl_vector_int_const_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_int_const_subvector)

(cffi:defcfun ("gsl_vector_int_const_subvector_with_stride" gsl_vector_int_const_subvector_with_stride) _gsl_vector_int_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_int_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_int_set_zero" gsl_vector_int_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_int_set_zero)

(cffi:defcfun ("gsl_vector_int_set_all" gsl_vector_int_set_all) :void
  (v :pointer)
  (x :int))

(cl:export 'gsl_vector_int_set_all)

(cffi:defcfun ("gsl_vector_int_set_basis" gsl_vector_int_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_int_set_basis)

(cffi:defcfun ("gsl_vector_int_fread" gsl_vector_int_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_int_fread)

(cffi:defcfun ("gsl_vector_int_fwrite" gsl_vector_int_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_int_fwrite)

(cffi:defcfun ("gsl_vector_int_fscanf" gsl_vector_int_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_int_fscanf)

(cffi:defcfun ("gsl_vector_int_fprintf" gsl_vector_int_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_int_fprintf)

(cffi:defcfun ("gsl_vector_int_memcpy" gsl_vector_int_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_int_memcpy)

(cffi:defcfun ("gsl_vector_int_reverse" gsl_vector_int_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_int_reverse)

(cffi:defcfun ("gsl_vector_int_swap" gsl_vector_int_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_int_swap)

(cffi:defcfun ("gsl_vector_int_swap_elements" gsl_vector_int_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_int_swap_elements)

(cffi:defcfun ("gsl_vector_int_max" gsl_vector_int_max) :int
  (v :pointer))

(cl:export 'gsl_vector_int_max)

(cffi:defcfun ("gsl_vector_int_min" gsl_vector_int_min) :int
  (v :pointer))

(cl:export 'gsl_vector_int_min)

(cffi:defcfun ("gsl_vector_int_minmax" gsl_vector_int_minmax) :void
  (v :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_vector_int_minmax)

(cffi:defcfun ("gsl_vector_int_max_index" gsl_vector_int_max_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_int_max_index)

(cffi:defcfun ("gsl_vector_int_min_index" gsl_vector_int_min_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_int_min_index)

(cffi:defcfun ("gsl_vector_int_minmax_index" gsl_vector_int_minmax_index) :void
  (v :pointer)
  (imin :pointer)
  (imax :pointer))

(cl:export 'gsl_vector_int_minmax_index)

(cffi:defcfun ("gsl_vector_int_add" gsl_vector_int_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_int_add)

(cffi:defcfun ("gsl_vector_int_sub" gsl_vector_int_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_int_sub)

(cffi:defcfun ("gsl_vector_int_mul" gsl_vector_int_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_int_mul)

(cffi:defcfun ("gsl_vector_int_div" gsl_vector_int_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_int_div)

(cffi:defcfun ("gsl_vector_int_scale" gsl_vector_int_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_int_scale)

(cffi:defcfun ("gsl_vector_int_add_constant" gsl_vector_int_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_int_add_constant)

(cffi:defcfun ("gsl_vector_int_equal" gsl_vector_int_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_int_equal)

(cffi:defcfun ("gsl_vector_int_isnull" gsl_vector_int_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_int_isnull)

(cffi:defcfun ("gsl_vector_int_ispos" gsl_vector_int_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_int_ispos)

(cffi:defcfun ("gsl_vector_int_isneg" gsl_vector_int_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_int_isneg)

(cffi:defcfun ("gsl_vector_int_isnonneg" gsl_vector_int_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_int_isnonneg)

(cffi:defcfun ("gsl_vector_int_get" gsl_vector_int_get) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_int_get)

(cffi:defcfun ("gsl_vector_int_set" gsl_vector_int_set) :void
  (v :pointer)
  (i :pointer)
  (x :int))

(cl:export 'gsl_vector_int_set)

(cffi:defcfun ("gsl_vector_int_ptr" gsl_vector_int_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_int_ptr)

(cffi:defcfun ("gsl_vector_int_const_ptr" gsl_vector_int_const_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_int_const_ptr)

(cffi:defcstruct gsl_vector_long
	(size :pointer)
	(stride :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector_long)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_long_view
	(vector gsl_vector_long))

(cl:export '_gsl_vector_long_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_long_const_view
	(vector gsl_vector_long))

(cl:export '_gsl_vector_long_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_long_alloc" gsl_vector_long_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_long_alloc)

(cffi:defcfun ("gsl_vector_long_calloc" gsl_vector_long_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_long_calloc)

(cffi:defcfun ("gsl_vector_long_alloc_from_block" gsl_vector_long_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_long_alloc_from_block)

(cffi:defcfun ("gsl_vector_long_alloc_from_vector" gsl_vector_long_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_long_alloc_from_vector)

(cffi:defcfun ("gsl_vector_long_free" gsl_vector_long_free) :void
  (v :pointer))

(cl:export 'gsl_vector_long_free)

(cffi:defcfun ("gsl_vector_long_view_array" gsl_vector_long_view_array) _gsl_vector_long_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_view_array)

(cffi:defcfun ("gsl_vector_long_view_array_with_stride" gsl_vector_long_view_array_with_stride) _gsl_vector_long_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_view_array_with_stride)

(cffi:defcfun ("gsl_vector_long_const_view_array" gsl_vector_long_const_view_array) _gsl_vector_long_const_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_const_view_array)

(cffi:defcfun ("gsl_vector_long_const_view_array_with_stride" gsl_vector_long_const_view_array_with_stride) _gsl_vector_long_const_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_long_subvector" gsl_vector_long_subvector) _gsl_vector_long_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_subvector)

(cffi:defcfun ("gsl_vector_long_subvector_with_stride" gsl_vector_long_subvector_with_stride) _gsl_vector_long_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_subvector_with_stride)

(cffi:defcfun ("gsl_vector_long_const_subvector" gsl_vector_long_const_subvector) _gsl_vector_long_const_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_const_subvector)

(cffi:defcfun ("gsl_vector_long_const_subvector_with_stride" gsl_vector_long_const_subvector_with_stride) _gsl_vector_long_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_long_set_zero" gsl_vector_long_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_long_set_zero)

(cffi:defcfun ("gsl_vector_long_set_all" gsl_vector_long_set_all) :void
  (v :pointer)
  (x :long))

(cl:export 'gsl_vector_long_set_all)

(cffi:defcfun ("gsl_vector_long_set_basis" gsl_vector_long_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_long_set_basis)

(cffi:defcfun ("gsl_vector_long_fread" gsl_vector_long_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_long_fread)

(cffi:defcfun ("gsl_vector_long_fwrite" gsl_vector_long_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_long_fwrite)

(cffi:defcfun ("gsl_vector_long_fscanf" gsl_vector_long_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_long_fscanf)

(cffi:defcfun ("gsl_vector_long_fprintf" gsl_vector_long_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_long_fprintf)

(cffi:defcfun ("gsl_vector_long_memcpy" gsl_vector_long_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_long_memcpy)

(cffi:defcfun ("gsl_vector_long_reverse" gsl_vector_long_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_long_reverse)

(cffi:defcfun ("gsl_vector_long_swap" gsl_vector_long_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_long_swap)

(cffi:defcfun ("gsl_vector_long_swap_elements" gsl_vector_long_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_long_swap_elements)

(cffi:defcfun ("gsl_vector_long_max" gsl_vector_long_max) :long
  (v :pointer))

(cl:export 'gsl_vector_long_max)

(cffi:defcfun ("gsl_vector_long_min" gsl_vector_long_min) :long
  (v :pointer))

(cl:export 'gsl_vector_long_min)

(cffi:defcfun ("gsl_vector_long_minmax" gsl_vector_long_minmax) :void
  (v :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_vector_long_minmax)

(cffi:defcfun ("gsl_vector_long_max_index" gsl_vector_long_max_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_long_max_index)

(cffi:defcfun ("gsl_vector_long_min_index" gsl_vector_long_min_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_long_min_index)

(cffi:defcfun ("gsl_vector_long_minmax_index" gsl_vector_long_minmax_index) :void
  (v :pointer)
  (imin :pointer)
  (imax :pointer))

(cl:export 'gsl_vector_long_minmax_index)

(cffi:defcfun ("gsl_vector_long_add" gsl_vector_long_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_long_add)

(cffi:defcfun ("gsl_vector_long_sub" gsl_vector_long_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_long_sub)

(cffi:defcfun ("gsl_vector_long_mul" gsl_vector_long_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_long_mul)

(cffi:defcfun ("gsl_vector_long_div" gsl_vector_long_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_long_div)

(cffi:defcfun ("gsl_vector_long_scale" gsl_vector_long_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_long_scale)

(cffi:defcfun ("gsl_vector_long_add_constant" gsl_vector_long_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_long_add_constant)

(cffi:defcfun ("gsl_vector_long_equal" gsl_vector_long_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_long_equal)

(cffi:defcfun ("gsl_vector_long_isnull" gsl_vector_long_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_long_isnull)

(cffi:defcfun ("gsl_vector_long_ispos" gsl_vector_long_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_long_ispos)

(cffi:defcfun ("gsl_vector_long_isneg" gsl_vector_long_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_long_isneg)

(cffi:defcfun ("gsl_vector_long_isnonneg" gsl_vector_long_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_long_isnonneg)

(cffi:defcfun ("gsl_vector_long_get" gsl_vector_long_get) :long
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_long_get)

(cffi:defcfun ("gsl_vector_long_set" gsl_vector_long_set) :void
  (v :pointer)
  (i :pointer)
  (x :long))

(cl:export 'gsl_vector_long_set)

(cffi:defcfun ("gsl_vector_long_ptr" gsl_vector_long_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_long_ptr)

(cffi:defcfun ("gsl_vector_long_const_ptr" gsl_vector_long_const_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_long_const_ptr)

(cffi:defcstruct gsl_vector_long_double
	(size :pointer)
	(stride :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector_long_double)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_long_double_view
	(vector gsl_vector_long_double))

(cl:export '_gsl_vector_long_double_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_long_double_const_view
	(vector gsl_vector_long_double))

(cl:export '_gsl_vector_long_double_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_long_double_alloc" gsl_vector_long_double_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_long_double_alloc)

(cffi:defcfun ("gsl_vector_long_double_calloc" gsl_vector_long_double_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_long_double_calloc)

(cffi:defcfun ("gsl_vector_long_double_alloc_from_block" gsl_vector_long_double_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_long_double_alloc_from_block)

(cffi:defcfun ("gsl_vector_long_double_alloc_from_vector" gsl_vector_long_double_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_long_double_alloc_from_vector)

(cffi:defcfun ("gsl_vector_long_double_free" gsl_vector_long_double_free) :void
  (v :pointer))

(cl:export 'gsl_vector_long_double_free)

(cffi:defcfun ("gsl_vector_long_double_view_array" gsl_vector_long_double_view_array) _gsl_vector_long_double_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_double_view_array)

(cffi:defcfun ("gsl_vector_long_double_view_array_with_stride" gsl_vector_long_double_view_array_with_stride) _gsl_vector_long_double_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_double_view_array_with_stride)

(cffi:defcfun ("gsl_vector_long_double_const_view_array" gsl_vector_long_double_const_view_array) _gsl_vector_long_double_const_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_double_const_view_array)

(cffi:defcfun ("gsl_vector_long_double_const_view_array_with_stride" gsl_vector_long_double_const_view_array_with_stride) _gsl_vector_long_double_const_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_double_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_long_double_subvector" gsl_vector_long_double_subvector) _gsl_vector_long_double_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_double_subvector)

(cffi:defcfun ("gsl_vector_long_double_subvector_with_stride" gsl_vector_long_double_subvector_with_stride) _gsl_vector_long_double_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_double_subvector_with_stride)

(cffi:defcfun ("gsl_vector_long_double_const_subvector" gsl_vector_long_double_const_subvector) _gsl_vector_long_double_const_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_double_const_subvector)

(cffi:defcfun ("gsl_vector_long_double_const_subvector_with_stride" gsl_vector_long_double_const_subvector_with_stride) _gsl_vector_long_double_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_long_double_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_long_double_set_zero" gsl_vector_long_double_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_long_double_set_zero)

(cffi:defcfun ("gsl_vector_long_double_set_all" gsl_vector_long_double_set_all) :void
  (v :pointer)
  (x :pointer))

(cl:export 'gsl_vector_long_double_set_all)

(cffi:defcfun ("gsl_vector_long_double_set_basis" gsl_vector_long_double_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_long_double_set_basis)

(cffi:defcfun ("gsl_vector_long_double_fread" gsl_vector_long_double_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_long_double_fread)

(cffi:defcfun ("gsl_vector_long_double_fwrite" gsl_vector_long_double_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_long_double_fwrite)

(cffi:defcfun ("gsl_vector_long_double_fscanf" gsl_vector_long_double_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_long_double_fscanf)

(cffi:defcfun ("gsl_vector_long_double_fprintf" gsl_vector_long_double_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_long_double_fprintf)

(cffi:defcfun ("gsl_vector_long_double_memcpy" gsl_vector_long_double_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_long_double_memcpy)

(cffi:defcfun ("gsl_vector_long_double_reverse" gsl_vector_long_double_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_long_double_reverse)

(cffi:defcfun ("gsl_vector_long_double_swap" gsl_vector_long_double_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_long_double_swap)

(cffi:defcfun ("gsl_vector_long_double_swap_elements" gsl_vector_long_double_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_long_double_swap_elements)

(cffi:defcfun ("gsl_vector_long_double_max" gsl_vector_long_double_max) :pointer
  (v :pointer))

(cl:export 'gsl_vector_long_double_max)

(cffi:defcfun ("gsl_vector_long_double_min" gsl_vector_long_double_min) :pointer
  (v :pointer))

(cl:export 'gsl_vector_long_double_min)

(cffi:defcfun ("gsl_vector_long_double_minmax" gsl_vector_long_double_minmax) :void
  (v :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_vector_long_double_minmax)

(cffi:defcfun ("gsl_vector_long_double_max_index" gsl_vector_long_double_max_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_long_double_max_index)

(cffi:defcfun ("gsl_vector_long_double_min_index" gsl_vector_long_double_min_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_long_double_min_index)

(cffi:defcfun ("gsl_vector_long_double_minmax_index" gsl_vector_long_double_minmax_index) :void
  (v :pointer)
  (imin :pointer)
  (imax :pointer))

(cl:export 'gsl_vector_long_double_minmax_index)

(cffi:defcfun ("gsl_vector_long_double_add" gsl_vector_long_double_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_long_double_add)

(cffi:defcfun ("gsl_vector_long_double_sub" gsl_vector_long_double_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_long_double_sub)

(cffi:defcfun ("gsl_vector_long_double_mul" gsl_vector_long_double_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_long_double_mul)

(cffi:defcfun ("gsl_vector_long_double_div" gsl_vector_long_double_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_long_double_div)

(cffi:defcfun ("gsl_vector_long_double_scale" gsl_vector_long_double_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_long_double_scale)

(cffi:defcfun ("gsl_vector_long_double_add_constant" gsl_vector_long_double_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_long_double_add_constant)

(cffi:defcfun ("gsl_vector_long_double_equal" gsl_vector_long_double_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_long_double_equal)

(cffi:defcfun ("gsl_vector_long_double_isnull" gsl_vector_long_double_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_long_double_isnull)

(cffi:defcfun ("gsl_vector_long_double_ispos" gsl_vector_long_double_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_long_double_ispos)

(cffi:defcfun ("gsl_vector_long_double_isneg" gsl_vector_long_double_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_long_double_isneg)

(cffi:defcfun ("gsl_vector_long_double_isnonneg" gsl_vector_long_double_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_long_double_isnonneg)

(cffi:defcfun ("gsl_vector_long_double_get" gsl_vector_long_double_get) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_long_double_get)

(cffi:defcfun ("gsl_vector_long_double_set" gsl_vector_long_double_set) :void
  (v :pointer)
  (i :pointer)
  (x :pointer))

(cl:export 'gsl_vector_long_double_set)

(cffi:defcfun ("gsl_vector_long_double_ptr" gsl_vector_long_double_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_long_double_ptr)

(cffi:defcfun ("gsl_vector_long_double_const_ptr" gsl_vector_long_double_const_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_long_double_const_ptr)

(cffi:defcstruct gsl_vector_short
	(size :pointer)
	(stride :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector_short)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_short_view
	(vector gsl_vector_short))

(cl:export '_gsl_vector_short_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_short_const_view
	(vector gsl_vector_short))

(cl:export '_gsl_vector_short_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_short_alloc" gsl_vector_short_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_short_alloc)

(cffi:defcfun ("gsl_vector_short_calloc" gsl_vector_short_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_short_calloc)

(cffi:defcfun ("gsl_vector_short_alloc_from_block" gsl_vector_short_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_short_alloc_from_block)

(cffi:defcfun ("gsl_vector_short_alloc_from_vector" gsl_vector_short_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_short_alloc_from_vector)

(cffi:defcfun ("gsl_vector_short_free" gsl_vector_short_free) :void
  (v :pointer))

(cl:export 'gsl_vector_short_free)

(cffi:defcfun ("gsl_vector_short_view_array" gsl_vector_short_view_array) _gsl_vector_short_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_short_view_array)

(cffi:defcfun ("gsl_vector_short_view_array_with_stride" gsl_vector_short_view_array_with_stride) _gsl_vector_short_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_short_view_array_with_stride)

(cffi:defcfun ("gsl_vector_short_const_view_array" gsl_vector_short_const_view_array) _gsl_vector_short_const_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_short_const_view_array)

(cffi:defcfun ("gsl_vector_short_const_view_array_with_stride" gsl_vector_short_const_view_array_with_stride) _gsl_vector_short_const_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_short_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_short_subvector" gsl_vector_short_subvector) _gsl_vector_short_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_short_subvector)

(cffi:defcfun ("gsl_vector_short_subvector_with_stride" gsl_vector_short_subvector_with_stride) _gsl_vector_short_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_short_subvector_with_stride)

(cffi:defcfun ("gsl_vector_short_const_subvector" gsl_vector_short_const_subvector) _gsl_vector_short_const_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_short_const_subvector)

(cffi:defcfun ("gsl_vector_short_const_subvector_with_stride" gsl_vector_short_const_subvector_with_stride) _gsl_vector_short_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_short_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_short_set_zero" gsl_vector_short_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_short_set_zero)

(cffi:defcfun ("gsl_vector_short_set_all" gsl_vector_short_set_all) :void
  (v :pointer)
  (x :short))

(cl:export 'gsl_vector_short_set_all)

(cffi:defcfun ("gsl_vector_short_set_basis" gsl_vector_short_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_short_set_basis)

(cffi:defcfun ("gsl_vector_short_fread" gsl_vector_short_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_short_fread)

(cffi:defcfun ("gsl_vector_short_fwrite" gsl_vector_short_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_short_fwrite)

(cffi:defcfun ("gsl_vector_short_fscanf" gsl_vector_short_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_short_fscanf)

(cffi:defcfun ("gsl_vector_short_fprintf" gsl_vector_short_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_short_fprintf)

(cffi:defcfun ("gsl_vector_short_memcpy" gsl_vector_short_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_short_memcpy)

(cffi:defcfun ("gsl_vector_short_reverse" gsl_vector_short_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_short_reverse)

(cffi:defcfun ("gsl_vector_short_swap" gsl_vector_short_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_short_swap)

(cffi:defcfun ("gsl_vector_short_swap_elements" gsl_vector_short_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_short_swap_elements)

(cffi:defcfun ("gsl_vector_short_max" gsl_vector_short_max) :short
  (v :pointer))

(cl:export 'gsl_vector_short_max)

(cffi:defcfun ("gsl_vector_short_min" gsl_vector_short_min) :short
  (v :pointer))

(cl:export 'gsl_vector_short_min)

(cffi:defcfun ("gsl_vector_short_minmax" gsl_vector_short_minmax) :void
  (v :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_vector_short_minmax)

(cffi:defcfun ("gsl_vector_short_max_index" gsl_vector_short_max_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_short_max_index)

(cffi:defcfun ("gsl_vector_short_min_index" gsl_vector_short_min_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_short_min_index)

(cffi:defcfun ("gsl_vector_short_minmax_index" gsl_vector_short_minmax_index) :void
  (v :pointer)
  (imin :pointer)
  (imax :pointer))

(cl:export 'gsl_vector_short_minmax_index)

(cffi:defcfun ("gsl_vector_short_add" gsl_vector_short_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_short_add)

(cffi:defcfun ("gsl_vector_short_sub" gsl_vector_short_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_short_sub)

(cffi:defcfun ("gsl_vector_short_mul" gsl_vector_short_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_short_mul)

(cffi:defcfun ("gsl_vector_short_div" gsl_vector_short_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_short_div)

(cffi:defcfun ("gsl_vector_short_scale" gsl_vector_short_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_short_scale)

(cffi:defcfun ("gsl_vector_short_add_constant" gsl_vector_short_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_short_add_constant)

(cffi:defcfun ("gsl_vector_short_equal" gsl_vector_short_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_short_equal)

(cffi:defcfun ("gsl_vector_short_isnull" gsl_vector_short_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_short_isnull)

(cffi:defcfun ("gsl_vector_short_ispos" gsl_vector_short_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_short_ispos)

(cffi:defcfun ("gsl_vector_short_isneg" gsl_vector_short_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_short_isneg)

(cffi:defcfun ("gsl_vector_short_isnonneg" gsl_vector_short_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_short_isnonneg)

(cffi:defcfun ("gsl_vector_short_get" gsl_vector_short_get) :short
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_short_get)

(cffi:defcfun ("gsl_vector_short_set" gsl_vector_short_set) :void
  (v :pointer)
  (i :pointer)
  (x :short))

(cl:export 'gsl_vector_short_set)

(cffi:defcfun ("gsl_vector_short_ptr" gsl_vector_short_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_short_ptr)

(cffi:defcfun ("gsl_vector_short_const_ptr" gsl_vector_short_const_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_short_const_ptr)

(cffi:defcstruct gsl_vector_uchar
	(size :pointer)
	(stride :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector_uchar)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_uchar_view
	(vector gsl_vector_uchar))

(cl:export '_gsl_vector_uchar_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_uchar_const_view
	(vector gsl_vector_uchar))

(cl:export '_gsl_vector_uchar_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_uchar_alloc" gsl_vector_uchar_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_uchar_alloc)

(cffi:defcfun ("gsl_vector_uchar_calloc" gsl_vector_uchar_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_uchar_calloc)

(cffi:defcfun ("gsl_vector_uchar_alloc_from_block" gsl_vector_uchar_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_uchar_alloc_from_block)

(cffi:defcfun ("gsl_vector_uchar_alloc_from_vector" gsl_vector_uchar_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_uchar_alloc_from_vector)

(cffi:defcfun ("gsl_vector_uchar_free" gsl_vector_uchar_free) :void
  (v :pointer))

(cl:export 'gsl_vector_uchar_free)

(cffi:defcfun ("gsl_vector_uchar_view_array" gsl_vector_uchar_view_array) _gsl_vector_uchar_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uchar_view_array)

(cffi:defcfun ("gsl_vector_uchar_view_array_with_stride" gsl_vector_uchar_view_array_with_stride) _gsl_vector_uchar_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uchar_view_array_with_stride)

(cffi:defcfun ("gsl_vector_uchar_const_view_array" gsl_vector_uchar_const_view_array) _gsl_vector_uchar_const_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uchar_const_view_array)

(cffi:defcfun ("gsl_vector_uchar_const_view_array_with_stride" gsl_vector_uchar_const_view_array_with_stride) _gsl_vector_uchar_const_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uchar_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_uchar_subvector" gsl_vector_uchar_subvector) _gsl_vector_uchar_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uchar_subvector)

(cffi:defcfun ("gsl_vector_uchar_subvector_with_stride" gsl_vector_uchar_subvector_with_stride) _gsl_vector_uchar_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uchar_subvector_with_stride)

(cffi:defcfun ("gsl_vector_uchar_const_subvector" gsl_vector_uchar_const_subvector) _gsl_vector_uchar_const_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uchar_const_subvector)

(cffi:defcfun ("gsl_vector_uchar_const_subvector_with_stride" gsl_vector_uchar_const_subvector_with_stride) _gsl_vector_uchar_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uchar_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_uchar_set_zero" gsl_vector_uchar_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_uchar_set_zero)

(cffi:defcfun ("gsl_vector_uchar_set_all" gsl_vector_uchar_set_all) :void
  (v :pointer)
  (x :unsigned-char))

(cl:export 'gsl_vector_uchar_set_all)

(cffi:defcfun ("gsl_vector_uchar_set_basis" gsl_vector_uchar_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_uchar_set_basis)

(cffi:defcfun ("gsl_vector_uchar_fread" gsl_vector_uchar_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_uchar_fread)

(cffi:defcfun ("gsl_vector_uchar_fwrite" gsl_vector_uchar_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_uchar_fwrite)

(cffi:defcfun ("gsl_vector_uchar_fscanf" gsl_vector_uchar_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_uchar_fscanf)

(cffi:defcfun ("gsl_vector_uchar_fprintf" gsl_vector_uchar_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_uchar_fprintf)

(cffi:defcfun ("gsl_vector_uchar_memcpy" gsl_vector_uchar_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_uchar_memcpy)

(cffi:defcfun ("gsl_vector_uchar_reverse" gsl_vector_uchar_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_uchar_reverse)

(cffi:defcfun ("gsl_vector_uchar_swap" gsl_vector_uchar_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_uchar_swap)

(cffi:defcfun ("gsl_vector_uchar_swap_elements" gsl_vector_uchar_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_uchar_swap_elements)

(cffi:defcfun ("gsl_vector_uchar_max" gsl_vector_uchar_max) :unsigned-char
  (v :pointer))

(cl:export 'gsl_vector_uchar_max)

(cffi:defcfun ("gsl_vector_uchar_min" gsl_vector_uchar_min) :unsigned-char
  (v :pointer))

(cl:export 'gsl_vector_uchar_min)

(cffi:defcfun ("gsl_vector_uchar_minmax" gsl_vector_uchar_minmax) :void
  (v :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_vector_uchar_minmax)

(cffi:defcfun ("gsl_vector_uchar_max_index" gsl_vector_uchar_max_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_uchar_max_index)

(cffi:defcfun ("gsl_vector_uchar_min_index" gsl_vector_uchar_min_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_uchar_min_index)

(cffi:defcfun ("gsl_vector_uchar_minmax_index" gsl_vector_uchar_minmax_index) :void
  (v :pointer)
  (imin :pointer)
  (imax :pointer))

(cl:export 'gsl_vector_uchar_minmax_index)

(cffi:defcfun ("gsl_vector_uchar_add" gsl_vector_uchar_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_uchar_add)

(cffi:defcfun ("gsl_vector_uchar_sub" gsl_vector_uchar_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_uchar_sub)

(cffi:defcfun ("gsl_vector_uchar_mul" gsl_vector_uchar_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_uchar_mul)

(cffi:defcfun ("gsl_vector_uchar_div" gsl_vector_uchar_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_uchar_div)

(cffi:defcfun ("gsl_vector_uchar_scale" gsl_vector_uchar_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_uchar_scale)

(cffi:defcfun ("gsl_vector_uchar_add_constant" gsl_vector_uchar_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_uchar_add_constant)

(cffi:defcfun ("gsl_vector_uchar_equal" gsl_vector_uchar_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_uchar_equal)

(cffi:defcfun ("gsl_vector_uchar_isnull" gsl_vector_uchar_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_uchar_isnull)

(cffi:defcfun ("gsl_vector_uchar_ispos" gsl_vector_uchar_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_uchar_ispos)

(cffi:defcfun ("gsl_vector_uchar_isneg" gsl_vector_uchar_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_uchar_isneg)

(cffi:defcfun ("gsl_vector_uchar_isnonneg" gsl_vector_uchar_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_uchar_isnonneg)

(cffi:defcfun ("gsl_vector_uchar_get" gsl_vector_uchar_get) :unsigned-char
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_uchar_get)

(cffi:defcfun ("gsl_vector_uchar_set" gsl_vector_uchar_set) :void
  (v :pointer)
  (i :pointer)
  (x :unsigned-char))

(cl:export 'gsl_vector_uchar_set)

(cffi:defcfun ("gsl_vector_uchar_ptr" gsl_vector_uchar_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_uchar_ptr)

(cffi:defcfun ("gsl_vector_uchar_const_ptr" gsl_vector_uchar_const_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_uchar_const_ptr)

(cffi:defcstruct gsl_vector_uint
	(size :pointer)
	(stride :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector_uint)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_uint_view
	(vector gsl_vector_uint))

(cl:export '_gsl_vector_uint_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_uint_const_view
	(vector gsl_vector_uint))

(cl:export '_gsl_vector_uint_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_uint_alloc" gsl_vector_uint_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_uint_alloc)

(cffi:defcfun ("gsl_vector_uint_calloc" gsl_vector_uint_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_uint_calloc)

(cffi:defcfun ("gsl_vector_uint_alloc_from_block" gsl_vector_uint_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_uint_alloc_from_block)

(cffi:defcfun ("gsl_vector_uint_alloc_from_vector" gsl_vector_uint_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_uint_alloc_from_vector)

(cffi:defcfun ("gsl_vector_uint_free" gsl_vector_uint_free) :void
  (v :pointer))

(cl:export 'gsl_vector_uint_free)

(cffi:defcfun ("gsl_vector_uint_view_array" gsl_vector_uint_view_array) _gsl_vector_uint_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uint_view_array)

(cffi:defcfun ("gsl_vector_uint_view_array_with_stride" gsl_vector_uint_view_array_with_stride) _gsl_vector_uint_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uint_view_array_with_stride)

(cffi:defcfun ("gsl_vector_uint_const_view_array" gsl_vector_uint_const_view_array) _gsl_vector_uint_const_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uint_const_view_array)

(cffi:defcfun ("gsl_vector_uint_const_view_array_with_stride" gsl_vector_uint_const_view_array_with_stride) _gsl_vector_uint_const_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uint_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_uint_subvector" gsl_vector_uint_subvector) _gsl_vector_uint_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uint_subvector)

(cffi:defcfun ("gsl_vector_uint_subvector_with_stride" gsl_vector_uint_subvector_with_stride) _gsl_vector_uint_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uint_subvector_with_stride)

(cffi:defcfun ("gsl_vector_uint_const_subvector" gsl_vector_uint_const_subvector) _gsl_vector_uint_const_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uint_const_subvector)

(cffi:defcfun ("gsl_vector_uint_const_subvector_with_stride" gsl_vector_uint_const_subvector_with_stride) _gsl_vector_uint_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_uint_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_uint_set_zero" gsl_vector_uint_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_uint_set_zero)

(cffi:defcfun ("gsl_vector_uint_set_all" gsl_vector_uint_set_all) :void
  (v :pointer)
  (x :unsigned-int))

(cl:export 'gsl_vector_uint_set_all)

(cffi:defcfun ("gsl_vector_uint_set_basis" gsl_vector_uint_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_uint_set_basis)

(cffi:defcfun ("gsl_vector_uint_fread" gsl_vector_uint_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_uint_fread)

(cffi:defcfun ("gsl_vector_uint_fwrite" gsl_vector_uint_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_uint_fwrite)

(cffi:defcfun ("gsl_vector_uint_fscanf" gsl_vector_uint_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_uint_fscanf)

(cffi:defcfun ("gsl_vector_uint_fprintf" gsl_vector_uint_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_uint_fprintf)

(cffi:defcfun ("gsl_vector_uint_memcpy" gsl_vector_uint_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_uint_memcpy)

(cffi:defcfun ("gsl_vector_uint_reverse" gsl_vector_uint_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_uint_reverse)

(cffi:defcfun ("gsl_vector_uint_swap" gsl_vector_uint_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_uint_swap)

(cffi:defcfun ("gsl_vector_uint_swap_elements" gsl_vector_uint_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_uint_swap_elements)

(cffi:defcfun ("gsl_vector_uint_max" gsl_vector_uint_max) :unsigned-int
  (v :pointer))

(cl:export 'gsl_vector_uint_max)

(cffi:defcfun ("gsl_vector_uint_min" gsl_vector_uint_min) :unsigned-int
  (v :pointer))

(cl:export 'gsl_vector_uint_min)

(cffi:defcfun ("gsl_vector_uint_minmax" gsl_vector_uint_minmax) :void
  (v :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_vector_uint_minmax)

(cffi:defcfun ("gsl_vector_uint_max_index" gsl_vector_uint_max_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_uint_max_index)

(cffi:defcfun ("gsl_vector_uint_min_index" gsl_vector_uint_min_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_uint_min_index)

(cffi:defcfun ("gsl_vector_uint_minmax_index" gsl_vector_uint_minmax_index) :void
  (v :pointer)
  (imin :pointer)
  (imax :pointer))

(cl:export 'gsl_vector_uint_minmax_index)

(cffi:defcfun ("gsl_vector_uint_add" gsl_vector_uint_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_uint_add)

(cffi:defcfun ("gsl_vector_uint_sub" gsl_vector_uint_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_uint_sub)

(cffi:defcfun ("gsl_vector_uint_mul" gsl_vector_uint_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_uint_mul)

(cffi:defcfun ("gsl_vector_uint_div" gsl_vector_uint_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_uint_div)

(cffi:defcfun ("gsl_vector_uint_scale" gsl_vector_uint_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_uint_scale)

(cffi:defcfun ("gsl_vector_uint_add_constant" gsl_vector_uint_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_uint_add_constant)

(cffi:defcfun ("gsl_vector_uint_equal" gsl_vector_uint_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_uint_equal)

(cffi:defcfun ("gsl_vector_uint_isnull" gsl_vector_uint_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_uint_isnull)

(cffi:defcfun ("gsl_vector_uint_ispos" gsl_vector_uint_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_uint_ispos)

(cffi:defcfun ("gsl_vector_uint_isneg" gsl_vector_uint_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_uint_isneg)

(cffi:defcfun ("gsl_vector_uint_isnonneg" gsl_vector_uint_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_uint_isnonneg)

(cffi:defcfun ("gsl_vector_uint_get" gsl_vector_uint_get) :unsigned-int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_uint_get)

(cffi:defcfun ("gsl_vector_uint_set" gsl_vector_uint_set) :void
  (v :pointer)
  (i :pointer)
  (x :unsigned-int))

(cl:export 'gsl_vector_uint_set)

(cffi:defcfun ("gsl_vector_uint_ptr" gsl_vector_uint_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_uint_ptr)

(cffi:defcfun ("gsl_vector_uint_const_ptr" gsl_vector_uint_const_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_uint_const_ptr)

(cffi:defcstruct gsl_vector_ulong
	(size :pointer)
	(stride :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector_ulong)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_ulong_view
	(vector gsl_vector_ulong))

(cl:export '_gsl_vector_ulong_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_ulong_const_view
	(vector gsl_vector_ulong))

(cl:export '_gsl_vector_ulong_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_ulong_alloc" gsl_vector_ulong_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_ulong_alloc)

(cffi:defcfun ("gsl_vector_ulong_calloc" gsl_vector_ulong_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_ulong_calloc)

(cffi:defcfun ("gsl_vector_ulong_alloc_from_block" gsl_vector_ulong_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_ulong_alloc_from_block)

(cffi:defcfun ("gsl_vector_ulong_alloc_from_vector" gsl_vector_ulong_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_ulong_alloc_from_vector)

(cffi:defcfun ("gsl_vector_ulong_free" gsl_vector_ulong_free) :void
  (v :pointer))

(cl:export 'gsl_vector_ulong_free)

(cffi:defcfun ("gsl_vector_ulong_view_array" gsl_vector_ulong_view_array) _gsl_vector_ulong_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ulong_view_array)

(cffi:defcfun ("gsl_vector_ulong_view_array_with_stride" gsl_vector_ulong_view_array_with_stride) _gsl_vector_ulong_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ulong_view_array_with_stride)

(cffi:defcfun ("gsl_vector_ulong_const_view_array" gsl_vector_ulong_const_view_array) _gsl_vector_ulong_const_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ulong_const_view_array)

(cffi:defcfun ("gsl_vector_ulong_const_view_array_with_stride" gsl_vector_ulong_const_view_array_with_stride) _gsl_vector_ulong_const_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ulong_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_ulong_subvector" gsl_vector_ulong_subvector) _gsl_vector_ulong_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ulong_subvector)

(cffi:defcfun ("gsl_vector_ulong_subvector_with_stride" gsl_vector_ulong_subvector_with_stride) _gsl_vector_ulong_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ulong_subvector_with_stride)

(cffi:defcfun ("gsl_vector_ulong_const_subvector" gsl_vector_ulong_const_subvector) _gsl_vector_ulong_const_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ulong_const_subvector)

(cffi:defcfun ("gsl_vector_ulong_const_subvector_with_stride" gsl_vector_ulong_const_subvector_with_stride) _gsl_vector_ulong_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ulong_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_ulong_set_zero" gsl_vector_ulong_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_ulong_set_zero)

(cffi:defcfun ("gsl_vector_ulong_set_all" gsl_vector_ulong_set_all) :void
  (v :pointer)
  (x :unsigned-long))

(cl:export 'gsl_vector_ulong_set_all)

(cffi:defcfun ("gsl_vector_ulong_set_basis" gsl_vector_ulong_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_ulong_set_basis)

(cffi:defcfun ("gsl_vector_ulong_fread" gsl_vector_ulong_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_ulong_fread)

(cffi:defcfun ("gsl_vector_ulong_fwrite" gsl_vector_ulong_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_ulong_fwrite)

(cffi:defcfun ("gsl_vector_ulong_fscanf" gsl_vector_ulong_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_ulong_fscanf)

(cffi:defcfun ("gsl_vector_ulong_fprintf" gsl_vector_ulong_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_ulong_fprintf)

(cffi:defcfun ("gsl_vector_ulong_memcpy" gsl_vector_ulong_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_ulong_memcpy)

(cffi:defcfun ("gsl_vector_ulong_reverse" gsl_vector_ulong_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_ulong_reverse)

(cffi:defcfun ("gsl_vector_ulong_swap" gsl_vector_ulong_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_ulong_swap)

(cffi:defcfun ("gsl_vector_ulong_swap_elements" gsl_vector_ulong_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_ulong_swap_elements)

(cffi:defcfun ("gsl_vector_ulong_max" gsl_vector_ulong_max) :unsigned-long
  (v :pointer))

(cl:export 'gsl_vector_ulong_max)

(cffi:defcfun ("gsl_vector_ulong_min" gsl_vector_ulong_min) :unsigned-long
  (v :pointer))

(cl:export 'gsl_vector_ulong_min)

(cffi:defcfun ("gsl_vector_ulong_minmax" gsl_vector_ulong_minmax) :void
  (v :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_vector_ulong_minmax)

(cffi:defcfun ("gsl_vector_ulong_max_index" gsl_vector_ulong_max_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_ulong_max_index)

(cffi:defcfun ("gsl_vector_ulong_min_index" gsl_vector_ulong_min_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_ulong_min_index)

(cffi:defcfun ("gsl_vector_ulong_minmax_index" gsl_vector_ulong_minmax_index) :void
  (v :pointer)
  (imin :pointer)
  (imax :pointer))

(cl:export 'gsl_vector_ulong_minmax_index)

(cffi:defcfun ("gsl_vector_ulong_add" gsl_vector_ulong_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_ulong_add)

(cffi:defcfun ("gsl_vector_ulong_sub" gsl_vector_ulong_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_ulong_sub)

(cffi:defcfun ("gsl_vector_ulong_mul" gsl_vector_ulong_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_ulong_mul)

(cffi:defcfun ("gsl_vector_ulong_div" gsl_vector_ulong_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_ulong_div)

(cffi:defcfun ("gsl_vector_ulong_scale" gsl_vector_ulong_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_ulong_scale)

(cffi:defcfun ("gsl_vector_ulong_add_constant" gsl_vector_ulong_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_ulong_add_constant)

(cffi:defcfun ("gsl_vector_ulong_equal" gsl_vector_ulong_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_ulong_equal)

(cffi:defcfun ("gsl_vector_ulong_isnull" gsl_vector_ulong_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_ulong_isnull)

(cffi:defcfun ("gsl_vector_ulong_ispos" gsl_vector_ulong_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_ulong_ispos)

(cffi:defcfun ("gsl_vector_ulong_isneg" gsl_vector_ulong_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_ulong_isneg)

(cffi:defcfun ("gsl_vector_ulong_isnonneg" gsl_vector_ulong_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_ulong_isnonneg)

(cffi:defcfun ("gsl_vector_ulong_get" gsl_vector_ulong_get) :unsigned-long
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_ulong_get)

(cffi:defcfun ("gsl_vector_ulong_set" gsl_vector_ulong_set) :void
  (v :pointer)
  (i :pointer)
  (x :unsigned-long))

(cl:export 'gsl_vector_ulong_set)

(cffi:defcfun ("gsl_vector_ulong_ptr" gsl_vector_ulong_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_ulong_ptr)

(cffi:defcfun ("gsl_vector_ulong_const_ptr" gsl_vector_ulong_const_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_ulong_const_ptr)

(cffi:defcstruct gsl_vector_ushort
	(size :pointer)
	(stride :pointer)
	(data :pointer)
	(block :pointer)
	(owner :int))

(cl:export 'gsl_vector_ushort)

(cl:export 'size)

(cl:export 'stride)

(cl:export 'data)

(cl:export 'block)

(cl:export 'owner)

(cffi:defcstruct _gsl_vector_ushort_view
	(vector gsl_vector_ushort))

(cl:export '_gsl_vector_ushort_view)

(cl:export 'vector)

(cffi:defcstruct _gsl_vector_ushort_const_view
	(vector gsl_vector_ushort))

(cl:export '_gsl_vector_ushort_const_view)

(cl:export 'vector)

(cffi:defcfun ("gsl_vector_ushort_alloc" gsl_vector_ushort_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_ushort_alloc)

(cffi:defcfun ("gsl_vector_ushort_calloc" gsl_vector_ushort_calloc) :pointer
  (n :pointer))

(cl:export 'gsl_vector_ushort_calloc)

(cffi:defcfun ("gsl_vector_ushort_alloc_from_block" gsl_vector_ushort_alloc_from_block) :pointer
  (b :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_ushort_alloc_from_block)

(cffi:defcfun ("gsl_vector_ushort_alloc_from_vector" gsl_vector_ushort_alloc_from_vector) :pointer
  (v :pointer)
  (offset :pointer)
  (n :pointer)
  (stride :pointer))

(cl:export 'gsl_vector_ushort_alloc_from_vector)

(cffi:defcfun ("gsl_vector_ushort_free" gsl_vector_ushort_free) :void
  (v :pointer))

(cl:export 'gsl_vector_ushort_free)

(cffi:defcfun ("gsl_vector_ushort_view_array" gsl_vector_ushort_view_array) _gsl_vector_ushort_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ushort_view_array)

(cffi:defcfun ("gsl_vector_ushort_view_array_with_stride" gsl_vector_ushort_view_array_with_stride) _gsl_vector_ushort_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ushort_view_array_with_stride)

(cffi:defcfun ("gsl_vector_ushort_const_view_array" gsl_vector_ushort_const_view_array) _gsl_vector_ushort_const_view
  (v :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ushort_const_view_array)

(cffi:defcfun ("gsl_vector_ushort_const_view_array_with_stride" gsl_vector_ushort_const_view_array_with_stride) _gsl_vector_ushort_const_view
  (base :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ushort_const_view_array_with_stride)

(cffi:defcfun ("gsl_vector_ushort_subvector" gsl_vector_ushort_subvector) _gsl_vector_ushort_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ushort_subvector)

(cffi:defcfun ("gsl_vector_ushort_subvector_with_stride" gsl_vector_ushort_subvector_with_stride) _gsl_vector_ushort_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ushort_subvector_with_stride)

(cffi:defcfun ("gsl_vector_ushort_const_subvector" gsl_vector_ushort_const_subvector) _gsl_vector_ushort_const_view
  (v :pointer)
  (i :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ushort_const_subvector)

(cffi:defcfun ("gsl_vector_ushort_const_subvector_with_stride" gsl_vector_ushort_const_subvector_with_stride) _gsl_vector_ushort_const_view
  (v :pointer)
  (i :pointer)
  (stride :pointer)
  (n :pointer))

(cl:export 'gsl_vector_ushort_const_subvector_with_stride)

(cffi:defcfun ("gsl_vector_ushort_set_zero" gsl_vector_ushort_set_zero) :void
  (v :pointer))

(cl:export 'gsl_vector_ushort_set_zero)

(cffi:defcfun ("gsl_vector_ushort_set_all" gsl_vector_ushort_set_all) :void
  (v :pointer)
  (x :unsigned-short))

(cl:export 'gsl_vector_ushort_set_all)

(cffi:defcfun ("gsl_vector_ushort_set_basis" gsl_vector_ushort_set_basis) :int
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_ushort_set_basis)

(cffi:defcfun ("gsl_vector_ushort_fread" gsl_vector_ushort_fread) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_ushort_fread)

(cffi:defcfun ("gsl_vector_ushort_fwrite" gsl_vector_ushort_fwrite) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_ushort_fwrite)

(cffi:defcfun ("gsl_vector_ushort_fscanf" gsl_vector_ushort_fscanf) :int
  (stream :pointer)
  (v :pointer))

(cl:export 'gsl_vector_ushort_fscanf)

(cffi:defcfun ("gsl_vector_ushort_fprintf" gsl_vector_ushort_fprintf) :int
  (stream :pointer)
  (v :pointer)
  (format :string))

(cl:export 'gsl_vector_ushort_fprintf)

(cffi:defcfun ("gsl_vector_ushort_memcpy" gsl_vector_ushort_memcpy) :int
  (dest :pointer)
  (src :pointer))

(cl:export 'gsl_vector_ushort_memcpy)

(cffi:defcfun ("gsl_vector_ushort_reverse" gsl_vector_ushort_reverse) :int
  (v :pointer))

(cl:export 'gsl_vector_ushort_reverse)

(cffi:defcfun ("gsl_vector_ushort_swap" gsl_vector_ushort_swap) :int
  (v :pointer)
  (w :pointer))

(cl:export 'gsl_vector_ushort_swap)

(cffi:defcfun ("gsl_vector_ushort_swap_elements" gsl_vector_ushort_swap_elements) :int
  (v :pointer)
  (i :pointer)
  (j :pointer))

(cl:export 'gsl_vector_ushort_swap_elements)

(cffi:defcfun ("gsl_vector_ushort_max" gsl_vector_ushort_max) :unsigned-short
  (v :pointer))

(cl:export 'gsl_vector_ushort_max)

(cffi:defcfun ("gsl_vector_ushort_min" gsl_vector_ushort_min) :unsigned-short
  (v :pointer))

(cl:export 'gsl_vector_ushort_min)

(cffi:defcfun ("gsl_vector_ushort_minmax" gsl_vector_ushort_minmax) :void
  (v :pointer)
  (min_out :pointer)
  (max_out :pointer))

(cl:export 'gsl_vector_ushort_minmax)

(cffi:defcfun ("gsl_vector_ushort_max_index" gsl_vector_ushort_max_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_ushort_max_index)

(cffi:defcfun ("gsl_vector_ushort_min_index" gsl_vector_ushort_min_index) :pointer
  (v :pointer))

(cl:export 'gsl_vector_ushort_min_index)

(cffi:defcfun ("gsl_vector_ushort_minmax_index" gsl_vector_ushort_minmax_index) :void
  (v :pointer)
  (imin :pointer)
  (imax :pointer))

(cl:export 'gsl_vector_ushort_minmax_index)

(cffi:defcfun ("gsl_vector_ushort_add" gsl_vector_ushort_add) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_ushort_add)

(cffi:defcfun ("gsl_vector_ushort_sub" gsl_vector_ushort_sub) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_ushort_sub)

(cffi:defcfun ("gsl_vector_ushort_mul" gsl_vector_ushort_mul) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_ushort_mul)

(cffi:defcfun ("gsl_vector_ushort_div" gsl_vector_ushort_div) :int
  (a :pointer)
  (b :pointer))

(cl:export 'gsl_vector_ushort_div)

(cffi:defcfun ("gsl_vector_ushort_scale" gsl_vector_ushort_scale) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_ushort_scale)

(cffi:defcfun ("gsl_vector_ushort_add_constant" gsl_vector_ushort_add_constant) :int
  (a :pointer)
  (x :double))

(cl:export 'gsl_vector_ushort_add_constant)

(cffi:defcfun ("gsl_vector_ushort_equal" gsl_vector_ushort_equal) :int
  (u :pointer)
  (v :pointer))

(cl:export 'gsl_vector_ushort_equal)

(cffi:defcfun ("gsl_vector_ushort_isnull" gsl_vector_ushort_isnull) :int
  (v :pointer))

(cl:export 'gsl_vector_ushort_isnull)

(cffi:defcfun ("gsl_vector_ushort_ispos" gsl_vector_ushort_ispos) :int
  (v :pointer))

(cl:export 'gsl_vector_ushort_ispos)

(cffi:defcfun ("gsl_vector_ushort_isneg" gsl_vector_ushort_isneg) :int
  (v :pointer))

(cl:export 'gsl_vector_ushort_isneg)

(cffi:defcfun ("gsl_vector_ushort_isnonneg" gsl_vector_ushort_isnonneg) :int
  (v :pointer))

(cl:export 'gsl_vector_ushort_isnonneg)

(cffi:defcfun ("gsl_vector_ushort_get" gsl_vector_ushort_get) :unsigned-short
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_ushort_get)

(cffi:defcfun ("gsl_vector_ushort_set" gsl_vector_ushort_set) :void
  (v :pointer)
  (i :pointer)
  (x :unsigned-short))

(cl:export 'gsl_vector_ushort_set)

(cffi:defcfun ("gsl_vector_ushort_ptr" gsl_vector_ushort_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_ushort_ptr)

(cffi:defcfun ("gsl_vector_ushort_const_ptr" gsl_vector_ushort_const_ptr) :pointer
  (v :pointer)
  (i :pointer))

(cl:export 'gsl_vector_ushort_const_ptr)

(cffi:defcenum gsl_wavelet_direction
	(:gsl_wavelet_forward #.1)
	(:gsl_wavelet_backward #.-1))

(cl:export 'gsl_wavelet_direction)

(cffi:defcstruct gsl_wavelet_type
	(name :string)
	(init :pointer))

(cl:export 'gsl_wavelet_type)

(cl:export 'name)

(cl:export 'init)

(cffi:defcstruct gsl_wavelet
	(type :pointer)
	(h1 :pointer)
	(g1 :pointer)
	(h2 :pointer)
	(g2 :pointer)
	(nc :pointer)
	(offset :pointer))

(cl:export 'gsl_wavelet)

(cl:export 'type)

(cl:export 'h1)

(cl:export 'g1)

(cl:export 'h2)

(cl:export 'g2)

(cl:export 'nc)

(cl:export 'offset)

(cffi:defcstruct gsl_wavelet_workspace
	(scratch :pointer)
	(n :pointer))

(cl:export 'gsl_wavelet_workspace)

(cl:export 'scratch)

(cl:export 'n)

(cffi:defcvar ("gsl_wavelet_daubechies" gsl_wavelet_daubechies)
 :pointer)

(cl:export 'gsl_wavelet_daubechies)

(cffi:defcvar ("gsl_wavelet_daubechies_centered" gsl_wavelet_daubechies_centered)
 :pointer)

(cl:export 'gsl_wavelet_daubechies_centered)

(cffi:defcvar ("gsl_wavelet_haar" gsl_wavelet_haar)
 :pointer)

(cl:export 'gsl_wavelet_haar)

(cffi:defcvar ("gsl_wavelet_haar_centered" gsl_wavelet_haar_centered)
 :pointer)

(cl:export 'gsl_wavelet_haar_centered)

(cffi:defcvar ("gsl_wavelet_bspline" gsl_wavelet_bspline)
 :pointer)

(cl:export 'gsl_wavelet_bspline)

(cffi:defcvar ("gsl_wavelet_bspline_centered" gsl_wavelet_bspline_centered)
 :pointer)

(cl:export 'gsl_wavelet_bspline_centered)

(cffi:defcfun ("gsl_wavelet_alloc" gsl_wavelet_alloc) :pointer
  (t_arg0 :pointer)
  (k :pointer))

(cl:export 'gsl_wavelet_alloc)

(cffi:defcfun ("gsl_wavelet_free" gsl_wavelet_free) :void
  (w :pointer))

(cl:export 'gsl_wavelet_free)

(cffi:defcfun ("gsl_wavelet_name" gsl_wavelet_name) :string
  (w :pointer))

(cl:export 'gsl_wavelet_name)

(cffi:defcfun ("gsl_wavelet_workspace_alloc" gsl_wavelet_workspace_alloc) :pointer
  (n :pointer))

(cl:export 'gsl_wavelet_workspace_alloc)

(cffi:defcfun ("gsl_wavelet_workspace_free" gsl_wavelet_workspace_free) :void
  (work :pointer))

(cl:export 'gsl_wavelet_workspace_free)

(cffi:defcfun ("gsl_wavelet_transform" gsl_wavelet_transform) :int
  (w :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (dir gsl_wavelet_direction)
  (work :pointer))

(cl:export 'gsl_wavelet_transform)

(cffi:defcfun ("gsl_wavelet_transform_forward" gsl_wavelet_transform_forward) :int
  (w :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (work :pointer))

(cl:export 'gsl_wavelet_transform_forward)

(cffi:defcfun ("gsl_wavelet_transform_inverse" gsl_wavelet_transform_inverse) :int
  (w :pointer)
  (data :pointer)
  (stride :pointer)
  (n :pointer)
  (work :pointer))

(cl:export 'gsl_wavelet_transform_inverse)

(cffi:defcfun ("gsl_wavelet2d_transform" gsl_wavelet2d_transform) :int
  (w :pointer)
  (data :pointer)
  (tda :pointer)
  (size1 :pointer)
  (size2 :pointer)
  (dir gsl_wavelet_direction)
  (work :pointer))

(cl:export 'gsl_wavelet2d_transform)

(cffi:defcfun ("gsl_wavelet2d_transform_forward" gsl_wavelet2d_transform_forward) :int
  (w :pointer)
  (data :pointer)
  (tda :pointer)
  (size1 :pointer)
  (size2 :pointer)
  (work :pointer))

(cl:export 'gsl_wavelet2d_transform_forward)

(cffi:defcfun ("gsl_wavelet2d_transform_inverse" gsl_wavelet2d_transform_inverse) :int
  (w :pointer)
  (data :pointer)
  (tda :pointer)
  (size1 :pointer)
  (size2 :pointer)
  (work :pointer))

(cl:export 'gsl_wavelet2d_transform_inverse)

(cffi:defcfun ("gsl_wavelet2d_nstransform" gsl_wavelet2d_nstransform) :int
  (w :pointer)
  (data :pointer)
  (tda :pointer)
  (size1 :pointer)
  (size2 :pointer)
  (dir gsl_wavelet_direction)
  (work :pointer))

(cl:export 'gsl_wavelet2d_nstransform)

(cffi:defcfun ("gsl_wavelet2d_nstransform_forward" gsl_wavelet2d_nstransform_forward) :int
  (w :pointer)
  (data :pointer)
  (tda :pointer)
  (size1 :pointer)
  (size2 :pointer)
  (work :pointer))

(cl:export 'gsl_wavelet2d_nstransform_forward)

(cffi:defcfun ("gsl_wavelet2d_nstransform_inverse" gsl_wavelet2d_nstransform_inverse) :int
  (w :pointer)
  (data :pointer)
  (tda :pointer)
  (size1 :pointer)
  (size2 :pointer)
  (work :pointer))

(cl:export 'gsl_wavelet2d_nstransform_inverse)

(cffi:defcfun ("gsl_wavelet2d_transform_matrix" gsl_wavelet2d_transform_matrix) :int
  (w :pointer)
  (a :pointer)
  (dir gsl_wavelet_direction)
  (work :pointer))

(cl:export 'gsl_wavelet2d_transform_matrix)

(cffi:defcfun ("gsl_wavelet2d_transform_matrix_forward" gsl_wavelet2d_transform_matrix_forward) :int
  (w :pointer)
  (a :pointer)
  (work :pointer))

(cl:export 'gsl_wavelet2d_transform_matrix_forward)

(cffi:defcfun ("gsl_wavelet2d_transform_matrix_inverse" gsl_wavelet2d_transform_matrix_inverse) :int
  (w :pointer)
  (a :pointer)
  (work :pointer))

(cl:export 'gsl_wavelet2d_transform_matrix_inverse)

(cffi:defcfun ("gsl_wavelet2d_nstransform_matrix" gsl_wavelet2d_nstransform_matrix) :int
  (w :pointer)
  (a :pointer)
  (dir gsl_wavelet_direction)
  (work :pointer))

(cl:export 'gsl_wavelet2d_nstransform_matrix)

(cffi:defcfun ("gsl_wavelet2d_nstransform_matrix_forward" gsl_wavelet2d_nstransform_matrix_forward) :int
  (w :pointer)
  (a :pointer)
  (work :pointer))

(cl:export 'gsl_wavelet2d_nstransform_matrix_forward)

(cffi:defcfun ("gsl_wavelet2d_nstransform_matrix_inverse" gsl_wavelet2d_nstransform_matrix_inverse) :int
  (w :pointer)
  (a :pointer)
  (work :pointer))

(cl:export 'gsl_wavelet2d_nstransform_matrix_inverse)


